const ADMINS = [5198364323] 
const DB_URL = 'mongodb://c52584_vadimmafiainvest_com:LiRmoQencutof61@mongo1.c52584.h2,mongo2.c52584.h2,mongo3.c52584.h2/c52584_vadimmafiainvest_com?replicaSet=MongoReplica'
const QIWI_TOKEN = "78ee5305ed7454be89f81d4975fc801b"
const BOT_TOKEN = "5731176224:AAH3KhsJJioZeF7M7jy2_lttRTL0whehpqI" 

var txnId = require('./txnId');   
var config = {
	payeer: {
		enabled: true,
		account: "P1062687461", 
	  apiId: 1731949089, 
	  apiPass: "eUPpKHVV8oDGNOkO"
	}
} 

process.env.TZ = 'Moscow/Europe';
let trees = [
	{
		id: 0,
		name: "iPhone 1",
		earn: 13,
		price: 10,
	},
	{
		id: 1,
		name: "iPhone 2",
		earn: 25,
		price: 20,
	},
	{
		id: 2,
		name: "iPhone 3",
		earn: 57,
		price: 50,
	},
	{
		id: 3,
		name: "iPhone 4",
		earn: 109,
		price: 100,
	},
	{
		id: 4,
		name: "iPhone 5",
		earn: 200,
		price: 190,
	},
	{
		id: 5,
		name: "iPhone 6",
		earn: 315,
		price: 300,
	},
	{
		id: 6,
		name: "iPhone 7",
		earn: 625,
		price: 600,
	},
	{
		id: 7,
		name: "iPhone 8",
		earn: 935,
		price: 900,
	},
	{
		id: 8,
		name: "iPhone 9",
		earn: 1470,
		price: 1400,
	},
];


const mongo = require('mongoose');
mongo.connect(DB_URL);


var User = mongo.model('User', {
	id: Number,
	buybalance: Number,
	outbalance: Number,
	outhbalance: Number,
	name: String,
	bhivebalance: Number,
	accumulation_balance: Number,
	deposit_balance: Number,
	fc: Number,
	ref: Number,
	regDate: String,
	trees: Array,
	deposit: Number,
	payout: Number,
	fetuses: Number,
	menu: String,
	lastCollect: Number,
	ban: Boolean,
	refCount: Number,
	wb_profits: Number,
	clanName: String,
	totalEarn: Number,
	not: Boolean,
	prize: Boolean,
	spinsToday: Number,
	data: String,
	bank: Number,
	game_balance: Number,
	game_balance: Number,
	game_payin: Number,
	game_payout: Number,
	game_limit: Number,
	game_bet: Number,
});

var wbProfits = [0, 33, 340, 618, 982, 2200, 4978, 7470, 23027] // –¥–æ—Ö–æ–¥
var wbPrices = [0, 0, 120, 400, 500, 2000, 3000, 4000, 7000] // —Ü–µ–Ω–∞

var Task = mongo.model('Task', {
	id: Number
});

const Clan = mongo.model('Clan', {
	name: String,
	maxMembers: Number,
	members: Number,
	balance: Number,
	creator_id: Number,
	creator_name: String,
	zam_id: Number,
	zam_name: String,
	total_earn: Number,
	level: Number,
	bal: Number
})

const Ticket = mongo.model('Ticket', {
	id: Number,
	amount: Number,
	wallet: String
})

const BeeMother = mongo.model("BeeMothr", {
	creator_id: Number,
	end_time: Number,
	beesGet: Number,
	nextBeeGet: Number
})

const WildBee = mongo.model("WildBee", {
	creator_id: Number,
	start_time: Number,
	level: Number,
	bee_profit: Number,
})

const Tamagochi = mongo.model("Tamagochi", {
	creator_id: Number,
	start_time: Number,
	cost: Number,
	status: Boolean,
	sick: Boolean,
	sickTime: Number,
	lastFeed: Number,
	lastClean: Number,
})

const Voucher = mongo.model("Voucher", { id: String, tree_id: Number })
function generateID(res) { var text = ""; var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"; for (var i = 0; i < res; i++)text += possible.charAt(Math.floor(Math.random() * possible.length)); return text }

const Start = [
	["üî∞ –ü–µ—Ä—Å–æ–Ω–∞–∂–∏", "üé≤ –ò–≥—Ä—ã", "‚ôªÔ∏è –û–±–º–µ–Ω"],
	["üñ• –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", "üë• –ü–∞—Ä—Ç–Ω—ë—Ä—ã"],
	["üëë –ë–∞–Ω–¥–∞", "üé≤ –¢–∞–º–∞–≥–æ—á–∏", "üìö –û –±–æ—Ç–µ"],
	["üîë –ö–ª–∞–¥—ã"]
];

const Sekret = [
	["üíº –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "üëî –ü–∞—Ä—Ç–Ω—ë—Ä–∞–º"],
    ["üí≥ –ö–æ—à–µ–ª—ë–∫"],
	["‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "üóì –û–±—É—á–µ–Ω–∏–µ"]
];

const Klad = [
	["ü§´ –ö–ª–∞–¥", "üí£", "üí£"],
	["üí£", "üí£", "üí£"],
	["üí£", "üí£", "üí£"],
	["üìã –ù–∞–∑–∞–¥"]
];

const Cancel = [
	["üö´ –û—Ç–º–µ–Ω–∞"]
];

const AdminPanel = [
	["üì¨ –†–∞—Å—Å—ã–ª–∫–∞", "üìÆ –í—ã–ø–ª–∞—Ç—ã"],
	["üìß –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"],
	["üîô –ù–∞–∑–∞–¥"]
];

const RM_admin = {
	inline_keyboard: [
	    [{ text: "üî• –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data: "a_voucherpromo" }, { text: "‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞", callback_data: "admin_mm" }],
		[{ text: "üîé –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", callback_data: "admin_u" }, { text: "üìÆ –í—ã–ø–ª–∞—Ç—ã", callback_data: "admin_w" }],
		[{ text: "üóí –ß–µ–∫", callback_data: "a_voucher" }, { text: "‚úèÔ∏è –õ–∏–º–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ü–µ—Ä—Å–æ–Ω–∞–∂–µ–≤", callback_data: "admin_limit" }],
		[{ text: "‚úèÔ∏è –ë–æ–Ω—É—Å –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é", callback_data: "admin_b" }, { text: "‚ôªÔ∏è –ë–æ–Ω—É—Å –∫ —Ä–µ–∏–Ω–≤–µ—Å—Ç—É", callback_data: "admin_br" }],
	    [{ text: "üïí –¢–æ–ø –∑–∞ 24 —á–∞—Å–∞", callback_data: "admin_top" }],
	]
}

const RM_admin_return = { inline_keyboard: [[{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "admin_return" }],] }

const RM_promo = {
	inline_keyboard: [
	[{ text: "üí∏ –î–ª—è –ø–æ–∫—É–ø–æ–∫", callback_data: "voucherbuy" }],
	[{ text: "üí≥ –î–ª—è –≤—ã–≤–æ–¥–∞", callback_data: "voucherout" }],
	]
}

const Promo = mongo.model("Promo", { id: String, sum: Number, activated: Boolean })
function generateID(res) { var text = ""; var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"; for (var i = 0; i < res; i++)text += possible.charAt(Math.floor(Math.random() * possible.length)); return text } 

const RM_mm1 = {
	inline_keyboard: [
		[{ text: "‚èπ –°—Ç–æ–ø", callback_data: "admin_mm_stop" }],
		[{ text: "‚è∏ –ü–∞—É–∑–∞", callback_data: "admin_mm_pause" }],
	]
}

const RM_mm2 = {
	inline_keyboard: [
		[{ text: "‚èπ –°—Ç–æ–ø", callback_data: "admin_mm_stop" }],
		[{ text: "‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data: "admin_mm_play" }],
	]
}



const { Qiwi } = require('node-qiwi-api');
const qiwi = new Qiwi(QIWI_TOKEN);

const Telegram = require('node-telegram-bot-api');
const bot = new Telegram(BOT_TOKEN, { polling: true });

bot.getMe().then(r => console.log(r))

bot.on('text', async (message) => {
	message.send = (text, params) => bot.sendMessage(message.chat.id, text, params);
	let $menu = [];
	var uid = message.from.id
	var text = message.text
	let dt = new Date
	console.log("[" + dt.getHours() + ":" + dt.getMinutes() + ":" + dt.getSeconds() + "] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + uid + " –æ—Ç–ø—Ä–∞–≤–∏–ª: " + text)

let user0 = await User.findOne({ id: 0 });
  if(!user0){
    let schema = {
      id: 0,
      buybalance: 5,
      outbalance: 0,
      outhbalance: 0,
      bhivebalance: 0,
      accumulation_balance: 0,
      deposit_balance: 0,
      wb_profits: 0,
      name: 'NMI_FUN',
      ref: 0,
      deposit: 0,
      payout: 0,
      fc: 0,
      game_balance: 0
    }
  
    let user = new User(schema);
    await user.save();
  }
  
  let user1 = await User.findOne({ id: 1 });
  if(!user1){
    let schema = {
      id: 1,
      buybalance: 5,
      outbalance: 0,
      outhbalance: 0,
      bhivebalance: 0,
      accumulation_balance: 0,
	  deposit_balance: 0,
      wb_profits: 0,
      name: 'NMI_FUN',
      ref: 0,
      deposit: 0,
      payout: 0,
      game_balance: 0,
      menu: "{\"price\":20,\"status\":true,\"count\":5,\"bought\":3}"
    }
  
    let user = new User(schema);
    await user.save();
  }
  
	Start.map((x) => $menu.push(x));
	if (ADMINS.find((x) => x == message.from.id)) $menu.push(["üîù –ê–¥–º–∏–Ω–∫–∞"]);

	if (message.text) {
		if (message.text.startsWith('/start') || message.text == 'üîô –ù–∞–∑–∞–¥') {
			let $user = await User.findOne({ id: message.from.id });
			if (!$user) {
				let schema = {
					id: message.from.id,
					buybalance: 5,
					outbalance: 0,
					outhbalance: 0,
					bhivebalance: 0,
					accumulation_balance: 0,
					deposit_balance: 0,
					wb_profits: 0,
					name: message.from.first_name,
					fc: 0,
					ref: 0,
					regDate: `${new Date().getDate()}/${new Date().getMonth() + 1}/${new Date().getFullYear()}`,
					trees: [],
					deposit: 0,
					payout: 0,
					fetuses: 0,
					menu: "",
					lastCollect: Date.now(),
					ban: false,
					refCount: 0,
					not: false,
					data: "",
					bank: 0,
					game_balance: 0,
				}

				let reffer = Number(message.text.split('/start ')[1]);

				if (reffer) {
					let $reffer = await User.findOne({ id: reffer });
					if ($reffer) {
						schema.ref = $reffer.id;
						await $reffer.inc('buybalance', 0.20);
						await $reffer.inc('refCount', 1);
						bot.sendMessage($reffer.id, `üîî –í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ <a href="tg://user?id=${message.from.id}">–ø–∞—Ä—Ç–Ω—ë—Ä–∞</a> –∏ –ø–æ–ª—É—á–∏–ª–∏ 0.20‚ÇΩ`, { parse_mode: "HTML" });
					}
				}

				let user = new User(schema);
				await user.save();
			
			}

			let postfix = message.text.split('/start ')[1]
			if (postfix) {
				if (postfix[0] == "C") {
					message.user = await User.findOne({ id: message.from.id });

					var c = await Voucher.findOne({ id: postfix.substr(1) })
					if (c) {
						let total_balance = 0;
						message.user.trees.map((x) => {
							if ((((Date.now() - message.user.lastCollect) / 1000) / 60) * (trees.find((a) => a.id == x.id).earn / 60) > (trees.find((a) => a.id == x.id).earn * 72)) { total_balance += trees.find((a) => a.id == x.id).earn * 72; } else { total_balance += (((Date.now() - message.user.lastCollect) / 1000) / 60) * (trees.find((a) => a.id == x.id).earn / 60); }
						})
						await Voucher.deleteOne({ _id: c._id })
						await message.user.set('lastCollect', Date.now());
						await message.user.inc('fetuses', Number(total_balance.toFixed(2)));
						await message.user.trees.push({ id: c.tree_id, date: Date.now(), lastCollect: Date.now() });
						await message.user.save();
						bot.sendPhoto("@news_botov", `c${c.tree_id}.png`, ¬†{ caption: `‚úÖ <a href="tg://user?id=${message.chat.id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —á–µ–∫ –∏ –ø–æ–ª—É—á–∏–ª –ü–µ—Ä—Å–æ–Ω–∞–∂–∞ - <b>${(trees.find((a) => a.id == c.tree_id)).name}</b>`, parse_mode: "HTML" });

						return bot.sendPhoto(message.chat.id, `c${c.tree_id}.png`, { caption: `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —á–µ–∫ –∏ –ø–æ–ª—É—á–∏–ª–∏ –ü–µ—Ä—Å–æ–Ω–∞–∂–∞ - <b>${(trees.find((a) => a.id == c.tree_id)).name}</b>`, parse_mode: "HTML", })
					}
				}
			}
			return message.send(`
‚úåÔ∏è <b>–ü—Ä–∏–≤–µ—Ç, ${message.from.first_name}</b>
üìù <b>–¶–µ–ª—å –∏–≥—Ä—ã:</b>
‚îú‚îÄ–ü–æ–ø–æ–ª–Ω—è–µ–º —Å—á–µ—Ç ü§ò
‚îú‚îÄ–ü–æ–∫—É–ø–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π üî∞
‚îú‚îÄ–°–æ–±–∏—Ä–∞–µ–º coins üõ°Ô∏è
‚îú‚îÄ–û–±–º–µ–Ω–∏–≤–∞–µ–º coins üí±
‚îî‚îÄ–ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å–≥–∏ üíπ
‚ùì –ß–µ–º –º—ã –≤—ã–ø–ª–∞—á–∏–≤–∞–µ–º?
‚ùóÔ∏è –° –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –±–æ—Ç–∞, –ø—Ä–æ–¥–∞–∂–∏ —Ä–µ–∫–ª–∞–º—ã –∏ –¥—Ä—É–≥–∏—Ö –Ω–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
üì∞ –ù–æ–≤–æ—Å—Ç–∏: üëâ @news_botov
üë§ <b>–ß–∞—Ç</b> üëâ @chat_participant
üì¢ <b>–ê—É–∫—Ü–∏–æ–Ω</b>  üëâ @auction_iphone 
üí≥<b>–í—ã–ø–ª–∞—Ç—ã</b> üëâ @payments_bota`, {
				parse_mode: "HTML",
				reply_markup: {
					keyboard: $menu,
					resize_keyboard: true
				}
			});
		}
	}

	message.user = await User.findOne({ id: message.from.id });
	if (!message.user) return message.send(`–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ù–∞–ø–∏—à–∏—Ç–µ /start`);
	if (message.user.ban) return
	if (!message.user.name || message.user.name != message.from.first_name)
		await User.findOneAndUpdate({ id: message.from.id }, { name: message.from.first_name })

	if (state[uid] == 7770 && ADMINS.indexOf(message.from.id) !== -1 && text != "0") {
		state[uid] = undefined
		bot.sendMessage(uid, "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!").then((e) => {
			if (text.split("#").length == 4) {
				var btn_text = text.split("#")[1].split("#")[0].replace(/(^\s*)|(\s*)$/g, '')
				var btn_link = text.split("#")[2].split("#")[0].replace(/(^\s*)|(\s*)$/g, '')
				text = text.split("#")[0]
				mm_t(text, e.message_id, e.chat.id, true, btn_text, btn_link, 100)
			}
			else mm_t(text, e.message_id, e.chat.id, false, false, false, 100)
		})
	}
	
		if ((await bot.getChatMember("@invest_x_iphone_robot", uid)).status == "left" || (await bot.getChatMember("@Licifersss", uid)).status == "left") {

   return message.send(`‚ùï <b>–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã:</b>`, { parse_mode: "html", reply_markup: { inline_keyboard: [[{ text: "üì§ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –ù–æ–≤–æ—Å—Ç–∏", url: "https://t.me/payments_bota" }], [{ text: "ü§ù–ö–∞–Ω–∞–ª –ü—Ä–æ–≥–µ—Ä–∞", url: "https://t.me/asik_prog" }]] } });
  }
  
	if (state[uid] == 77771 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		var bm = JSON.parse((await User.findOne({ id: 1 })).menu)
		bm.count = Number(text)
		bm.bought = 0
		bm.status = true
		await User.findOneAndUpdate({ id: 1 }, { menu: JSON.stringify(bm) })
		return message.send(`${text} –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤—ã–ø—É—â–µ–Ω–æ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –ø–æ —Ü–µ–Ω–µ ${bm.price}!`, { reply_markup: { inline_keyboard: [[{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "admin_bm" }]] } });
	}
	if (state[uid] == 77772 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		var bm = JSON.parse((await User.findOne({ id: 1 })).menu)
		bm.price = Number(text)
		await User.findOneAndUpdate({ id: 1 }, { menu: JSON.stringify(bm) })
		return message.send(`–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ ${bm.price} —Ä—É–±–ª–µ–π!`, { reply_markup: { inline_keyboard: [[{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "admin_bm" }]] } });
	}
	if (state[uid] == 77773 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		var bm = JSON.parse((await User.findOne({ id: 1 })).menu)
		bm.count = Number(text)
		await User.findOneAndUpdate({ id: 1 }, { menu: JSON.stringify(bm) })
		return message.send(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ ${bm.count} —à—Ç—É–∫!`, { reply_markup: { inline_keyboard: [[{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "admin_bm" }]] } });
	}
    if (state[message.chat.id] == 99999 && ADMINS.indexOf(message.from.id) !== -1) {
		state[message.chat.id] = undefined
		var sum = Number(message.text)
		if (sum != 0) {
			var cid = generateID(8)
			var v = new Promo({ id: cid, sum: sum })
			await v.save()
			bot.sendMessage(message.chat.id, `–ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω!\n\n<code>P${cid}</code>`, { replyMarkup: Start, parse_mode: "HTML" });
		} else bot.sendMessage(message.chat.id, '–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ!', { replyMarkup: Start });
	}
	if (state[message.chat.id] == 10000 && ADMINS.indexOf(message.from.id) !== -1) {
		state[message.chat.id] = undefined
		var sum = Number(message.text)
		if (sum != 0) {
			var cid = generateID(8)
			var v = new Promo({ id: cid, sum: sum })
			await v.save()
			bot.sendMessage(message.chat.id, `–ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω!\n\n<code>O${cid}</code>`, { replyMarkup: Start,parse_mode: "HTML" });
		} else bot.sendMessage(message.chat.id, '–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ!', { replyMarkup: Start });
	}
	if (state[uid] == 7771 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		text = Number(text.replace("%", ""))
		await User.findOneAndUpdate({ id: 0 }, { deposit: text })
		bot.sendMessage("@news_botov", `ü§ë <a href="tg://user?id=${message.chat.id}">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</a> —É—Å—Ç–∞–Ω–æ–≤–∏–ª –±–æ–Ω—É—Å –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é –≤ <b>${text}%</b>`,{parse_mode: "HTML" })
		return message.send(`–ë–æ–Ω—É—Å –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é –≤ ${text}% —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!`, { reply_markup: RM_admin_return });
	}

	if (state[uid] == 77712 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		text = Number(text.replace("%", ""))
		await User.findOneAndUpdate({ id: 0 }, { bhivebalance: text })
		bot.sendMessage("@news_botov", `ü§ë <a href="tg://user?id=${message.chat.id}">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</a> —É—Å—Ç–∞–Ω–æ–≤–∏–ª –±–æ–Ω—É—Å –∫ —Ä–µ–∏–Ω–≤–µ—Å—Ç—É –≤ <b>${text}%</b>`,{parse_mode: "HTML" })
		return message.send(`–ë–æ–Ω—É—Å –∫ —Ä–µ–∏–Ω–≤–µ—Å—Ç—É –≤ ${text}% —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!`, { reply_markup: RM_admin_return });
	}

	if (state[uid] == 777122 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		text = Number(text.replace("%", ""))
		await User.findOneAndUpdate({ id: 0 }, { totalEarn: text })
		return message.send(`–ö—É—Ä—Å WAVES –≤ ${text} —Ä—É–±–∏–Ω–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!`, { reply_markup: RM_admin_return });
	}
	
	if (state[uid] == 7771222 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		text = Number(text.replace("%", ""))
		await User.findOneAndUpdate({ id: 0 }, { bhivebalance: text })
		return message.send(`–õ–∏–º–∏—Ç –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ ${text} –µ–¥–∏–Ω–∏—Ü —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!`, { reply_markup: RM_admin_return });
	}
	
	if (state[uid] == 15) {
		var sum = Number(message.text)
   if (isNaN(sum)) return message.send('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É!');
   if (sum < 1) return message.send('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–æ–ª—å—à–µ 1‚ÇΩ!');
   state[uid] = 15
   return bot.sendMessage(message.chat.id, `–í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã —Å—É–º–µ–µ—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–∞—à—É –ø—Ä–∏–±—ã–ª—å, –æ—Ç —Å—É–º–º—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: 

üíµ –í–∞—à–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è: <b>${sum * 1}‚ÇΩ</b>

‚ñ™Ô∏è –í–∞—à –ø—Ä–æ—Ñ–∏—Ç: <b>${sum * 1.5}‚ÇΩ</b>`, {
	             parse_mode: "HTML",
                 reply_markup: {
					keyboard: $menu,
					resize_keyboard: true
				}
			});
		}
		
		if (state[uid] == 777122289 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		text = Number(text.replace("%", ""))
		await User.findOneAndUpdate({ id: 0 }, { outbalance: text })
		bot.sendMessage("@news_botov", `ü§ë <a href="tg://user?id=${message.chat.id}">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</a> —É—Å—Ç–∞–Ω–æ–≤–∏–ª –±–æ–Ω—É—Å –∫ –≤—ã–≤–æ–¥—É –≤ <b>${text}%</b>`,{parse_mode: "HTML" })
		return message.send(`–ë–æ–Ω—É—Å –∫ –≤—ã–≤–æ–¥—É –≤ ${text}% —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!`, { reply_markup: RM_admin_return });
	}
	
	if (state[uid] == 133) {
			//  var kredit = message.user.kredit ? true : false 
		message.text = Number(message.text);
		if (message.text <= 0) return message.send('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–æ–ª—å—à–µ 0:');
		if (message.text < 100) return message.send(`–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç ${roundPlus( 100 - message.text)}‚ÇΩ`);
		if (message.user.kredit_balance > message.text) return message.send('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.');
		if (message.user.kredit_balance <= message.text) {
			 message.user.kredit = 1
		await message.user.dec('kredit_balance', message.text);
		await message.user.inc('deposit_balance', message.text);
			state[uid] = undefined
			return message.send(`üí≥ –í—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–∏ —Å–≤–æ–∏ –∫—Ä–µ–¥–∏—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ <b>${message.text}‚ÇΩ –ò –æ—Ç–∫—Ä—ã–ª–∏ –∫—Ä–µ–¥–∏—Ç.</b>. –£–¥–∞—á–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏—Ç–∞!`, {
				parse_mode: "HTML",
				reply_markup: {
					keyboard: Start,
					resize_keyboard: true
				}
			});
		}
	}
	
	if (state[uid] == 13) {
		message.text = Number(message.text);
		if (message.text <= 0) return message.send('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–æ–ª—å—à–µ 0:');
		if (message.text < 100) return message.send(`–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç ${roundPlus( 100 - message.text)}‚ÇΩ`);
		if (message.text > message.user.game_balance) return message.send('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.');
		if (message.text <= message.user.game_balance) {
		var bi = (await User.findOneAndUpdate({ id: 0 })). fetuses
		await message.user.dec('game_balance', message.text);
		await message.user.inc('deposit_balance', message.text * (1 + bi / 100));
		var str = ""
		if (bi > 0)
			str = `\nüî• <b>–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–Ω—É—Å - ${roundPlus(message.text * (bi / 100))}‚ÇΩ!</b>`
			state[uid] = undefined
			return message.send(`üí≥ –í—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–∏ —Å–≤–æ–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ <b>${roundPlus(message.text)}‚ÇΩ</b> –∏ ${str}. –£–¥–∞—á–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏—Ç–∞!`, {
				parse_mode: "HTML",
				reply_markup: {
					keyboard: Start,
					resize_keyboard: true
				}
			});
		}
	}
	
	if (state[uid] == 14) {
		message.text = Number(message.text);
		if (message.text <= 0) return message.send('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–æ–ª—å—à–µ 0:');
		if (message.text < 20) return message.send(`–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç ${roundPlus( 20 -message.text)}‚ÇΩ`);
		if (message.text > message.user.accumulation_balance) return message.send('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.');
		if (message.text <= message.user.accumulation_balance) {
			var bs = (await User.findOneAndUpdate({ id: 0 })). fetuses
		await message.user.dec('accumulation_balance', message.text);
		await message.user.inc('outbalance', message.text * (1 + bs / 100));
		var str = ""
		if (bs > 0)
			str = `\nüî• <b>–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–Ω—É—Å - ${roundPlus(message.text * (bs / 100))}‚ÇΩ!</b>`
			state[uid] = undefined
			return message.send(`üí≥ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–ª–∏ —Å–≤–æ–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –≤ —Ä–∞–∑–º–µ—Ä–µ <b>${roundPlus(message.text)}‚ÇΩ</b> –∏ ${str}. –°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å –≤—ã–≤–æ–¥–∞!`, {
				parse_mode: "HTML",
				reply_markup: {
					keyboard: Start,
					resize_keyboard: true
				}
			});
		}
	}

	if (state[uid] == 7772 && ADMINS.indexOf(message.from.id) !== -1 && text != "0") {
		state[uid] = undefined

		message.text = Number(message.text);
		let user = await User.findOne({ id: message.text });
		let u = user
		if (!user) return message.send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');

		let partners = await User.find({ ref: message.text });
		await message.user.set('menu', '');
		var kb = { inline_keyboard: [] }
		if (u.ban) kb.inline_keyboard.push([{ text: "‚ôªÔ∏è –†–∞–∑–±–∞–Ω–∏—Ç—å", callback_data: "unban_" + u.id }])
		else kb.inline_keyboard.push([{ text: "üõë –ó–∞–±–∞–Ω–∏—Ç—å", callback_data: "ban_" + u.id }])
		kb.inline_keyboard.push([{ text: "‚ûï –ë–∞–ª–∞–Ω—Å –ø–æ–∫—É–ø–æ–∫", callback_data: "addBuyBal_" + u.id }, { text: "‚úèÔ∏è –ë–∞–ª–∞–Ω—Å –ø–æ–∫—É–ø–æ–∫", callback_data: "editBuyBal_" + u.id }])
		kb.inline_keyboard.push([{ text: "‚ûï –ë–∞–ª–∞–Ω—Å –≤—ã–≤–æ–¥–∞", callback_data: "addOutBal_" + u.id }, { text: "‚úèÔ∏è –ë–∞–ª–∞–Ω—Å –≤—ã–≤–æ–¥–∞", callback_data: "editOutBal_" + u.id }])
		kb.inline_keyboard.push([{ text: "‚ûï –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è", callback_data: "addPayIns_" + u.id }, { text: "‚úèÔ∏è –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è", callback_data: "editPayIns_" + u.id }])
		kb.inline_keyboard.push([{ text: "‚ûï –í—ã–≤–µ–¥–µ–Ω–æ", callback_data: "addPayOuts_" + u.id }, { text: "‚úèÔ∏è –í—ã–≤–µ–¥–µ–Ω–æ", callback_data: "editPayOuts_" + u.id }])
		kb.inline_keyboard.push([{ text: "‚ùå –ó–∞–±—Ä–∞—Ç—å –ü–µ—Ä—Å–æ–Ω–∞–∂–µ–≤", callback_data: "takeTree_" + u.id }, { text: "–û–±–Ω—É–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data: "adminwipe_" + u.id }])

		kb.inline_keyboard.push([{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "admin_return" }])

		return message.send(`üìù –ü—Ä–∏–≥–ª–∞—Å–∏–ª: <b>${partners.length}</b>

üÜî ID: <code>${user.id}</code> 

<a href="tg://user?id=${user.id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>

üí∞ –ë–∞–ª–∞–Ω—Å:
üõí –î–ª—è –ø–æ–∫—É–ø–æ–∫: ${user.buybalance.toFixed(2)}‚ÇΩ
üì≠ –î–ª—è –≤—ã–≤–æ–¥–∞: ${user.outbalance.toFixed(2)}‚ÇΩ

–ü–µ—Ä—Å–æ–Ω–∞–∂–µ–π: <b>${user.trees.length}</b>

<b>–ü–æ–ø–æ–ª–Ω–∏–ª: ${roundPlus(user.deposit)}‚ÇΩ</b>
<b>–í—ã–≤–µ–ª: ${roundPlus(user.payout)}‚ÇΩ</b>

üëë –ö–ª–∞–Ω: ${user.clanName || "<i>–Ω–µ —Å–æ—Å—Ç–æ–∏—Ç</i>"}
${user.ref != 0 ? `<a href="tg://user?id=${user.ref}">–†–µ—Ñ–µ—Ä–µ—Ä</a>` : "<i>–Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–µ—Ä–∞</i>"}
`, {
			parse_mode: "HTML",
			reply_markup: kb
		});

	}

	if (state[uid] == 7773 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		await User.findOneAndUpdate({ id: data[uid] }, { $inc: { buybalance: Number(text) } })
		bot.sendMessage(data[uid], `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <b>${text}‚ÇΩ</b>!`, { parse_mode: html })
		return message.send(`–ë–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${text}‚ÇΩ!`, { reply_markup: RM_admin_return });
	}
	if (state[uid] == 7774 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		await User.findOneAndUpdate({ id: data[uid] }, { $inc: { outbalance: Number(text) } })
		bot.sendMessage(data[uid], `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <b>${text}‚ÇΩ</b>!`, { parse_mode: html })
		return message.send(`–ë–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${text}‚ÇΩ!`, { reply_markup: RM_admin_return });
	}
	if (state[uid] == 77745 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		await User.findOneAndUpdate({ id: data[uid] }, { $inc: { bhivebalance: Number(text) } })
		bot.sendMessage(data[uid], `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã WAVES –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <b>${text}‚ÇΩ</b>!`, { parse_mode: html })
		return message.send(`WAVES –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${text} WAVES!`, { reply_markup: RM_admin_return });
	}
	if (state[uid] == 777455 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		await User.findOneAndUpdate({ id: data[uid] }, { deposit: Number(text) })
		bot.sendMessage(data[uid], `üí∞ –í–∞—à —Å—É–º–º–∞ –í–∞—à–∏—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –ø–æ–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ <b>${text}‚ÇΩ</b>!`, { parse_mode: html })
		return message.send(`–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ ${text}‚ÇΩ!`, { reply_markup: RM_admin_return });
	}
	if (state[uid] == 77745555 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		await User.findOneAndUpdate({ id: data[uid] }, { payout: Number(text) })
		bot.sendMessage(data[uid], `üí∞ –í–∞—à —Å—É–º–º–∞ –í–∞—à–∏—Ö –≤—ã–≤–æ–¥–æ–≤ –ø–æ–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ <b>${text}‚ÇΩ</b>!`, { parse_mode: html })
		return message.send(`–°—É–º–º–∞ –≤—ã–≤–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ ${text}‚ÇΩ!`, { reply_markup: RM_admin_return });
	}
	if (state[uid] == 7775 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		await User.findOneAndUpdate({ id: data[uid] }, { buybalance: Number(text) })
		bot.sendMessage(data[uid], `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ <b>${text}‚ÇΩ</b>!`, { parse_mode: html })
		return message.send(`–ë–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ${text}‚ÇΩ!`, { reply_markup: RM_admin_return });
	}
	if (state[uid] == 111222 && ADMINS.indexOf(message.from.id) !== -1) {
  state[uid] = undefined
  await User.findOneAndUpdate({ id: data[uid] })
  bot.sendMessage(data[uid], `${text}`, { parse_mode: html })
        return message.send(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!`, { reply_markup: RM_admin_return });
        }
	if (state[uid] == 7776 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		await User.findOneAndUpdate({ id: data[uid] }, { outbalance: Number(text) })
		bot.sendMessage(data[uid], `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ <b>${text}‚ÇΩ</b>!`, { parse_mode: html })
		return message.send(`–ë–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ${text}‚ÇΩ!`, { reply_markup: RM_admin_return });
	}
	if (state[uid] == 77765 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		await User.findOneAndUpdate({ id: data[uid] }, { bhivebalance: Number(text) })
		bot.sendMessage(data[uid], `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã WAVES –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ <b>${text}‚ÇΩ</b>!`, { parse_mode: html })
		return message.send(`WAVES –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ${text} WAVES!`, { reply_markup: RM_admin_return });
	}
	if (state[uid] == 777655 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		await User.findOneAndUpdate({ id: data[uid] }, { deposit: Number(text) })
		bot.sendMessage(data[uid], `üí∞ –í–∞—à —Å—É–º–º–∞ –í–∞—à–∏—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –∏–∑–º–µ–Ω–∞ –Ω–∞ <b>${text}‚ÇΩ</b>!`, { parse_mode: html })
		return message.send(`–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω—ë–Ω–∞ –Ω–∞ ${text}‚ÇΩ!`, { reply_markup: RM_admin_return });
	}
	if (state[uid] == 77765555 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		await User.findOneAndUpdate({ id: data[uid] }, { payout: Number(text) })
		bot.sendMessage(data[uid], `üí∞ –í–∞—à —Å—É–º–º–∞ –í–∞—à–∏—Ö –≤—ã–≤–æ–¥–æ–≤ –∏–∑–º–µ–Ω–∞ –Ω–∞ <b>${text}‚ÇΩ</b>!`, { parse_mode: html })
		return message.send(`–°—É–º–º–∞ –≤—ã–≤–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω—ë–Ω–∞ –Ω–∞ ${text}‚ÇΩ!`, { reply_markup: RM_admin_return });
	}
	
	if (message.text.startsWith("/eval") && ADMINS.indexOf(message.from.id) !== -1) {
		return message.send(`${eval(text)}`, { reply_markup: RM_admin_return });
	}
	
	
	

	if (message.text) {
		if (message.text == 'üö´ –û—Ç–º–µ–Ω–∞') {
			state[uid] = undefined
			await message.user.set('menu', '');
			return message.send('üö´ –û—Ç–º–µ–Ω–µ–Ω–æ.', {
				reply_markup: {
					keyboard: $menu,
					resize_keyboard: true
				}
			});
		}
	}
	var a = await getAuction()

	if (state[uid] == 77777) {
		message.text = Number(message.text);

		if (message.user.buybalance < 10) { return bot.answerCallbackQuery(query.id, '–ù–∞ –±–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏!', true) }
		if (!message.text) return message.send('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:')
		if (message.text < 10) return message.send('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ - 10 —Ä—É–±–ª–µ–π!')
		if (message.text > message.user.buybalance) return message.send('–ù–∞ –±–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—É–º–º—É:')
		var a = await getAuction()
		if (a.status == true) return message.send('–ê—É–∫—Ü–∏–æ–Ω —É–∂–µ –Ω–∞—á–∞–ª—Å—è!')
		await User.findOneAndUpdate({ id: uid }, { $inc: { buybalance: -message.text } })
		state[uid] = undefined
		message.send(`‚úÖ <b>–í—ã –Ω–∞—á–∞–ª–∏ –∞—É–∫—Ü–∏–æ–Ω —Å—Ç–∞–≤–∫–æ–π –≤ ${message.text} —Ä—É–±–ª–µ–π!</b>`, {
			parse_mode: "html",
			reply_markup: {
				keyboard: $menu,
				resize_keyboard: true
			}
		});
		message.user.name = message.from.first_name
		return startAuction(message.user, message.text)
	}

	if (message.user.menu == 'reinvest') {
		message.text = Number(message.text);
		if (!message.text) return message.send('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!');
		if (message.text <= 0) return message.send('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!');
		if (message.text > message.user.outbalance) return message.send('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.');
		await message.user.set('menu', '');
		var b = (await User.findOneAndUpdate({ id: 0 })).bhivebalance
		await message.user.dec('outbalance', message.text);
		await message.user.inc('buybalance', message.text * (1 + b / 100));
		var str = ""
		if (b > 0)
			str = `\nüî• <b>–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–Ω—É—Å - ${roundPlus(message.text * (b / 100))} —Ä—É–±–ª–µ–π!</b>`
		return message.send(`‚ôªÔ∏è –í—ã —É—Å–ø–µ—à–Ω–æ —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–∏ <b>${roundPlus(message.text)} —Ä—É–±–ª–µ–π</b>${str}`, {
			parse_mode: "html",
			reply_markup: {
				keyboard: $menu,
				resize_keyboard: true
			}
		});
	}
	if (message.user.menu == 'reinvests') {
		message.text = Number(message.text);
		if (!message.text) return message.send('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ FlashCoin!');
		if (message.text <= 0) return message.send('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ FlashCoin!');
		if (message.text > message.user.buybalance) return message.send('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.');
		await message.user.set('menu', '');
		var b = (await User.findOneAndUpdate({ id: 0 })).bhivebalance
		await message.user.dec('buybalance', message.text);
		await message.user.inc('bhivebalance', message.text * (1 + b / 100));
		var str = ""
		if (b > 0)
			str = `\nüî• <b>–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–Ω—É—Å - ${roundPlus(message.text * (b / 100))} —Ä—É–±–ª–µ–π!</b>`
		return message.send(`‚ôªÔ∏è –í—ã —É—Å–ø–µ—à–Ω–æ —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–∏ <b>${roundPlus(message.text)} —Ä—É–±–ª–µ–π</b>${str}`, {
			parse_mode: "html",
			reply_markup: {
				keyboard: $menu,
				resize_keyboard: true
			}
		});
	}
	if (message.user.menu == 'buywaves') {
		message.text = Number(message.text);
		var price = (await User.findOneAndUpdate({ id: 0 })).totalEarn
		var amount = message.text * price
		if (!message.text) return message.send('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ WAVES –¥–ª—è –ø–æ–∫—É–ø–∫–∏!');
		if (message.text < 1) return message.send('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–æ–ª—å—à–µ 1 WAVES!');
		if (amount > message.user.buybalance) return message.send('–ù–∞ –í–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
		await message.user.set('menu', '');
		await message.user.dec('buybalance', amount);
		await message.user.inc('bhivebalance', message.text);
		return message.send(`üí≥ –í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ <b>${roundPlus(message.text)} WAVES</b> –∑–∞ <b>${roundPlus(amount)} —Ä—É–±–∏–Ω–æ–≤</b>`, {
			parse_mode: "html",
			reply_markup: {
				keyboard: $menu,
				resize_keyboard: true
			}
		});
	}

	if (state[uid] == 66666) {
		message.text = Number(message.text);
		if (!message.text) return message.send('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:');
		if (message.text <= 0) return message.send('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–æ–ª—å—à–µ 0:');
		if (message.text > message.user.outbalance) return message.send('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.');
		if (message.text <= message.user.outbalance) {
			await message.user.dec('outbalance', message.text);
			await message.user.inc('game_balance', message.text);
			await message.user.inc('game_payin', message.text);
			state[uid] = undefined
			return message.send(`üí≥ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –∏–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å –Ω–∞ ${message.text}‚ÇΩ —Å –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞!`, {
				reply_markup: {
					keyboard: $menu,
					resize_keyboard: true
				}
			});
		}
	}

	if (state[uid] == 66667) {
		message.text = Number(message.text);
		if (!message.text) return message.send('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:');
		if (message.text <= 0) return message.send('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–æ–ª—å—à–µ 0:');
		if (message.text > message.user.game_balance) return message.send('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.');
		if (message.text <= message.user.game_balance) {
			await message.user.dec('game_balance', message.text);
			await message.user.inc('outbalance', message.text);
			await message.user.inc('game_payout', message.text);
			state[uid] = undefined
			return message.send(`üí≥ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–≤–µ–ª–∏ ${message.text}‚ÇΩ —Å –∏–≥—Ä–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞!`, {
				reply_markup: {
					keyboard: $menu,
					resize_keyboard: true
				}
			});
		}
	}

	if (message.user.menu.startsWith('amountQiwi')) {
		message.text = Number(message.text);

		if (!message.text) return message.send('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –≤—ã–≤–æ–¥!');
		if (message.text <= 0) return message.send('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –≤—ã–≤–æ–¥!');

		if (message.text > message.user.outbalance) return message.send('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.');
		if (message.text < 17) return message.send('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–æ–ª–µ–µ 17 —Ä—É–±–ª–µ–π!');
		if (message.text > message.user.deposit * 1.5 - message.user.payout) return message.send(`–°—É–º–º–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –≤—ã–ø–ª–∞—Ç!\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ ${roundPlus(message.user.deposit * 1.5 - message.user.payout)} —Ä—É–±–ª–µ–π`);
        if (message.text + message.user.payout >= message.user.deposit * 1.5) {
				message.send(`–í—ã –≤—ã–≤–µ–ª–∏ –∏–∑ –±–æ—Ç–∞ –≤ 1.5 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ, —á–µ–º –≤–ª–æ–∂–∏–ª\n–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –æ–±–Ω—É–ª—ë–Ω`);
				await message.user.updateOne({ trees: [], buybalance: 0, outbalance: 0, deposit: 0, payout: 0 })
				await WildBee.updateMany({ creator_id: uid }, { level: 1 })
			}

		if (message.text <= message.user.outbalance) {
			await message.user.dec('outbalance', message.text);
			//await message.user.inc('payout', message.text);
			let ticket = new Ticket({
				id: message.from.id,
				amount: message.text,
				wallet: message.user.menu.split('amountQiwi')[1]
			});

			await ticket.save();
			await message.user.set('menu', '');
			
			ADMINS.map((x) => bot.sendMessage(x, "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥!!!"));
			
			bot.sendMessage("@news_botov", `ü§ë <a href="tg://user?id=${message.chat.id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> —Å–æ–∑–¥–∞–ª –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥ !`,{parse_mode: "HTML" })

			return message.send('‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ –¥–æ 48-—Ö —á–∞—Å–æ–≤!', {
				reply_markup: {
					keyboard: $menu,
					resize_keyboard: true
				}
			});
		}
	}

	if (message.user.menu == 'qiwi') {

		if (message.text.length < 5) return message.send('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä!', {
			reply_markup: {
				keyboard: Cancel,
				resize_keyboard: true
			}
		});



		await message.user.set('menu', 'amountQiwi' + message.text);
		return message.send(`–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –≤—ã–≤–æ–¥. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ ${message.user.outbalance.toFixed(2)}‚ÇΩ`);
	}

	if (message.text) {
		if (message.text == 'üî∞ –ü–µ—Ä—Å–æ–Ω–∞–∂–∏') {
			return message.send('–í—ã–±–µ—Ä–∏—Ç–µ, –∫—É–¥–∞ –∑–∞–π—Ç–∏.', {
				reply_markup: {
					inline_keyboard: [
						[{ text: "üíí–ú–∞–≥–∞–∑–∏–Ω", callback_data: "store" }, { text: "üïµÔ∏è‚Äç‚ôÇÔ∏è–ú–æ–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏", callback_data: "trees:inv0" }],
						[{text: "üé´–ü—Ä–æ–º–æ–∫–æ–¥", callback_data: "promoact"}]
					]
				}
			});
		}
		if (message.text == 'üé≤ –¢–∞–º–∞–≥–æ—á–∏') {
			var reply_markup
			var t = await Tamagochi.findOne({ creator_id: uid })
			if (!t)
				reply_markup = { inline_keyboard: [[{ text: "üß± –ö—É–ø–∏—Ç—å –≥–µ—Ä–æ—è –∑–∞ 1000 —Ä—É–±–ª–µ–π", callback_data: "malBuy" }]] }
			else
				reply_markup = { inline_keyboard: [[{ text: "üß± –ú–æ–π –≥–µ—Ä–æ–π", callback_data: "malMy" }]] }
			return bot.sendMessage(uid, `
<b>–≠—Ç–æ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è –∏–≥—Ä–∞ –¢–∞–º–∞–≥–æ—á–∏!</b>
–°—É—Ç—å <b>–µ–µ –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–∞</b>:
<i>1. –ü–æ–∫—É–ø–∞–µ–º –ì–µ—Ä–æ—è, –∫–æ—Ä–º–∏–º –µ–≥–æ, –∑–∞–±–æ—Ç–∏–º—Å—è  –∏ –ø–æ–ª—É—á–∞–µ–º –∑–∞ —ç—Ç–æ —Ö–æ—Ä–æ—à–µ–µ –¥–µ–Ω–µ–∂–Ω–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ, –∞ –∏–º–µ–Ω–Ω–æ +1% –ø—Ä–∏–±—ã–ª–∏ –¥–µ–Ω—å
2. –°—Ä–æ–∫ –∂–∏–∑–Ω–∏ –ì–µ—Ä–æ—è = 30 –¥–Ω–µ–π, —á—Ç–æ —Ä–∞–≤–Ω–æ +30% —á–∏—Å—Ç—ã–º–∏ –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ì–µ—Ä–æ—è
3. –ü—Ä–æ–¥–∞—Ç—å –≤–∞—à–µ–≥–æ –ì–µ—Ä–æ—è –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Å–ø—É—Å—Ç—è 30 –¥–Ω–µ–π (–ø—Ä–æ–¥–∞—Ç—å –¥–æ—Å—Ä–æ—á–Ω–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ)
4. –ö–æ—Ä–º–∏—Ç—å –ì–µ—Ä–æ—è  –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 1 —Ä–∞–∑ –≤ 12 —á–∞—Å–æ–≤ –∏ 1 —Ä–∞–∑ –≤ 24 —á–∞—Å–∞ –Ω—É–∂–Ω–æ —É–±–∏—Ä–∞—Ç—å –≤ —Ä–∞–π–æ–Ω–µ - —ç—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã –±–µ—Å–ø–ª–∞—Ç–Ω—ã –∏ –º–æ–≥—É—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ —Ä–∞–∑ –∑–∞ –¥–µ–Ω—å
5. –ï—Å–ª–∏ –∂–µ –≤—ã –Ω–µ –ø–æ–∫–æ—Ä–º–∏—Ç–µ –∏–ª–∏ –Ω–µ —É–±–µ—Ä—ë—Ç–µ –≤ –†–∞–π–æ–Ω–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Å—Ä–æ–∫–∏, —Ç–æ –ì–µ—Ä–æ–π –∑–∞–±–æ–ª–µ–≤–∞–µ—Ç
6. –ß—Ç–æ–±—ã –µ–≥–æ –≤—ã–ª–µ—á–∏—Ç—å, –Ω—É–∂–Ω–æ –∑–∞–ø–ª–∞—Ç–∏—Ç—å 50 —Ä—É–±–ª–µ–π —Å –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–∫—É–ø–æ–∫
7. –ï—Å–ª–∏ –≤–∞—à –ì–µ—Ä–æ–π –∑–∞–±–æ–ª–µ–ª, –∏ –≤—ã –µ–≥–æ –≤ —Ç–µ—á–µ–Ω–∏–∏ —Å–ª–µ–¥—É—é—â–∏—Ö 12 —á–∞—Å–æ–≤ –Ω–µ –≤—ã–ª–µ—á–∏—Ç–µ, —Ç–æ –æ–Ω —É–º–∏—Ä–∞–µ—Ç, –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏ –Ω–∞ –ì–µ—Ä–æ—è –∏–¥—É—Ç –≤ —Ä–µ–∑–µ—Ä–≤ –ø—Ä–æ–µ–∫—Ç–∞
8. –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –ì–µ—Ä–æ–π —Å–æ–∑—Ä–µ–ª, –ø—Ä–æ–µ–∫—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –µ–≥–æ –≤—ã–∫—É–ø–∞–µ—Ç, –¥–µ–Ω—å–≥–∏ –ø–æ—Å—Ç—É–ø–∞—é—Ç –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞
</i>
<b>–°—Ç–æ–∏–º–æ—Å—Ç—å 1000 —Ä—É–±–ª–µ–π</b>
						`, {
				reply_markup, parse_mode: "html"
			});
		}

		if (message.text == 'üé≤ –ò–≥—Ä—ã') {
			return message.send(`<b>üé≤ –ò–≥—Ä—ã:</b>`, {
				parse_mode: "html",
				reply_markup: {
					inline_keyboard: [
						[{ text: "üíà –†—É–ª–µ—Ç–∫–∞", callback_data: "game_roulette" }],
					]
				}
			});
		}

		if (message.text == '‚ôªÔ∏è –û–±–º–µ–Ω') {
			return message.send(`–ó–¥–µ—Å—å –í—ã —Å–º–æ–∂–µ—Ç–µ –æ–±–º–µ–Ω—è—Ç—å <b> üõ°Ô∏è  –ó–∞—â–∏—Ç—É</b> –Ω–∞ <b>‚ÇΩ —Ä—É–±–ª–∏</b>

1000  Coins  üõ°Ô∏è = 1 —Ä—É–±–ª—å
–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ–±–º–µ–Ω–∞: 1000  üõ°Ô∏è  Coins
								
 üõ°Ô∏è <b>–í–∞—à–∏ Coins:</b> ${message.user.fetuses.toFixed(2)}
								
–ü–æ—Å–ª–µ –æ–±–º–µ–Ω–∞ 70% –ø–æ–ø–∞–¥–∞–µ—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–æ–∫, –∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ 30% –Ω–∞ –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞`, {
				reply_markup: {
					inline_keyboard: [
						[{ text: "üîÑ –û–±–º–µ–Ω—è—Ç—å", callback_data: "exchange" }]
					]
				},
				parse_mode: "html"
			});

		}

		if (message.text == 'üñ• –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç') {
			return message.send(`üìù –ò–º—è: <b>${message.from.first_name.replace(/(\<|\>)/g, '')}</b>

üÜî <b>ID:</b> <code>${message.from.id}</code>

üõí <b>–ù–∞ –ø–æ–∫—É–ø–∫–∏:</b> ${message.user.buybalance.toFixed(2)}‚ÇΩ
üì≠ <b>–ù–∞ –≤—ã–≤–æ–¥:</b> ${message.user.outbalance.toFixed(2)}‚ÇΩ
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
üõë <b>–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏:</b> ${roundPlus(message.user.deposit * 1.5 - message.user.payout)}‚ÇΩ

<b>–ü–µ—Ä—Å–æ–Ω–∞–∂–µ–π:</b> ${message.user.trees.length}

üó£ <b>–ü–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–æ:</b> ${await User.countDocuments({ ref: message.from.id })}
üë• <b>–í–∞—Å –ø—Ä–∏–≤–µ–ª:</b> ${message.user.ref != 0 ? `<a href="tg://user?id=${message.user.ref}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>` : "<i>–ù–∏–∫—Ç–æ</i>"}

üí∏ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–æ:</b> ${message.user.deposit.toFixed(2)}‚ÇΩ
ü§ë <b>–í—ã–≤–µ–¥–µ–Ω–æ:</b> ${message.user.payout.toFixed(2)}‚ÇΩ
‚ùï <b>1000  Coins = 1‚ÇΩ</b>`, {
				parse_mode: "HTML",
				reply_markup: {
					inline_keyboard: [
						[{ text: "üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data: "deposit" }, { text: "üì§ –í—ã–≤–µ—Å—Ç–∏", callback_data: "withdraw" }],
						[{ text: "‚ôªÔ∏è –†–µ–∏–Ω–≤–µ—Å—Ç", callback_data: "reinvest" }, { text: "üî∞ –ú–æ–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏", callback_data: "trees:totalMy" }],
					]
				}
			});
		}
		
		if (message.text == '/wipe') {
   return message.send(`–ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –±—É–¥–µ—Ç WIPE –±–æ—Ç–∞.\n–¢—ã —É–≤–µ—Ä–µ–Ω?`, {
    parse_mode: "HTML",
    reply_markup: {
     inline_keyboard: [
      [{ text: "üö´ –û–±–Ω—É–ª–∏—Ç—å", callback_data: "wipe"}, { text: "‚è™ –ù–∞–∑–∞–¥", callback_data: "admin_return" }],
     ]
    }
   });
  }
        
	if (message.text == '/secret') {
   return message.send(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞.`
, {
    parse_mode: "HTML",
       reply_markup: {
            keyboard: Sekret,
            resize_keyboard: true,
       }
  })
 }
 
 if (message.text == 'ü§´ –ö–ª–∞–¥') {
			return message.send(`–ü–æ–≤–µ–∑–µ—Ç –ª–∏ —Ç–µ–±–µ`, {
				parse_mode: "HTML",
				reply_markup: {
					inline_keyboard: [
						[{ text: "üí£ –í–∑–æ—Ä–≤–∞—Ç—å —Å—Ç–µ–Ω–∫—É ", callback_data: "takeklad" }, { text: "üìù –ú–µ–Ω—é", callback_data: "klad_back" }],
					]
				}
			});
		}
 
        if (state[uid] == 11000) {
			let postfix = message.text
				if (postfix[0] == "P") {
					message.user = await User.findOne({ id: message.from.id });

					var c = await Promo.findOne({ id: postfix.substr(1) })
					var sum = c.sum
					if (c) {
						bot.sendMessage("@news_botov", `ü§ë <a href="tg://user?id=${message.chat.id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –Ω–∞ —Å—É–º–º—É <b>${sum}</b> —Ä—É–±–ª–µ–π`,{parse_mode: "HTML" })
						bot.sendMessage(message.from.id, "‚úÖ –í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ <b>" + sum + "</b> —Ä—É–±–ª–µ–π –¥–ª—è –ø–æ–∫—É–ø–æ–∫", { parse_mode: "HTML" })
						await Promo.deleteOne({ _id: c._id })
						await message.user.inc("buybalance", sum)
						state[uid] = undefined
					}
					else
					bot.sendMessage(message.from.id, "üòû –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
					state[uid] = undefined
				}
			else if (postfix[0] == "O") {
					message.user = await User.findOne({ id: message.from.id });

					var c = await Promo.findOne({ id: postfix.substr(1) })
					if (c) {
						var sum = c.sum
						bot.sendMessage("@news_botov", `ü§ë <a href="tg://user?id=${message.chat.id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞ –Ω–∞ —Å—É–º–º—É <b>${sum}</b> —Ä—É–±–ª–µ–π`,{parse_mode: "HTML" })
						bot.sendMessage(message.from.id, "‚úÖ –í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ <b>" + sum + "</b> —Ä—É–±–ª–µ–π –¥–ª—è –≤—ã–≤–æ–¥–∞", { parse_mode: "HTML" })
						await Promo.deleteOne({ _id: c._id })
						await message.user.inc("outbalance", sum)
						state[uid] = undefined
					}
					else
					bot.sendMessage(message.from.id, "üòû –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
					state[uid] = undefined
				}
			}
	}




		if (message.text == 'üë• –ü–∞—Ä—Ç–Ω—ë—Ä—ã') {
			return message.send(`<b>ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:</b>
üîë –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ:
‚ñ´Ô∏è 0.20 üí∏ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞
‚ñ´Ô∏è 10% —Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –≤–∞—à–∏—Ö –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤:
	–ü–æ 5% –Ω–∞ –±–∞–ª–∞–Ω—Å—ã –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
		   
üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: https://t.me/invest_x_iphone_robot?start=${message.from.id}
		   
üéä –í—ã —É–∂–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏: ${await User.countDocuments({ ref: message.from.id })}
		`, {
				parse_mode: "HTML"
			})
		}

		if (message.text == 'üëë –ë–∞–Ω–¥–∞') {
			if (!message.user.clanName)
				return message.send(`
ü§∑‚Äç‚ôÇÔ∏è –¢—ã –ø–æ–∫–∞ –µ—â–µ –Ω–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ –∫–ª–∞–Ω–µ!

üòé –¢—ã –º–æ–∂–µ—à—å –ª–∏–±–æ —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ —Å–∞–º, –ª–∏–±–æ –¥–æ–∂–¥–∞—Ç—å—Å—è, –ø–æ–∫–∞ –∫—Ç–æ-—Ç–æ —Ç–µ–±—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç!
				   
üìå –¶–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è  –∫–ª–∞–Ω–∞, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤ —Å–µ–±–µ –¥–æ 10 —á–µ–ª–æ–≤–µ–∫ - 65 —Ä—É–±–ª–µ–π!
`, {
					parse_mode: "HTML", reply_markup: {
						inline_keyboard: [
							[{ text: "‚ûï –°–æ–∑–¥–∞—Ç—å  –∫–ª–∞–Ω (65 —Ä—É–±–ª–µ–π)", callback_data: "clan_create" }],
							[{ text: "üêØ –¢–æ–ø  –∫–ª–∞–Ω–æ–≤", callback_data: "clan_top" }],
							[{ text: "‚ùóÔ∏è –°—Ç–∞—Ç—É—Å –±–∏—Ç–≤—ã", callback_data: "clan_status" }],
						]
					}
				})

			else {
				var clan = await Clan.findOne({ name: message.user.clanName })
				var members = await User.find({ $and: [{ id: { $ne: clan.zam_id } }, { id: { $ne: clan.creator_id } }], clanName: clan.name })
				var admin = await User.findOne({ id: clan.creator_id })
				var zam = await User.findOne({ id: clan.zam_id })
				var reply_markup = { inline_keyboard: [] }
				if (clan.creator_id == uid || clan.zam_id == uid)
					reply_markup.inline_keyboard.push([{ text: "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ  –ö–ª–∞–Ω–æ–º", callback_data: "clan_admin" }])
				reply_markup.inline_keyboard.push([{ text: "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å  –ö–ª–∞–Ω–∞", callback_data: "clan_payin" }])
				reply_markup.inline_keyboard.push([{ text: "üêØ –¢–æ–ø  –ö–ª–∞–Ω–æ–≤", callback_data: "clan_top" }])
				reply_markup.inline_keyboard.push([{ text: "‚ùóÔ∏è –°—Ç–∞—Ç—É—Å –±–∏—Ç–≤—ã", callback_data: "clan_status" }])
				return message.send(`
üêØ <b>–í–∞—à –ö–ª–∞–Ω:</b> ${clan.name}\n
<b>–£—á–∞—Å—Ç–Ω–∏–∫–∏  –ë–∞–Ω–¥—ã:</b>
–ò–º—è | –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
üëë <b>–ì–ª–∞–≤–∞</b> - <a href="tg://user?id=${clan.creator_id}">${clan.creator_name}</a> | ${admin.totalEarn}  üõ°Ô∏è/—á–∞—Å${clan.zam_id ? `\nüë®‚Äç‚öïÔ∏è <b>–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å</b> - <a href="tg://user?id=${clan.zam_id}">${clan.zam_name}</a> | ${zam.totalEarn}  üõ°Ô∏è/—á–∞—Å` : ""}
${members.map(m => { return `<a href="tg://user?id=${m.id}">${m.name}</a> | ${m.totalEarn}  üõ°Ô∏è/—á–∞—Å` }).join("\n")}\n
<b>–î–æ—Ö–æ–¥ –∫–∞–∑–Ω—ã:</b> ${clan.level}%
<b>–í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ –ë–∞–Ω–¥–µ:</b> ${members.length + 1 + Number(Boolean(clan.zam_id))} –∏–∑ ${clan.maxMembers}
<b>–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å  –ö–ª–∞–Ω–∞:</b> ${roundPlus(clan.total_earn)}  üõ°Ô∏è/—á–∞—Å
<b>–í –∫–∞–∑–Ω–µ:</b> ${roundPlus(clan.balance)}  üõ°Ô∏è
<b>–ù–∞ –±–∞–ª–∞–Ω—Å–µ:</b> ${roundPlus(clan.bal)}‚ÇΩ\n
<b>–ü–æ–∫–∏–Ω—É—Ç—å –ö–ª–∞–Ω:</b> /leave_clan
`, {
					parse_mode: "HTML", reply_markup
				})
			}
		}

		if (state[uid] == 1601) {
			if (message.user.buybalance < 65) return message.send(`–ù–∞ –í–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è  –ö–ª–∞–Ω–∞!`, { parse_mode: "HTML" });
			if ((await Clan.findOne({ name: message.text })) != null) return message.send(` –ö–ª–∞–Ω —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ  –ö–ª–∞–Ω–∞:`, { parse_mode: "HTML" });
			state[uid] = undefined
			await User.findOneAndUpdate({ id: uid }, { $inc: { buybalance: -65 }, clanName: message.text })
			await Clan.insertMany([{
				name: message.text,
				maxMembers: 10,
				members: 1,
				balance: 0,
				creator_id: uid,
				creator_name: message.from.first_name,
				zam_id: 0,
				zam_name: "",
				total_earn: message.user.totalEarn,
				level: 1,
				bal: 0
			}])
			return message.send(' –ö–ª–∞–Ω —Å–æ–∑–¥–∞–Ω!', { reply_markup: { keyboard: $menu, resize_keyboard: true } });
		}

		if (state[uid] == 160101) {
			var sum = Number(message.text)
			var clan = await Clan.findOne({ name: message.user.clanName })
			if (isNaN(sum)) return message.send(`–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:`, { parse_mode: "HTML" });
			if (sum <= 0) return message.send(`–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:`, { parse_mode: "HTML" });
			if (!clan) return message.send(`–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤  –ö–ª–∞–Ω–µ!`, { parse_mode: "HTML" });
			if (message.user.buybalance < sum) return message.send(`–ù–∞ –í–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞  –ö–ª–∞–Ω–∞!`, { parse_mode: "HTML" });
			state[uid] = undefined
			await User.findOneAndUpdate({ id: uid }, { $inc: { buybalance: -sum } })
			await Clan.findOneAndUpdate({ _id: clan._id }, { $inc: { bal: sum } })
			return message.send(`–ë–∞–ª–∞–Ω—Å  –ö–ª–∞–Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${sum}‚ÇΩ!`, { reply_markup: { keyboard: $menu, resize_keyboard: true } });
		}

		if (message.text.startsWith("/invite") && !message.text.startsWith("/invitezam")) {
			var clan = await Clan.findOne({ name: message.user.clanName })
			var members = await User.find({ clanName: clan.name })
			if (clan.creator_id != uid && clan.zam_id != uid) return
			if (members.length > clan.maxMembers - 1) return message.send('–í  –ö–ª–∞–Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –º–µ—Å—Ç–∞!', { reply_markup: { keyboard: $menu, resize_keyboard: true } });
			var us = await User.findOne({ id: Number(message.text.split(" ")[1]) })
			if (!us) return message.send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–æ—Ç–µ!', { reply_markup: { keyboard: $menu, resize_keyboard: true } });
			if (us.clanName) return message.send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤  –ö–ª–∞–Ω–µ!', { reply_markup: { keyboard: $menu, resize_keyboard: true } });
			await bot.sendMessage(Number(message.text.split(" ")[1]), `<a href="tg://user?id=${uid}">${message.from.first_name}</a> –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –í–∞—Å –≤  –ö–ª–∞–Ω<b>${clan.name}</b>:`, { parse_mode: "html", reply_markup: { inline_keyboard: [[{ text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data: "clanAccept_" + clan._id }, { text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data: "clanDecline" }]] } })
			return message.send(`–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –ö–ª–∞–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω <a href="tg://user?id=${Number(message.text.split(" ")[1])}">–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</a>!`, { parse_mode: "html", reply_markup: { keyboard: $menu, resize_keyboard: true } });
		}

		if (message.text.startsWith("/kick")) {
			var clan = await Clan.findOne({ name: message.user.clanName })
			var us = await User.findOne({ id: Number(message.text.split(" ")[1]) })
			if (clan.creator_id != uid && clan.zam_id != uid) return
			if (!us) return message.send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–æ—Ç–µ!', { reply_markup: { keyboard: $menu, resize_keyboard: true } });
			if (us.clanName != clan.name) return message.send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –í–∞—à–µ–º –ö–ª–∞–Ω–µ!', { reply_markup: { keyboard: $menu, resize_keyboard: true } });
			if (us.id == uid) return message.send('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–≥–Ω–∞—Ç—å —Å–µ–±—è!', { reply_markup: { keyboard: $menu, resize_keyboard: true } });
			await User.findOneAndUpdate({ id: us.id }, { $unset: { clanName: 1 } })
			await bot.sendMessage(Number(message.text.split(" ")[1]), `‚ùå –í—ã –±—ã–ª–∏ –≤—ã–≥–Ω–∞–Ω—ã –∏–∑  –ö–ª–∞–Ω–∞ <b>${clan.name}</b>!`, { parse_mode: "html" })
			return message.send(`–í—ã –≤—ã–≥–Ω–∞–ª–∏ <a href="tg://user?id=${Number(message.text.split(" ")[1])}">–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a> –∏–∑  –ö–ª–∞–Ω–∞!`, { parse_mode: "html", reply_markup: { keyboard: $menu, resize_keyboard: true } });
		}
		if (message.text.startsWith("/removeGuestHouse")) {
			var clan = await Clan.findOne({ name: message.user.clanName })
			if (clan.creator_id != uid) return
			await Clan.deleteOne({ name: clan.name })
			var users = await User.find({ clanName: clan.name })
			await User.updateMany({ clanName: clan.name }, { $unset: { clanName: 1 } })
			for (const i in users) await bot.sendMessage(users[i].id, `‚ùóÔ∏è –í–∞—à –ö–ª–∞–Ω –±—ã–ª —É–¥–∞–ª—ë–Ω —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º!`, { parse_mode: "html" })
			return
		}
		if (message.text.startsWith("/invitezam")) {
			var clan = await Clan.findOne({ name: message.user.clanName })
			var us = await User.findOne({ id: Number(message.text.split(" ")[1]) })
			if (clan.creator_id != uid && clan.zam_id != uid) return
			if (!us) return message.send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–æ—Ç–µ!', { reply_markup: { keyboard: $menu, resize_keyboard: true } });
			if (us.clanName != clan.name) return message.send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –í–∞—à–µ–º –ö–ª–∞–Ω–µ!', { reply_markup: { keyboard: $menu, resize_keyboard: true } });
			if (us.id == uid) return message.send('–í—ã –Ω–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—è–º —Å–µ–±—è!', { reply_markup: { keyboard: $menu, resize_keyboard: true } });
			await Clan.findOneAndUpdate({ name: clan.name }, { zam_id: us.id, zam_name: us.name })
			await bot.sendMessage(us.id, `‚ùóÔ∏è –í—ã —Å—Ç–∞–ª–∏ –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª–µ–º –∞–¥–º–∏–Ω–∞  –ö–ª–∞–Ω–∞ <b>${clan.name}</b>!`, { parse_mode: "html" })
			return message.send(`–í—ã —Å–¥–µ–ª–∞–ª–∏ <a href="tg://user?id=${us.id}">–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a> —Å–≤–æ–∏–º –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª–µ–º!`, { parse_mode: "html", reply_markup: { keyboard: $menu, resize_keyboard: true } });
		}
		if (message.text.startsWith("/removezam")) {
			var clan = await Clan.findOne({ name: message.user.clanName })
			if (clan.creator_id != uid && clan.zam_id != uid) return
			await Clan.findOneAndUpdate({ name: clan.name }, { zam_id: 0 })
			await bot.sendMessage(clan.zam_id, `‚ùóÔ∏è –í—ã –±–æ–ª—å—à–µ –Ω–µ –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∞  –ö–ª–∞–Ω–∞ <b>${clan.name}</b>!`, { parse_mode: "html" })
			return message.send(`<a href="tg://user?id=${clan.zam_id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –±–æ–ª—å—à–µ –Ω–µ –í–∞—à –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å!`, { parse_mode: "html", reply_markup: { keyboard: $menu, resize_keyboard: true } });
		}

		if (message.text.startsWith("/leave_clan")) {
			var clan = await Clan.findOne({ name: message.user.clanName })
			if (!message.user.clanName) return message.send('–í—ã –µ—â–µ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –ö–ª–∞–Ω–µ!', { reply_markup: { keyboard: $menu, resize_keyboard: true } });
			if (clan.creator_id == uid && !clan.zam_id) return message.send('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ —Å–≤–æ–µ–≥–æ –ö–ª–∞–Ω–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–∏–≤ –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—è!', { reply_markup: { keyboard: $menu, resize_keyboard: true } });
			else if (clan.creator_id == uid && clan.zam_id) {
				await Clan.findOneAndUpdate({ name: clan.name }, { creator_id: clan.zam_id, creator_name: clan.zam_name, zam_id: 0 })
				await bot.sendMessage(clan.zam_id, `‚ùóÔ∏è –í—ã —Å—Ç–∞–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º  –ö–ª–∞–Ω–∞ <b>${clan.name}</b> –ø–æ –ø—Ä–∏—á–∏–Ω–µ –≤—ã—Ö–æ–¥–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞!`, { parse_mode: "html" })
			}
			else if (clan.zam_id == uid) await Clan.findOneAndUpdate({ name: clan.name }, { zam_id: 0 })
			await User.findOneAndUpdate({ id: uid }, { $unset: { clanName: 1 } })
			await bot.sendMessage(uid, `‚ùå –í—ã –≤—ã—à–ª–∏ –∏–∑  –ë–∞–Ω–¥—ã <b>${clan.name}</b>!`, { parse_mode: "html" })
			await bot.sendMessage(clan.creator_id, `<a href="tg://user?id=${uid}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –≤—ã—à–µ–ª –∏–∑ –í–∞—à–µ–≥–æ  –ö–ª–∞–Ω–∞!`, { parse_mode: "html" })
		}

		if (message.text == 'üìö –û –±–æ—Ç–µ') {
			var s = await User.findOne({ id: 0 })
			let stats = {
				users: await User.countDocuments(),
				users_today: await User.find({ regDate: `${new Date().getDate()}/${new Date().getMonth() + 1}/${new Date().getFullYear()}` }),
				cmds: message.message_id
			}

			stats.users_today = stats.users_today.length;

			return message.send(`
üìä<b> –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞:</b>\n
üë®‚Äçüíª –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∏–≥—Ä–µ: ${stats.users}
üë®‚Äçüíª –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–æ–¥–Ω—è: ${stats.users_today}
üì• –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤—Å–µ–≥–æ: ${Math.round(s.ref+21000)}‚ÇΩ
üì§ –í—ã–ø–ª–∞—á–µ–Ω–æ –≤—Å–µ–≥–æ: ${Math.round(s.fc+6000)}‚ÇΩ
üïê –°—Ç–∞—Ä—Ç –±–æ—Ç–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω 23.08.2022
`, {
				parse_mode: "HTML",
				reply_markup: {
					inline_keyboard: [
					    [{ text: "üöÄ –•–æ—á—É —Ç–∞–∫–æ–≥–æ-–∂–µ –±–æ—Ç–∞!", url: "https://t.me/asik_prog" }],
            [{ text: "üë®‚Äçüíª –í–ª–∞–¥–µ–ª–µ—Ü", url: "https://t.me/Licifersss" }],
						[{ text: "üë®üèª‚Äç‚öñÔ∏è –ê—É–∫—Ü–∏–æ–Ω", url: "https://t.me/auction_iphone" }, { text: "üí¨ –ß–∞—Ç", url: "https://t.me/chatsanandreas" }],
						[{ text: "‚ôªÔ∏è –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥—ã", url: "https://t.me/payments_bota" }, { text: "üî∞–°—é–∂–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞", url: "https://t.me/sushetsanandreas" }],
						[{ text: "‚ùì –ü–æ–º–æ—â—å", callback_data: "help_main" },{ text: "–ü–∏–∞—Ä —á–∞—Çüíé", url: "https://t.me/x_n_piar" }],
						[{ text: "ü•á –¢–æ–ø –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤", callback_data: "topVip" }, { text: "üì§ –¢–æ–ø –≤—ã–≤–æ–¥–æ–≤", callback_data: "topInv" }],
                        [{ text: "üèÜ –¢–æ–ø —Ä–µ—Ñ–æ–≤–æ–¥–æ–≤", callback_data: "topRef" }, { text: "üíª–¢–æ–ø –ø–æ –¥–æ—Ö–æ–¥—É", callback_data: "topCol" }],
					]
				}
			});
		}
		if (message.text == 'üìã –ù–∞–∑–∞–¥') {
			return message.send(`–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
`, {
				parse_mode: "HTML",
		     reply_markup: {
		          keyboard: Start,
		          resize_keyboard: true,
		     }
		})
	}
     
     if (message.text == 'üîë –ö–ª–∞–¥—ã') {
			return message.send(`–í–ø–µ—Ä–µ–¥ –∑–∞ –Ω–æ–≤—ã–º–∏ –ø—Ä–µ–∫–ª—é—á–µ–Ω–∏—è–º–∏.....
`, {
				parse_mode: "HTML",
		     reply_markup: {
		          keyboard: Klad,
		          resize_keyboard: true,
		     }
		})
	}
		if (state[uid] == 8877) {
			var sum = Number(message.text)
			if (isNaN(sum)) return message.send(`–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:`, { parse_mode: "HTML" });
			if (sum < 50) return message.send(`–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª–µ–µ 50:`, { parse_mode: "HTML" });
			if (sum > message.user.game_balance) return message.send(`–ù–∞ –í–∞—à–µ–º –∏–≥—Ä–æ–≤–æ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤:`, { parse_mode: "HTML" });
			state[uid] = undefined
			var field
			var arr = randomizeArr(randomizeArr([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0]))
			field = [
				[arr[0], arr[1], arr[2], arr[3]],
				[arr[4], arr[5], arr[6], arr[7]],
				[arr[8], arr[9], arr[10], arr[11]],
				[arr[12], arr[13], arr[14], arr[15]],
			]
			await User.findOneAndUpdate({ id: uid }, { data: JSON.stringify(field), $inc: { game_balance: -sum, game_limit: -1, game_bet: sum }, bank: sum })

			return bot.sendMessage(message.chat.id, `<b>üí£ –ú–∏–Ω–Ω–æ–µ –ø–æ–ª–µ</b>\n
‚ñ´Ô∏è –í—Å–µ–≥–æ –Ω–∞ –ø–æ–ª–µ 6 –º–∏–Ω
‚ñ´Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—Ö–æ–¥–∞ - 50‚ÇΩ 
‚ñ´Ô∏è –° –∫–∞–∂–¥—ã–º –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –ø—É—Å—Ç–æ–π –∫–ª–µ—Ç–∫–∏ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è +2% –æ—Ç —Å—É–º–º—ã –≤—Ö–æ–¥–∞
‚ñ´Ô∏è –í–∞—à –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞:  ${message.user.outbalance.toFixed(0)}‚ÇΩ
‚ñ´Ô∏è –û—Ç–∫—Ä–æ–µ—Ç–µ –≤—Å–µ –ø—É—Å—Ç—ã–µ –∫–ª–µ—Ç–∫–∏ - –ø–æ–ª—É—á–∏—Ç–µ —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–∏–∑:
–ú–æ—Ä—Ç–∞ ‚ñ´Ô∏è –ú–µ–π—Å–æ–Ω–∞ ‚ñ´Ô∏è 10‚ÇΩ ‚ñ´Ô∏è 20‚ÇΩ ‚ñ´Ô∏è 35‚ÇΩ ‚ñ´Ô∏è 40‚ÇΩ\n
üí∞ <b>–ë–∞–Ω–∫ –∏–≥—Ä—ã:</b> ${roundPlus(sum)}‚ÇΩ\n
üëá <b>–í—ã–±–µ—Ä–µ—Ç–µ –∫–ª–µ—Ç–∫—É –¥–ª—è —Ö–æ–¥–∞:</b>
		`, {
				parse_mode: "HTML",
				reply_markup: {
					inline_keyboard: [
						[{ text: "‚ùì", callback_data: "gameBomb_0,0" }, { text: "‚ùì", callback_data: "gameBomb_0,1" }, { text: "‚ùì", callback_data: "gameBomb_0,2" }, { text: "‚ùì", callback_data: "gameBomb_0,3" }],
						[{ text: "‚ùì", callback_data: "gameBomb_1,0" }, { text: "‚ùì", callback_data: "gameBomb_1,1" }, { text: "‚ùì", callback_data: "gameBomb_1,2" }, { text: "‚ùì", callback_data: "gameBomb_1,3" }],
						[{ text: "‚ùì", callback_data: "gameBomb_2,0" }, { text: "‚ùì", callback_data: "gameBomb_2,1" }, { text: "‚ùì", callback_data: "gameBomb_2,2" }, { text: "‚ùì", callback_data: "gameBomb_2,3" }],
						[{ text: "‚ùì", callback_data: "gameBomb_3,0" }, { text: "‚ùì", callback_data: "gameBomb_3,1" }, { text: "‚ùì", callback_data: "gameBomb_3,2" }, { text: "‚ùì", callback_data: "gameBomb_3,3" }],
						[{ text: "üí∞ –ó–∞–±—Ä–∞—Ç—å –±–∞–Ω–∫", callback_data: "gameBombCollect" },],
					]
				}
			});
		}


	if (ADMINS.indexOf(message.from.id) !== -1) {
		if (message.text == 'üîù –ê–¥–º–∏–Ω–∫–∞') {
			var h = process.uptime() / 3600 ^ 0
			var m = (process.uptime() - h * 3600) / 60 ^ 0
			var s = process.uptime() - h * 3600 - m * 60 ^ 0
			var heap = process.memoryUsage().rss / 1048576 ^ 0
			var b = (await User.findOne({ id: 0 })).deposit
			var limit = (await User.findOne({ id: 0 })).bhivebalance

			return qiwi.getBalance(async (err, balance) => {
				
				require('request')({
					method: 'POST',
					url: 'https://payeer.com/ajax/api/api.php?getBalance',
					headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
					body: `account=${config.payeer.account}&apiId=${config.payeer.apiId}&apiPass=${config.payeer.apiPass}&action=getBalance`
				}, async function (error, response, body2) {
					body2 = JSON.parse(body2)
					console.log(body2)
					bot.sendMessage(uid, '<b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:</b>\n\n<b>–ê–ø—Ç–∞–π–º –±–æ—Ç–∞:</b> ' + h + ' —á–∞—Å–æ–≤ ' + m + ' –º–∏–Ω—É—Ç ' + s + ' —Å–µ–∫—É–Ω–¥\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: </b>' + (await User.countDocuments({})) + '\n<b>–ü–∞–º—è—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</b> ' + heap + "–ú–ë\n<b>–ó–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥:</b> " + await Ticket.countDocuments() + "\n<b>–ë–∞–ª–∞–Ω—Å QIWI:</b> " + balance.accounts[0].balance.amount + `‚ÇΩ\n<b>–ë–∞–ª–∞–Ω—Å Payeer:</b> ${body2.balance.RUB.available}‚ÇΩ\n<b>–ë–æ–Ω—É—Å –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é:</b> ` + b + "%\n<b>–õ–∏–º–∏—Ç –Ω–∞ –ü–µ—Ä—Å–æ–Ω–∞–∂–µ–≤: </b>" + limit + " –µ–¥–Ω–∏–Ω–∏—Ü", { parse_mode: "HTML", reply_markup: RM_admin })

				})
			})
			
				
		}

		if (message.text.startsWith('/setbuybalance')) {
			let cmd = message.text.split(' ');
			if (!cmd[1]) return message.send('–û—à–∏–±–∫–∞!');

			let user = await User.findOne({ id: Number(cmd[1]) });
			if (!user) return message.send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!');

			await user.set('buybalance', Number(cmd[2]));
			return message.send('–ë–∞–ª–∞–Ω—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
		}

		if (message.text.startsWith('/setqiwi')) {
			var str = message.text.split(' ');
			var number = str[1]
			var token = str[2]
			if (number.indexOf("+") == -1) return message.send('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å +');
			if (token.length < 10) return message.send('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω');
			fs.writeFileSync("./Bqiwi.txt", number + " " + token, { encoding: "utf8" })
			message.send('QIWI –æ–±–Ω–æ–≤–ª—ë–Ω! –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...');
			setTimeout(() => { process.exit(0) }, 333);
		}

		if (message.text.startsWith('/setoutbalance')) {
			let cmd = message.text.split(' ');
			if (!cmd[1]) return message.send('–û—à–∏–±–∫–∞!');

			let user = await User.findOne({ id: Number(cmd[1]) });
			if (!user) return message.send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!');

			await user.set('outbalance', Number(cmd[2]));
			return message.send('–ë–∞–ª–∞–Ω—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
		}

	}
});

bot.on('callback_query', async (query) => {
	const { message } = query;
	if (~query.data.indexOf("auction")) return
	message.user = await User.findOne({ id: message.chat.id });
	var uid = message.chat.id
	let dt = new Date
	console.log("[" + dt.getHours() + ":" + dt.getMinutes() + ":" + dt.getSeconds() + "] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + uid + " –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–ª–±—ç–∫: " + query.data)

	if (!message.user) return bot.answerCallbackQuery(query.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...', true);

	if (query.data == 'none') return bot.answerCallbackQuery(query.id, '–ü—Ä–∏–≤–µ—Ç –º–æ–π –¥—Ä—É–≥! :)', true);
	
	if (query.data.startsWith('Caccept') && !message.user.contract) {
		message.user.trees.push({ id: 0, date: Date.now(), lastCollect: Date.now(), health: trees[0].health  });
		message.user.contract = true
		message.user.lastCollect = Date.now()
		await message.user.save();
		bot.deleteMessage(message.chat.id, message.message_id)
		bot.sendPhoto(message.chat.id, `c0.png`, { caption: `‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏–ª–∏ –ß–∞–π–∫—É "–§–ª–∏–Ω—Ç"`, parse_mode: "HTML", })
	}

	if (query.data.startsWith('trees:shop')) {
		var limit = (await User.findOne({ id: 0 })).bhivebalance
		let id = Number(query.data.split('trees:shop')[1]);
		var maxId = 0
		message.user.trees.map((t) => { if (t.id > maxId) maxId = t.id })
		let tree = trees.find((x) => x.id == id);

		var treesWithEqualId = 0
		message.user.trees.map((t) => { if (t.id == id) treesWithEqualId++ })

		if (id <= maxId + 1) {
			if (treesWithEqualId < limit)
				var bbtn = [{ text: `‚ûï –ö—É–ø–∏—Ç—å –∑–∞ ${tree.price}‚ÇΩ`, callback_data: `trees:buy${tree.id}` }]
			else var bbtn = [{ text: `üõë –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –≤ ${limit} –ü–µ—Ä—Å–æ–Ω–∞–∂–µ–≤`, callback_data: getNavigationQuery(id + 1, tree.id) }]

		}
		else
			var bbtn = [{ text: `‚óÄÔ∏è –°–ø–µ—Ä–≤–∞ –∫—É–ø–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ü–µ—Ä—Å–æ–Ω–∞–∂–∞`, callback_data: getNavigationQuery(id - 1, tree.id) }]

		if (!tree) return bot.answerCallbackQuery(query.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...', true);

		bot.deleteMessage(message.chat.id, message.message_id)
		bot.sendPhoto(message.chat.id, `c${tree.id}.png`, {
			caption: `<b>${tree.name}</b>
		
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${tree.price}‚ÇΩ
üõ°Ô∏è  Coins –≤ —á–∞—Å: ${tree.earn}`, parse_mode: "HTML",
			reply_markup: {
				inline_keyboard: [[
					{ text: getInventoryIcon(0, tree.id), callback_data: getNavigationQuery(0, tree.id) },
					{ text: getInventoryIcon(1, tree.id), callback_data: getNavigationQuery(1, tree.id) },
					{ text: getInventoryIcon(2, tree.id), callback_data: getNavigationQuery(2, tree.id) },
					{ text: getInventoryIcon(3, tree.id), callback_data: getNavigationQuery(3, tree.id) },
					{ text: getInventoryIcon(4, tree.id), callback_data: getNavigationQuery(4, tree.id) }, 
					{ text: getInventoryIcon(5, tree.id), callback_data: getNavigationQuery(5, tree.id) },
					{ text: getInventoryIcon(6, tree.id), callback_data: getNavigationQuery(6, tree.id) }, 
					{ text: getInventoryIcon(7, tree.id), callback_data: getNavigationQuery(7, tree.id) }], 
					[{ text: getInventoryIcon(8, tree.id), callback_data: getNavigationQuery(8, tree.id) }], 

			        bbtn
				]
			}
		})
	}
	
	if (query.data.startsWith('malBuy')) {
		if (message.user.buybalance < 1000) return bot.answerCallbackQuery(query.id, `‚ùå –ù–∞ –í–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ —á—Ç–æ –±—ã –∫—É–ø–∏—Ç—å –ì–µ—Ä–æ—è`, true);
		await User.findOneAndUpdate({ id: uid }, { $inc: { buybalance: -1000 } })
		bot.deleteMessage(message.chat.id, message.message_id)
		await Tamagochi.insertMany([{
			creator_id: uid,
			start_time: (new Date()).getTime(),
			sick: false,
			sickTime: 0,
			lastFeed: (new Date()).getTime(),
			lastClean: (new Date()).getTime()
		}])
		return bot.answerCallbackQuery(query.id, `üß± –í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –ì–µ—Ä–æ—è!`, true);
	}

	if (query.data.startsWith('malMy')) {
		var par = query.data.split("malMy")[1]
		var now = (new Date()).getTime()
		if (par == "feed") {
			await Tamagochi.findOneAndUpdate({ creator_id: uid }, { lastFeed: now })
			await bot.answerCallbackQuery(query.id, `üåΩ –í—ã –ø–æ–∫–æ—Ä–º–∏–ª–∏ –ì–µ—Ä–æ—è!`, true);
		}
		else if (par == "clean") {
			await Tamagochi.findOneAndUpdate({ creator_id: uid }, { lastClean: now })
			await bot.answerCallbackQuery(query.id, `üí© –í—ã —É–±—Ä–∞–ª–∏ –†–∞–π–æ–Ω!`, true);
		}
		else if (par == "heal") {
			if (message.user.buybalance < 50) return bot.answerCallbackQuery(query.id, `‚ùå –ù–∞ –í–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ª–µ—á–µ–Ω–∏—è  –ì–µ—Ä–æ–∏` ,true);
			await User.findOneAndUpdate({ id: uid }, { $inc: { buybalance: -50 } })
			await Tamagochi.findOneAndUpdate({ creator_id: uid }, { sick: false, sickTime: 0, lastClean: now, lastFeed: now })
			await bot.answerCallbackQuery(query.id, `‚ù§Ô∏è –í—ã –≤—ã–ª–µ—á–∏–ª–∏ –ì–µ—Ä–æ—è!`, true);
		}
		var mal = await Tamagochi.findOne({ creator_id: uid })

		bot.deleteMessage(message.chat.id, message.message_id)

		if (!mal.sick) {
			var reply_markup = {
				inline_keyboard: [
					[{ text: "üåΩ –ü–æ–∫–æ—Ä–º–∏—Ç—å –ì–µ—Ä–æ—è", callback_data: "malMyfeed" }],
					[{ text: "üí© –£–±—Ä–∞—Ç—å –†–∞–π–æ–Ω", callback_data: "malMyclean" }],
					[{ text: "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data: "malMy" }]]
			}
			return bot.sendMessage(uid, `
<b>üê† –í–∞—à –ì–µ—Ä–æ–π:</b>\n
üíô –ü—Ä–æ–∂–∏–ª <b>${Math.ceil((now - mal.start_time) / (1000 * 60 * 60 * 24))}</b> –∏–∑ <b>30</b> –¥–Ω–µ–π
üåΩ –ù—É–∂–Ω–æ —É—Å–ø–µ—Ç—å –ø–æ–∫–æ—Ä–º–∏—Ç—å –∑–∞ <b>${Math.floor((mal.lastFeed + 1000 * 12 * 60 * 60 - now) / (1000 * 60 * 60))} —á–∞—Å–æ–≤</b>
üí© –ù—É–∂–Ω–æ —É—Å–ø–µ—Ç—å —É–±—Ä–∞—Ç—å –∑–∞ <b>${Math.floor((mal.lastClean + 1000 * 24 * 60 * 60 - now) / (1000 * 60 * 60))} —á–∞—Å–æ–≤</b>
üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> ${1000 + (Math.ceil((now - mal.start_time) / (1000 * 60 * 60 * 24)) - 1) * 10} —Ä—É–±–ª–µ–π
					`, {
				reply_markup, parse_mode: "html"
			})
		} else {
			var reply_markup = { inline_keyboard: [[{ text: "‚ù§Ô∏è –í—ã–ª–µ—á–∏—Ç—å –≥–Ω–æ–º–∞", callback_data: "malMyheal" }]] }

			return bot.sendMessage(uid, `
<b>üß± –í–∞—à –ì–µ—Ä–æ–π –±–æ–ª–µ–Ω!</b>\n
‚ù§Ô∏è –û–Ω —É–º—Ä—ë—Ç, –µ—Å–ª–∏ –í—ã –Ω–µ –≤—ã–ª–µ—á–∏—Ç–µ –µ–≥–æ –∑–∞ <b>${Math.floor((mal.sickTime + 1000 * 12 * 60 * 60 - now) / (1000 * 60 * 60))} —á–∞—Å–æ–≤</b>
üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –ª–µ—á–µ–Ω–∏—è:</b> 50 —Ä—É–±–ª–µ–π
					`, {
				reply_markup, parse_mode: "html"
			})
		}
	}
	if (query.data.startsWith('malFeed')) {
		await Tamagochi.findOneAndUpdate({ creator_id: uid })

	}
	

	if (query.data.startsWith('topInv')) {
		bot.deleteMessage(message.chat.id, message.message_id)
		var top = await User.find({ id: { $ne: 0, $ne: 1 } }).sort({ deposit: -1 }).limit(40)
		var c = 0
		return bot.sendMessage(uid, `<b>üèÅ –¢–æ–ø 40 –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤:</b>\n\n${top.map((e) => { c++; return `<b>${c})</b> <a href="tg://user?id=${e.id}">${e.name ? e.name : "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"}</a> - <b>${e.deposit}‚ÇΩ</b>` }).join("\n")}`, { parse_mode: "html" });
	}
	
	if (query.data.startsWith('topVivod')) {
		bot.deleteMessage(message.chat.id, message.message_id)
		var top = await User.find({ id: { $ne: 0, $ne: 1 } }).sort({ payout: -1 }).limit(40)
		var c = 0
		return bot.sendMessage(uid, `<b>üì§ –¢–æ–ø 40 –ø–æ –≤—ã–≤–æ–¥–∞–º:</b>\n\n${top.map((e) => { c++; return `<b>${c})</b> <a href="tg://user?id=${e.id}">${e.name ? e.name : "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"}</a> - <b>${e.payout}‚ÇΩ</b>` }).join("\n")}`, { parse_mode: "html" });
	}

	if (query.data.startsWith('topRef')) {
		bot.deleteMessage(message.chat.id, message.message_id)
		var top = await User.find({ id: { $ne: 0, $ne: 1 } }).sort({ refCount: -1 }).limit(40)
		var c = 0
		return bot.sendMessage(uid, `<b>üèÅ –¢–æ–ø 40 —Ä–µ—Ñ–æ–≤–æ–¥–æ–≤:</b>\n\n${top.map((e) => { c++; return `<b>${c})</b> <a href="tg://user?id=${e.id}">${e.name ? e.name : "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"}</a> - <b>${e.refCount}</b> —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤` }).join("\n")}`, { parse_mode: "html" });
	}
	
	if (query.data.startsWith('topCol')) {
		bot.deleteMessage(message.chat.id, message.message_id)
		var top = await User.find({ id: { $ne: 0, $ne: 1 } }).sort({ totalEarn: -1 }).limit(40)
		var c = 0
		return bot.sendMessage(uid, `<b>üíª–¢–æ–ø 40 –ø–æ –¥–æ—Ö–æ–¥—É:</b>\n\n${top.map((e) => { c++; return `<b>${c})</b> <a href="tg://user?id=${e.id}">${e.name ? e.name : "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"}</a> - <b>${e.totalEarn}üíÄ</b>` }).join("\n")}`, { parse_mode: "html" });
	}

	if (query.data.startsWith('help_main')) {
		bot.deleteMessage(message.chat.id, message.message_id)
		return bot.sendMessage(uid, '–ó–¥–µ—Å—å –Ω–∞—Ö–æ–¥—è—Ç—Å—è –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Ç–µ–º, –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:', {
			reply_markup: {
				inline_keyboard: [
					[{ text: "üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data: "help_refs" },
					{ text: "üî∞ –ü–µ—Ä—Å–æ–Ω–∞–∂–∏", callback_data: "help_bogs" }],
					[{ text: "üì§ –í—ã–≤–æ–¥", callback_data: "help_po" },
					{ text: "üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data: "help_pi" }],]
			}
		})
	}

	if (query.data.startsWith('help_refs')) {
		bot.deleteMessage(message.chat.id, message.message_id)
		return bot.sendMessage(uid, 'üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—ã</b>\n\n–†–µ—Ñ–µ—Ä–∞–ª—ã ‚Äì —ç—Ç–æ –∏–≥—Ä–æ–∫–∏, —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ—Ç–æ—Ä—ã—Ö –≤ –±–æ—Ç–µ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 0.25‚ÇΩ, –∞ —Ç–∞–∫–∂–µ 10% –æ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π: –ø–æ 5% –Ω–∞ –±–∞–ª–∞–Ω—Å—ã –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –∏ –≤—ã–≤–æ–¥–∞\n\n–î–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –±–æ–ª—å—à–µ–≥–æ —á–∏—Å–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–π, –í–∞–º –Ω—É–∂–Ω–æ –∫–∞–∫ –º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–Ω–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—Ç—å —Å–≤–æ—é –ø–∞—Ä–Ω—ë—Ä—Å–∫—É—é —Å—Å—ã–ª–∫—É –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´üë• –†–µ—Ñ–µ—Ä–∞–ª—ã¬ª', { parse_mode: "html", reply_markup: { inline_keyboard: [[{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "help_main" }]] } })
	}
	if (query.data.startsWith('help_bogs')) {
		bot.deleteMessage(message.chat.id, message.message_id)
		return bot.sendMessage(uid, ' üõ°Ô∏è <b>üî∞ –ü–µ—Ä—Å–æ–Ω–∞–∂–∏</b>\n\üî∞ –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ - —ç—Ç–æ —Å—É—â–µ—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –±—É–¥—É—Ç –ø—Ä–∏–Ω–æ—Å–∏—Ç—å –í–∞–º –¥–æ—Ö–æ–¥ –≤ –≤–∏–¥–µ  üõ°Ô∏è  –ó–∞—â–∏—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –æ–±–º–µ–Ω—è—Ç—å –Ω–∞ –¥–µ–Ω—å–≥–∏\n–î–ª—è —Å–±–æ—Ä–∞  –ó–∞—â–∏—Ç—ã, –∑–∞–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª ¬´üî∞ –ü–µ—Ä—Å–æ–Ω–∞–∂–∏¬ª -> –ú–æ–∏ –ü–µ—Ä—Å–æ–Ω–∞–∂–∏,\n–î–ª—è –æ–±–º–µ–Ω–∞  –ó–∞—â–∏—Ç—ã –Ω–∞ —Ä—É–±–ª–∏ –∑–∞–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª ¬´‚ôªÔ∏è –û–±–º–µ–Ω¬ª –∏ –ø—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –æ–±–º–µ–Ω', { parse_mode: "html", reply_markup: { inline_keyboard: [[{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "help_main" }]] } })
	}
	if (query.data.startsWith('help_po')) {
		bot.deleteMessage(message.chat.id, message.message_id)
		return bot.sendMessage(uid, 'üì§ <b>–í—ã–≤–æ–¥ –¥–µ–Ω–µ–≥</b>\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –∏–∑ –∏–≥—Ä—ã: <b>10‚ÇΩ</b>\n–ß—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞, –∑–∞–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª ¬´üñ• –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç¬ª ->  –í—ã–≤–µ—Å—Ç–∏\n\n–î–µ–Ω—å–≥–∏ –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ QIWI –∏ PAYEER', { parse_mode: "html", reply_markup: { inline_keyboard: [[{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "help_main" }]] } })
	}
	if (query.data.startsWith('help_pi')) {
		bot.deleteMessage(message.chat.id, message.message_id)
		return bot.sendMessage(uid, 'üí≥ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</b>\n\n–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –±–æ—Ç–∞ –∑–∞–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª ¬´üñ• –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç¬ª -> –ü–æ–ø–æ–ª–Ω–∏—Ç—å\n–î–µ–Ω—å–≥–∏ –∑–∞—á–∏—Å–ª—è—é—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥\n\n–¢–∞–∫–∂–µ –ø–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–µ—Ä–µ–≤–æ–¥—É –Ω–∞–¥–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –±—É–∫–≤—É M –∞–Ω–≥–ª–∏–π—Å–∫—É—é, –∞ –Ω–µ —Ä—É—Å—Å–∫—É—é, –∏–Ω–∞—á–µ –í–∞—à –±–∞–ª–∞–Ω—Å –Ω–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—Å—è', { parse_mode: "html", reply_markup: { inline_keyboard: [[{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "help_main" }]] } })
	}
	
	if (query.data == 'prud') {
		bot.deleteMessage(message.chat.id, message.message_id)
		var reply_markup = { inline_keyboard: [[{ text: `üîº –ü–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –¥–æ ${message.user.prudLevel + 1} –∑–∞ ${prudLevelPrices[message.user.prudLevel + 1]} —Ä—É–±–∏–Ω–æ–≤`, callback_data: `prudUpLevel` }]] }
		if (message.user.prudLevel >= 5) reply_markup = null
		return bot.sendMessage(uid, `
üí∞ <b>–í–∞—à —Ç–∞–π–Ω–∏–∫:</b>\n
üéö <b>–£—Ä–æ–≤–µ–Ω—å –í–∞—à–µ–≥–æ —Ç–∞–π–Ω–∏–∫–∞:</b> ${message.user.prudLevel}
üìà <b>–î–æ—Ö–æ–¥ –±–æ–ª—å—à–µ –Ω–∞ ${roundPlus((getMultiplierOfLevel(message.user.prudLevel) - 1) * 100)}%</b>\n
‚ùóÔ∏è <i>–ö–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–∞—ë—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ 2% –∫ –¥–æ—Ö–æ–¥—É</i>
`, {
			parse_mode: "html",
			reply_markup
		})
	}

	if (query.data.startsWith('prudUpLevel')) {
		bot.deleteMessage(message.chat.id, message.message_id)
		var price = prudLevelPrices[message.user.prudLevel + 1]
		if (message.user.prudLevel >= 5) return bot.answerCallbackQuery(query.id, `‚ùå –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–∞–π–Ω–∏–∫–∞!`, true)
		if (price > message.user.buybalance) return bot.answerCallbackQuery(query.id, `‚ùå –ù–∞ –í–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!`, true)
		await User.findOneAndUpdate({ id: uid }, { $inc: { buybalance: -price, prudLevel: 1 } })
		return bot.answerCallbackQuery(query.id, `üîº –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–≤—ã—Å–∏–ª–∏ —É—Ä–æ–≤–µ–Ω—å —Å–≤–æ–µ–≥–æ —Ç–∞–π–Ω–∏–∫–∞ –¥–æ ${message.user.prudLevel + 1} –∑–∞ ${price} —Ä—É–±–∏–Ω–æ–≤!`, true)
	}
	
	if (query.data == 'takeklad') {
		if (message.user.outbalance < 2) return bot.answerCallbackQuery(query.id, '‚ùå –ù–∞ –í–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –≤—ã–≤–æ–¥–∞  –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!', true);
		await User.findOneAndUpdate({ id: uid }, { $inc: { outbalance: -3 } })
		var arr = randomizeArr([0, 1, 2, 3, 4, 5, 2, 1, 3, 0, 4])
		await User.findOneAndUpdate({ id: uid }, { $inc: { outbalance: arr[5] } })
		bot.sendMessage("@news_botov", `üí£ <a href="tg://user?id=${message.chat.id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –≤–∑–æ—Ä–≤–∞–ª —Å—Ç–µ–Ω—É –∏ –æ—Ç–∫—Ä—ã–ª –∫–ª–∞–¥ —Å –ø—Ä–∏–∑–æ–º <b>${arr[5]} —Ä—É–±–ª–µ–π –Ω–∞ –≤—ã–≤–æ–¥</b>`,{parse_mode: "HTML" })
		await bot.answerCallbackQuery(query.id, `üí£ –í—ã –≤–∑–æ—Ä–≤–∞–ª–∏ —Å—Ç–µ–Ω—É –∏ –ø–æ–ª—É—á–∏–ª–∏: <b>${arr[5]} —Ä—É–±–ª–µ–π –Ω–∞ –≤—ã–≤–æ–¥</b>` , true) 
            parse_mode: "HTML",
			reply_markup
		}
	
	if (query.data == 'promoact') {
		 state[uid] = 11000
		 return bot.sendMessage(message.chat.id, `<b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥:</b>`, {parse_mode: "HTML"})
	 }

	if (query.data.startsWith('store')) {
		bot.deleteMessage(message.chat.id, message.message_id)
		return bot.sendMessage(uid, '–ú–∞–≥–∞–∑–∏–Ω:', {
			reply_markup: {
				inline_keyboard: [
					[{ text: "üî∞ –ü–µ—Ä—Å–æ–Ω–∞–∂–∏", callback_data: "trees:shop0" }],
				]
			}
		});

	}
	
	if (query.data == 'dep') {
		var b = (await User.findOne({ id: 0 })).deposit
			var br = (await User.findOne({ id: 0 })).payout
		bot.deleteMessage(message.chat.id, message.message_id);
		return bot.sendMessage(message.chat.id, `–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è`, {
			parse_mode: "HTML",
			reply_markup: {
			     inline_keyboard: [
			          [{ text: `ü•ù QIWI + ${b}%` , callback_data: "deposit_qiwi" }, { text: `üÖøÔ∏è PAYEER + ${br}%` , callback_data: "deposit_payeer" }],
			          ]
			}

		});
	}

	if (query.data == 'deposit_qiwi') {
		bot.deleteMessage(message.chat.id, message.message_id);

		var b = (await User.findOne({ id: 0 })).deposit
		if (b == 0) var bt = ""
		else var bt = `\n<b>üî• –í—Ä–µ–º–µ–Ω–Ω–∞—è –∞–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π: +${b}% –ø—Ä–∏ –ª—é–±–æ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏</b>`
		return bot.sendMessage(message.chat.id, `ü•ù <b>–°–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: QIWI</b>
üåê –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±—É—é —Å—É–º–º—É –Ω–∞ –∫–æ—à–µ–ª–µ–∫ <code>+996705263660</code>
‚ùóÔ∏è –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π <code>ml${message.chat.id}</code>

üì• <b>–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –¥—Ä—É–≥–∏—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</b> @Licifersss\n
${bt}`, {
			parse_mode: "HTML",
			reply_markup: {
			     inline_keyboard: [
			          [{ text: "ü•ù –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é", url: "https://qiwi.com/p/996705263660" }],
			[{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "dep" }],
			          ]
			}

		});
	}
	
	if (query.data == 'deposit_payeer') {
		bot.deleteMessage(message.chat.id, message.message_id);

		var br = (await User.findOne({ id: 0 })). payout
		if (br == 0) var bt = ""
		else var bt = `\n<b>üî• –í—Ä–µ–º–µ–Ω–Ω–∞—è –∞–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π: +${br}% –ø—Ä–∏ –ª—é–±–æ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏</b>`
		return bot.sendMessage(message.chat.id, `üÖøÔ∏è <b>–°–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: Payeer</b>
üåê –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±—É—é —Å—É–º–º—É –Ω–∞ –∫–æ—à–µ–ª–µ–∫ <code>${config.payeer.account}</code>
‚ùóÔ∏è –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π <code>ml${message.chat.id}</code>

üì• <b>–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –¥—Ä—É–≥–∏—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</b> @Licifersss\n
${bt}`, {
			parse_mode: "HTML",
			reply_markup: {
			     inline_keyboard: [
			          [{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "dep" }],
			          ]
			}

		});
	}
	
	if (query.data == 'withdrawi') {
		if (message.user.game_balance < 0) return bot.answerCallbackQuery(query.id,'üö´ –í—ã –µ—â–µ –Ω–µ –¥–µ–ª–∞–ª–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π', true);
		if (message.user.outhbalance < 17) return bot.answerCallbackQuery(query.id,'üö´ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 17‚ÇΩ', true);
		bot.deleteMessage(message.chat.id, message.message_id);
		
		await message.user.set('menu', 'qiwi');
		await bot.sendMessage(message.chat.id, `–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä QIWI –∫–æ—à–µ–ª—å–∫–∞  –∏–ª–∏ PAYEER –¥–ª—è –≤—ã–≤–æ–¥–∞:\n–ù–∞–ø—Ä–∏–º–µ—Ä: +996705263660, P10600567000`, {
			reply_markup: {
				keyboard: Cancel,
				resize_keyboard: true
			}
		});
	}

	if (query.data == 'reinvesti') {
		await message.user.set('menu', 'reinvesti');
		bot.deleteMessage(message.chat.id, message.message_id);
		var br = (await User.findOne({ id: 0 })). payout
		var str = ""
		if (br > 0) str = `üî• <b>–í—Ä–µ–º–µ–Ω–Ω–∞—è –∞–∫—Ü–∏—è: +${br}% - –±–æ–Ω—É—Å –∫ —Ä–µ–∏–Ω–≤–µ—Å—Ç—É</b>\n\n`
		return bot.sendMessage(message.chat.id, `${str}üëâ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å:`, {
			parse_mode: "html",
			reply_markup: {
				keyboard: Cancel,
				resize_keyboard: true
			}
		});
	}
	
	if (query.data == 'buy_invest') {
		bot.deleteMessage(message.chat.id, message.message_id);
		var bi = (await User.findOne({ id: 0 })). fetuses
		var str = ""
		if (bi > 0) str = `üî• <b>–í—Ä–µ–º–µ–Ω–Ω–∞—è –∞–∫—Ü–∏—è: +${bi}% - –±–æ–Ω—É—Å –∫ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏</b>\n\n`
		state[uid] = 13
		return bot.sendMessage(message.chat.id, `
<b>üì≠ –í–∞—à –±–∞–ª–∞–Ω—Å:</b> ${message.user.game_balance}‚ÇΩ\n
<b>${str}üëâ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–∫–ª–∞–¥–∞:</b>
`, {
			parse_mode: "HTML", 
				reply_markup: {
					keyboard: Cancel,
					resize_keyboard: true
				}
			
		})
	}
	
	if (query.data == 'kredit_invest') {
		bot.deleteMessage(message.chat.id, message.message_id);
		state[uid] = 133
		return bot.sendMessage(message.chat.id, `
<b>üì≠ –í–∞—à –±–∞–ª–∞–Ω—Å –∫—Ä–µ–¥–∏—Ç–∞:</b> ${message.user.kredit_balance}‚ÇΩ\n
<b>üëâ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–∫–ª–∞–¥–∞:</b>
`, {
			parse_mode: "HTML", 
				reply_markup: {
					keyboard: Cancel,
					resize_keyboard: true
				}
			
		})
	}
	
	if (query.data == 'sbor_invest') {
		bot.deleteMessage(message.chat.id, message.message_id);
		var bs = (await User.findOne({ id: 0 })). outbalance
		var str = ""
		if (bs > 0) str = `üî• <b>–í—Ä–µ–º–µ–Ω–Ω–∞—è –∞–∫—Ü–∏—è: +${bs}% - –±–æ–Ω—É—Å –∫ –≤—ã–≤–æ–¥—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π</b>\n\n`
		state[uid] = 14
		return bot.sendMessage(message.chat.id, `
<b>üì≠ –í–∞—à–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è:</b> ${message.user.accumulation_balance}‚ÇΩ\n
<b>${str}üëâ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ —Å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π:</b>
`, {
			parse_mode: "HTML", 
				reply_markup: {
					keyboard: Cancel,
					resize_keyboard: true
				}
			
		})
	}

	if (query.data.startsWith('wildBees')) {
		bot.deleteMessage(message.chat.id, message.message_id)
		var reply_markup = { inline_keyboard: [] }
		var wb = await WildBee.find({ creator_id: uid })
		wb.map((b) => { reply_markup.inline_keyboard.push([{ text: `üêß –°—É–ø–µ—Ä –ü–µ—Ä—Å–æ–Ω–∞–∂ ${b.level} —É—Ä–æ–≤–Ω—è`, callback_data: "wb_" + b._id }]) })
		reply_markup.inline_keyboard.push([{ text: `‚ûï –°–æ–±—Ä–∞—Ç—å ${message.user.wb_profits}  üõ°Ô∏è`, callback_data: "wbCollect" }])
		reply_markup.inline_keyboard.push([{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "store" }])
		return bot.sendMessage(uid, `üêß –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –º–æ–≥—É—Ç –ø–æ—è–≤–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –±–ª–∞–≥–æ–¥–∞—Ä—è —Ñ–∞–±—Ä–∏–∫–µ\n
<b>–î–ª—è –ü–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ 5 —É—Ä–æ–≤–Ω–µ–π —É–ª—É—á—à–µ–Ω–∏—è:</b>\n
–£—Ä–æ–≤–µ–Ω—å |  –ó–∞—â–∏—Ç—ã –≤ —á–∞—Å | –°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è
1 —É—Ä–æ–≤–µ–Ω—å - 33  üõ°Ô∏è 
2 —É—Ä–æ–≤–µ–Ω—å - 340  üõ°Ô∏è - 120‚ÇΩ
3 —É—Ä–æ–≤–µ–Ω—å - 618  üõ°Ô∏è - 400‚ÇΩ
4 —É—Ä–æ–≤–µ–Ω—å - 982  üõ°Ô∏è - 500‚ÇΩ
5 —É—Ä–æ–≤–µ–Ω—å - 2200  üõ°Ô∏è - 2000‚ÇΩ
6 —É—Ä–æ–≤–µ–Ω—å - 4978  üõ°Ô∏è - 3000‚ÇΩ
7 —É—Ä–æ–≤–µ–Ω—å - 7470  üõ°Ô∏è - 4000‚ÇΩ
8 —É—Ä–æ–≤–µ–Ω—å - 23027  üõ°Ô∏è - 7000‚ÇΩ
<b>–í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏:</b>`, {
			reply_markup, parse_mode: "html"
		});
	}

	if (query.data.startsWith('wbCollect')) {
		if (message.user.wb_profits == 0)
			return bot.answerCallbackQuery(query.id, 'üêß –í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –ø–æ–∫–∞ –Ω–µ –ø—Ä–∏–Ω–µ—Å–ª–∏ –¥–æ—Ö–æ–¥–∞!', true);
		else {
			bot.deleteMessage(message.chat.id, message.message_id)
			await User.findOneAndUpdate({ id: uid }, { wb_profits: 0 })
			await message.user.inc('fetuses', message.user.wb_profits)
			return bot.answerCallbackQuery(query.id, `üêß –í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–ª–∏ ${message.user.wb_profits}  üõ°Ô∏è`, true);
		}
	}

	if (query.data.startsWith('wbUpLevel_')) {
		var wb = await WildBee.findOne({ _id: query.data.split("_")[1] })
		var price = wbPrices[wb.level + 1]
		if (message.user.buybalance < price) return bot.answerCallbackQuery(query.id, `‚ùå –ù–∞ –í–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è`, true);
		await User.findOneAndUpdate({ id: uid }, { $inc: { buybalance: -price } })
		await WildBee.findOneAndUpdate({ _id: String(wb._id) }, { level: wb.level + 1 })
		bot.deleteMessage(message.chat.id, message.message_id)
		wb.level++
		var reply_markup = { inline_keyboard: [] }
		if (wb.level < 8)
			reply_markup.inline_keyboard.push([{ text: `üîº –ö—É–ø–∏—Ç—å ${wb.level + 1} —É—Ä–æ–≤–µ–Ω—å –∑–∞ ${wbPrices[wb.level + 1]}‚ÇΩ`, callback_data: `wbUpLevel_` + wb._id }])
		reply_markup.inline_keyboard.push([{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "wildBees" }])
		bot.sendPhoto(message.chat.id, "sfix.jpg", {
			caption: `
üêß <b>–ü–µ—Ä—Å–æ–Ω–∞–∂ ${wb.level} —É—Ä–æ–≤–Ω—è</b> \n
üïí <b>–í –∑–æ–æ–ø–∞—Ä–∫–µ:</b> ${Math.floor((Date.now() - wb.start_time) / (1000 * 60 * 60 * 24))} –¥–Ω–µ–π
 üõ°Ô∏è <b> Coins –≤ —á–∞—Å:</b> ${wbProfits[wb.level]}
üí∞ <b>–ü—Ä–∏–Ω—ë—Å  Coins</b>: ${ wb.bee_profit}`, parse_mode: "HTML", reply_markup
		})
		return bot.answerCallbackQuery(query.id, `üîº –£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ–≤—ã—à–µ–Ω –¥–æ ${wb.level} –∑–∞ ${price}‚ÇΩ`, true);

	}

	if (query.data.startsWith('wb')) {
		bot.deleteMessage(message.chat.id, message.message_id)
		var wb = await WildBee.findOne({ _id: query.data.split("_")[1] })
		var reply_markup = { inline_keyboard: [] }
		if (wb.level < 8)
			reply_markup.inline_keyboard.push([{ text: `üîº –ö—É–ø–∏—Ç—å ${wb.level + 1} —É—Ä–æ–≤–µ–Ω—å –∑–∞ ${wbPrices[wb.level + 1]}‚ÇΩ`, callback_data: `wbUpLevel_` + wb._id }])
		reply_markup.inline_keyboard.push([{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "wildBees" }])
		bot.sendPhoto(message.chat.id, "sfix.jpg", {
			caption: `
üêß <b>–ü–µ—Ä—Å–æ–Ω–∞–∂ ${wb.level} —É—Ä–æ–≤–Ω—è</b> \n
üïí <b>–ù–∞ –ø—Ä–æ–≥—É–ª–∫–µ:</b> ${Math.floor((Date.now() - wb.start_time) / (1000 * 60 * 60 * 24))} –¥–Ω–µ–π
 üõ°Ô∏è <b> Coins –≤ —á–∞—Å:</b> ${wbProfits[wb.level]}
üí∞ <b>Coins  –ó–∞—â–∏—Ç—ã</b>: ${ wb.bee_profit}`, parse_mode: "HTML", reply_markup
		})
	}

	if (query.data == ('beeMother')) {
		bot.deleteMessage(message.chat.id, message.message_id)
		console.log(await User.findOne({ id: 1 }))
		var bm = JSON.parse((await User.findOne({ id: 1 })).menu)
		var reply_markup = {
			inline_keyboard: [
			]
		}
		var ubm = await BeeMother.findOne({ creator_id: message.user.id })
		if (ubm != null) {
			var now = new Date()
			var ttl = Math.floor((ubm.end_time - now.getTime()) / (1000 * 60 * 60 * 24))
			var str = `<b>‚öúÔ∏è –í–∞—à–∞ —Ñ–∞–±—Ä–∏–∫–∞:</b>\n
üïê –û—Å—Ç–∞–ª–æ—Å—å <b>${ttl}</b> –¥–Ω–µ–π
üêØ –ü—Ä–∏–Ω–µ—Å–ª–∞ <b>${ubm.beesGet}</b> –∏–∑ <b>4</b> –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
`
		}

		else if (!bm.status) var str = '<b>‚ùå –§–∞–±—Ä–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</b>'
		else {
			var str = `<b>‚úÖ –§–∞–±—Ä–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞!</b>\nüí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>${bm.price} —Ä—É–±–ª–µ–π</b>\nüõí –ö—É–ø–ª–µ–Ω–æ <b>${bm.bought}</b> –∏–∑ <b>${bm.count}</b>`
			reply_markup.inline_keyboard.push([{ text: "üõí –ö—É–ø–∏—Ç—å —Ñ–∞–±—Ä–∏–∫—É", callback_data: "beeMotherBuy" }])
		}
		reply_markup.inline_keyboard.push([{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "store" }])
		return bot.sendMessage(uid, `
<b>‚öúÔ∏è –ü–æ–∫—É–ø–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>
‚ùóÔ∏èÔ∏èÔ∏è –ü–µ—Ä—Å–æ–Ω–∞–∂ - –≥–µ—Ä–æ–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—ã,–±–ª–∞–≥–æ–¥–∞—Ä—è –∫–æ—Ç–æ—Ä—ã–º –ª–µ–≥–∫–æ–º –ø–æ–¥–Ω—è—Ç—å –¥–µ–Ω–µ–≥
üè¶ –í–∞—à –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–æ–∫: <b>${message.user.buybalance} —Ä—É–±–ª–µ–π</b>
‚öúÔ∏è –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –∏ –∏—Å—á–µ–∑–∞–µ—Ç —Å –ø—Ä–æ–¥–∞–∂–∏ –∫–æ–≥–¥–∞ —É–≥–æ–¥–Ω–æ!
‚ö∞Ô∏è –°—Ä–æ–∫ —Ä–∞–±–æ—Ç—ã —Ñ–∞–±—Ä–∏–∫–∏ - 30 –¥–Ω–µ–π!
üêØ –§–∞–±—Ä–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏ –ø—Ä–∏–Ω–æ—Å–∏—Ç 4 –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!\n\n${str}`, {
			reply_markup, parse_mode: "html"
		});

	}

	if (query.data == ('beeMotherBuy')) {
		var bm = JSON.parse((await User.findOne({ id: 1 })).menu)

		if (!bm.status) return bot.answerCallbackQuery(query.id, '‚ùå –§–∞–±—Ä–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!', true);
		if (message.user.buybalance < bm.price) return bot.answerCallbackQuery(query.id, '‚ùå –ù–∞ –í–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!', true);
		bot.deleteMessage(message.chat.id, message.message_id)

		await User.findOneAndUpdate({ id: message.chat.id }, { $inc: { buybalance: -bm.price } })
		var now = new Date()
		now.setDate(now.getDate() + 7)
		var nextBeeGet = now.getTime()
		now.setDate(now.getDate() + 24)
		var end_time = now.getTime()
		await BeeMother.insertMany([{ creator_id: message.chat.id, beesGet: 0, nextBeeGet, end_time }])
		bm.bought++
		if (bm.bought >= bm.count) bm.status = false
		await User.findOneAndUpdate({ id: 1 }, { menu: JSON.stringify(bm) })
		return bot.sendMessage(uid, `
<b>‚öúÔ∏è –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Ñ–∞–±—Ä–∏–∫—É!</b>`, {
			reply_markup, parse_mode: "html"
		});

	}

	if (query.data.startsWith('trees:inv')) {
		let id = Number(query.data.split('trees:inv')[1]);

		let tree = trees.find((x) => x.id == id);
		if (!tree) return bot.answerCallbackQuery(query.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...', true);

		let total_balance = 0;

		message.user.trees.map((x) => {
			total_balance += (((Date.now() - message.user.lastCollect) / 1000) / 60) * (trees.find((a) => a.id == x.id).earn / 60);
		});

		let count = message.user.trees.filter((x) => x.id == tree.id).length;

		let earn = count * tree.earn;

		bot.deleteMessage(message.chat.id, message.message_id)

		bot.sendPhoto(message.chat.id, `c${tree.id}.png`, {

			caption: `<b>${tree.name}</b> (${count}x)
		
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${tree.price}‚ÇΩ
 üõ°Ô∏è  Coins –≤ —á–∞—Å: ${earn}`, parse_mode: "HTML",
			reply_markup: {
				inline_keyboard: [[
					{ text: getInventoryIcon(0, tree.id), callback_data: getInventoryQuery(0, tree.id) },
					{ text: getInventoryIcon(1, tree.id), callback_data: getInventoryQuery(1, tree.id) },
					{ text: getInventoryIcon(2, tree.id), callback_data: getInventoryQuery(2, tree.id) },
					{ text: getInventoryIcon(3, tree.id), callback_data: getInventoryQuery(3, tree.id) },
					{ text: getInventoryIcon(4, tree.id), callback_data: getInventoryQuery(4, tree.id) },
					{ text: getInventoryIcon(5, tree.id), callback_data: getInventoryQuery(5, tree.id) },
					{ text: getInventoryIcon(6, tree.id), callback_data: getInventoryQuery(6, tree.id) },
					{ text: getInventoryIcon(7, tree.id), callback_data: getInventoryQuery(7, tree.id) },], 
					[{ text: getInventoryIcon(8, tree.id), callback_data: getInventoryQuery(8, tree.id) },], 
				[{ text: `‚ûï –°–æ–±—Ä–∞—Ç—å ${total_balance.toFixed(2)} üõ°Ô∏è`, callback_data: `trees:collect` }]
				]
			}
		})

	}

	if (query.data.startsWith('trees:buy')) {
		let total_balance = 0;
		console.log(message.user.trees)
		message.user.trees.map((x) => {
			if ((((Date.now() - message.user.lastCollect) / 1000) / 60) * (trees.find((a) => a.id == x.id).earn / 60) > (trees.find((a) => a.id == x.id).earn * 72)) {
				total_balance += trees.find((a) => a.id == x.id).earn * 72;
			} else {
				total_balance += (((Date.now() - message.user.lastCollect) / 1000) / 60) * (trees.find((a) => a.id == x.id).earn / 60);
			}
		});


		let id = Number(query.data.split('trees:buy')[1]);

		let tree = trees.find((x) => x.id == id);
		if (!tree) return bot.answerCallbackQuery(query.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...', true);

		if (tree.price > message.user.buybalance) return bot.answerCallbackQuery(query.id, 'üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.', true);
		else if (tree.price <= message.user.buybalance) {
			var limit = (await User.findOne({ id: 0 })).bhivebalance

			var treesWithEqualId = 0
			message.user.trees.map((t) => { if (t.id == id) treesWithEqualId++ })

			if (treesWithEqualId >= limit)
				return bot.answerCallbackQuery(query.id, `üõë –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –≤ ${limit} –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è`, true);

			//await message.user.dec('buybalance', tree.price);

			await message.user.set('lastCollect', Date.now());
			await message.user.inc('fetuses', Number(total_balance.toFixed(2)));

			await message.user.trees.push({ id: tree.id, date: Date.now(), lastCollect: Date.now(), health: tree.health  });
			await message.user.save();
			await User.findOneAndUpdate({ id: uid }, { $inc: { buybalance: -tree.price } })


			return bot.answerCallbackQuery(query.id, `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ ${tree.name} –∑–∞ ${tree.price}‚ÇΩ`, true);
		}
	}

	if (query.data == 'exchange') {
		if (message.user.fetuses < 1000) return bot.answerCallbackQuery(query.id, 'üö´ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ–±–º–µ–Ω–∞: 1000  üõ°Ô∏è', true);
		let { fetuses } = message.user;
		await message.user.set('fetuses', 0);
		fetuses = fetuses / 1000;
		await message.user.inc('buybalance', fetuses / 1.42);
		await message.user.inc('outbalance', fetuses / 3.33);
		bot.deleteMessage(message.chat.id, message.message_id);
		return bot.answerCallbackQuery(query.id, `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ–±–º–µ–Ω—è–ª–∏ ${(fetuses * 1000).toFixed(2)}  üõ°Ô∏è –Ω–∞ ${fetuses.toFixed(2)}‚ÇΩ`, true);
	}

	if (query.data == 'deposit') {
		bot.deleteMessage(message.chat.id, message.message_id);
        /*                               
		ü•ù <b>–°–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: QIWI</b>
		üåê –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±—É—é —Å—É–º–º—É –Ω–∞ –∫–æ—à–µ–ª–µ–∫ <code>${config.qiwi.account}</code>
		‚ùóÔ∏è –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π <code>VR${message.chat.id}</code>
		*/
		var b = (await User.findOne({ id: 0 })).deposit
		if (b == 0) var bt = ""
		else var bt = `\n<b>üî• –í—Ä–µ–º–µ–Ω–Ω–∞—è –∞–∫—Ü–∏—è: +${b}% –ø—Ä–∏ –ª—é–±–æ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏</b>`

        return bot.sendMessage(message.chat.id, `ü•ù <b>–°–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: QIWI</b>
üåê –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±—É—é —Å—É–º–º—É –Ω–∞ –∫–æ—à–µ–ª–µ–∫ <code>${qiwistr.split(" ")[0]}</code>
‚ùóÔ∏è –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π <code>GTA${message.chat.id}</code>

üíé <b>–°–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: Payeer</b>
üåê –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±—É—é —Å—É–º–º—É –Ω–∞ –∫–æ—à–µ–ª–µ–∫ <code>${config.payeer.account}</code>
‚ùóÔ∏è –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π <code>GTA${message.chat.id}</code>

üì• <b>–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –¥—Ä—É–≥–∏—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º </b> @Licifersss\n
${bt}`, {
			parse_mode: "HTML",

		});
	}


	if (query.data == 'game_payin') {
		state[uid] = undefined
		bot.deleteMessage(message.chat.id, message.message_id);
		return bot.sendMessage(message.chat.id, `<b>üëá –í—ã–±–µ—Ä–µ—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞:</b>`, { parse_mode: "HTML", reply_markup: { inline_keyboard: [[{ text: "ü•ù QIWI", callback_data: "game_payin_qiwi" }], [{ text: "üíé Payeer", callback_data: "game_payin_payeer" }], [{ text: "üì≠ –ë–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞", callback_data: "game_payin_wb" }],] } })
	}

	if (query.data == 'game_payin_qiwi') {
		bot.deleteMessage(message.chat.id, message.message_id);
		return bot.sendMessage(message.chat.id, `
ü•ù <b>–°–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: QIWI</b>
üåê –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±—É—é —Å—É–º–º—É –Ω–∞ –∫–æ—à–µ–ª–µ–∫ <code>${qiwistr.split(" ")[0]}</code>
‚ùóÔ∏è –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π <code>ZG${message.chat.id}</code>
`, { parse_mode: "HTML", reply_markup: { inline_keyboard: [[{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "game_payin" }]] } })
	}

	if (query.data == 'game_payin_payeer') {
		bot.deleteMessage(message.chat.id, message.message_id);
		return bot.sendMessage(message.chat.id, `
üíé <b>–°–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: Payeer</b>
üåê –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±—É—é —Å—É–º–º—É –Ω–∞ –∫–æ—à–µ–ª–µ–∫ <code>${config.payeer.account}</code>
‚ùóÔ∏è –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π <code>ZG${message.chat.id}</code>
`, { parse_mode: "HTML", reply_markup: { inline_keyboard: [[{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "game_payin" }]] } })
	}

	if (query.data == 'game_payin_wb') {
		bot.deleteMessage(message.chat.id, message.message_id);
		state[uid] = 66666
		return bot.sendMessage(message.chat.id, `
<b>üì≠ –í–∞—à –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞:</b> ${message.user.outbalance.toFixed(0)}‚ÇΩ\n
<b>üëâ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –∏–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å:</b>
`, {
			parse_mode: "HTML", reply_markup: {
				reply_markup: {
					keyboard: Cancel,
					resize_keyboard: true
				}
			}
		})
	}

	if (query.data == 'game_payout') {
		if (message.user.game_limit > 0) return bot.answerCallbackQuery(query.id, `‚ùóÔ∏è –î–ª—è –≤—ã–≤–æ–¥–∞ –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å—ã–≥—Ä–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è –µ—â—ë ${message.user.game_limit} –∏–≥—Ä –≤ –ö–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã –∏–ª–∏ –ú–∏–Ω–Ω–æ–µ –ø–æ–ª–µ!`, true);

		bot.deleteMessage(message.chat.id, message.message_id);
		state[uid] = 66667
		return bot.sendMessage(message.chat.id, `
<b>üí∞ –í–∞—à –∏–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å:</b> ${roundPlus(message.user.game_balance)}‚ÇΩ\n
<b>üëâ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –Ω–∞ –∏–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å:</b>
`, {
			parse_mode: "HTML", reply_markup: {
				reply_markup: {
					keyboard: Cancel,
					resize_keyboard: true
				}
			}
		})
	}

	if (query.data == 'game_casino') {
		bot.deleteMessage(message.chat.id, message.message_id);
		return bot.sendMessage(message.chat.id, `<b>üé∞ –ö–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã</b>\n
–°—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–ª–µ—Å–∞ - <b>100‚ÇΩ</b> —Å –∏–≥—Ä–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞\n
<b>üí∞ –í–∞—à –∏–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å:</b> ${roundPlus(message.user.game_balance)}‚ÇΩ\n
<b>–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–∏–≥—Ä–∞—Ç—å:</b>
‚ñ´Ô∏è –ú–æ—Ä—Ç–∞ ‚ñ´Ô∏è –ú–µ–π—Å–æ–Ω–∞ ‚ñ´Ô∏è –®–∫–∏–ø–µ—Ä–∞ ‚ñ´Ô∏è –î–∂—É–ª–∏–∞–Ω–∞ ‚ñ´Ô∏è –ì–ª–æ—Ä–∏—é ‚ñ´Ô∏è –ï—â—ë –æ–¥–Ω–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫—É ‚ñ´Ô∏è 5‚ÇΩ ‚ñ´Ô∏è 10‚ÇΩ ‚ñ´Ô∏è 15‚ÇΩ
	`, {
			parse_mode: "HTML",
			reply_markup: {
				inline_keyboard: [
					[{ text: "üé∞ –ò—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É 100‚ÇΩ", callback_data: "game_casino_spin" }],
				]
			}
		});
	}

	if (query.data == 'game_casino_spin') {
		if (message.user.game_balance < 100) return bot.answerCallbackQuery(query.id, '‚ùå –ù–∞ –í–∞—à–µ–º –∏–≥—Ä–æ–≤–æ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!', true);
		await User.findOneAndUpdate({ id: uid }, { $inc: { game_balance: -100, game_limit: -1 } })
		bot.deleteMessage(message.chat.id, message.message_id);
		var val = randomInteger(1, 9)
		var reply_markup = {
			inline_keyboard: [
				[{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "game_casino" }],
			]
		}
		if (val <= 5) {
			val--
			var prize = `üêØ –ü–µ—Ä—Å–æ–Ω–∞–∂–µ–≤–æ ${trees.find((a) => a.id == val).name}`
			giveTree(uid, val)
		}
		else if (val == 6) {
			var prize = `‚ôªÔ∏è –ï—â—ë –æ–¥–Ω—É –ø—Ä–æ–∫—Ä—É—Ç–∫—É`
			await User.findOneAndUpdate({ id: uid }, { $inc: { game_balance: 100 } })
			reply_markup.inline_keyboard[0] = [{ text: "üé∞ –ò—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É", callback_data: "game_casino_spin" }]
		}
		else if (val >= 7) {
			val = roundPlus((val - 6) * 5)
			var prize = `üí∞ ${val}‚ÇΩ –Ω–∞ –∏–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å`
			await User.findOneAndUpdate({ id: uid }, { $inc: { game_balance: val } })
		}
		return bot.sendMessage(message.chat.id, `üé∞ <b>–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏:</b>\n\n${prize}`, {
			parse_mode: "HTML",
			reply_markup
		});
	}


	if (query.data == 'game_bomb') {
		bot.deleteMessage(message.chat.id, message.message_id);
		state[uid] = 8877
		return bot.sendMessage(message.chat.id, `<b>üí£ –ú–∏–Ω–Ω–æ–µ –ø–æ–ª–µ</b>\n
‚ñ´Ô∏è –í—Å–µ–≥–æ –Ω–∞ –ø–æ–ª–µ 6 –º–∏–Ω
‚ñ´Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—Ö–æ–¥–∞ - 50‚ÇΩ 
‚ñ´Ô∏è –° –∫–∞–∂–¥—ã–º –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –ø—É—Å—Ç–æ–π –∫–ª–µ—Ç–∫–∏ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è +2% –æ—Ç —Å—É–º–º—ã –≤—Ö–æ–¥–∞
‚ñ´Ô∏è –í–∞—à –∏–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å: ${roundPlus(message.user.game_balance)}‚ÇΩ
‚ñ´Ô∏è –û—Ç–∫—Ä–æ–µ—Ç–µ –≤—Å–µ –ø—É—Å—Ç—ã–µ –∫–ª–µ—Ç–∫–∏ - –ø–æ–ª—É—á–∏—Ç–µ —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–∏–∑:
iphone 1‚ñ´Ô∏è iphone 2 ‚ñ´Ô∏è 10‚ÇΩ ‚ñ´Ô∏è 20‚ÇΩ ‚ñ´Ô∏è 35‚ÇΩ ‚ñ´Ô∏è 40‚ÇΩ\n
üëâ <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—Ö–æ–¥–∞:</b>
	`, {
			parse_mode: "HTML",
			reply_markup: {
				keyboard: Cancel,
				resize_keyboard: true
			}
		});
	}

	if (query.data == 'gameBombCollect') {
		await bot.answerCallbackQuery(query.id, `üí∞ –í—ã –∑–∞–±—Ä–∞–ª–∏ –±–∞–Ω–∫! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${message.user.bank}‚ÇΩ!`, true);
		bot.deleteMessage(message.chat.id, message.message_id);
		await User.findOneAndUpdate({ id: uid }, { $inc: { game_balance: message.user.bank }, bank: 0 })
	}

	if (~query.data.indexOf('gameBomb')) {
		var field = JSON.parse(message.user.data)
		var coords = query.data.split("_")[1].split(",")
		var box = field[Number(coords[0])][Number(coords[1])]
		if (box == 2) return bot.answerCallbackQuery(query.id, `–í—ã —É–∂–µ –æ—Ç–∫—Ä—ã–ª–∏ —ç—Ç—É –∫–ª–µ—Ç–∫—É!`, true);
		if (message.user.game_balance < message.user.game_bet) return bot.answerCallbackQuery(query.id, `–ù–∞ –í–∞—à–µ–º –∏–≥—Ä–æ–≤–æ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!`, true);
		await User.findOneAndUpdate({ id: uid }, { $inc: { game_balance: -message.user.game_bet, game_limit: -1 } })

		if (box == 1) {
			await bot.answerCallbackQuery(query.id, `üí£ –í—ã –ø–æ–ø–∞–ª–∏—Å—å –Ω–∞ –º–∏–Ω—É!`, true);
			bot.deleteMessage(message.chat.id, message.message_id);
			await User.findOneAndUpdate({ id: uid }, { bank: 0 })
			return
		}
		else if (box == 0) {
			bot.deleteMessage(message.chat.id, message.message_id);
			field[Number(coords[0])][Number(coords[1])] = 2
			await User.findOneAndUpdate({ id: uid }, { data: JSON.stringify(field), bank: roundPlus(message.user.bank * 1.02) })
			if (!field.every(line => { return line.every(e => { return e == 2 }) })) {
				bot.sendMessage(message.chat.id, `<b>üí£ –ú–∏–Ω–Ω–æ–µ –ø–æ–ª–µ</b>\n
‚ñ´Ô∏è –í—Å–µ–≥–æ –Ω–∞ –ø–æ–ª–µ 6 –º–∏–Ω
‚ñ´Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—Ö–æ–¥–∞ - 50‚ÇΩ 
‚ñ´Ô∏è –° –∫–∞–∂–¥—ã–º –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –ø—É—Å—Ç–æ–π –∫–ª–µ—Ç–∫–∏ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è +2% –æ—Ç —Å—É–º–º—ã –≤—Ö–æ–¥–∞
‚ñ´Ô∏è –í–∞—à –∏–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å: ${roundPlus(message.user.game_balance)}‚ÇΩ
‚ñ´Ô∏è –û—Ç–∫—Ä–æ–µ—Ç–µ –≤—Å–µ –ø—É—Å—Ç—ã–µ –∫–ª–µ—Ç–∫–∏ - –ø–æ–ª—É—á–∏—Ç–µ —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–∏–∑:
–ú–æ—Ä—Ç–∞ ‚ñ´Ô∏è –ú–µ–π—Å–æ–Ω–∞ ‚ñ´Ô∏è 10‚ÇΩ ‚ñ´Ô∏è 20‚ÇΩ ‚ñ´Ô∏è 30‚ÇΩ ‚ñ´Ô∏è 40‚ÇΩ\n
üí∞ <b>–ë–∞–Ω–∫ –∏–≥—Ä—ã:</b> ${roundPlus(message.user.bank * 1.02)}‚ÇΩ\n
üëá <b>–í—ã–±–µ—Ä–µ—Ç–µ –∫–ª–µ—Ç–∫—É –¥–ª—è —Ö–æ–¥–∞:</b>
						`, {
					parse_mode: "HTML",
					reply_markup: {
						inline_keyboard: [
							[{ text: field[0][0] != 2 ? "‚ùì" : "‚¨úÔ∏è", callback_data: "gameBomb_0,0" }, { text: field[0][1] != 2 ? "‚ùì" : "‚¨úÔ∏è", callback_data: "gameBomb_0,1" }, { text: field[0][2] != 2 ? "‚ùì" : "‚¨úÔ∏è", callback_data: "gameBomb_0,2" }, { text: field[0][3] != 2 ? "‚ùì" : "‚¨úÔ∏è", callback_data: "gameBomb_0,3" }],
							[{ text: field[1][0] != 2 ? "‚ùì" : "‚¨úÔ∏è", callback_data: "gameBomb_1,0" }, { text: field[1][1] != 2 ? "‚ùì" : "‚¨úÔ∏è", callback_data: "gameBomb_1,1" }, { text: field[1][2] != 2 ? "‚ùì" : "‚¨úÔ∏è", callback_data: "gameBomb_1,2" }, { text: field[1][3] != 2 ? "‚ùì" : "‚¨úÔ∏è", callback_data: "gameBomb_1,3" }],
							[{ text: field[2][0] != 2 ? "‚ùì" : "‚¨úÔ∏è", callback_data: "gameBomb_2,0" }, { text: field[2][1] != 2 ? "‚ùì" : "‚¨úÔ∏è", callback_data: "gameBomb_2,1" }, { text: field[2][2] != 2 ? "‚ùì" : "‚¨úÔ∏è", callback_data: "gameBomb_2,2" }, { text: field[2][3] != 2 ? "‚ùì" : "‚¨úÔ∏è", callback_data: "gameBomb_2,3" }],
							[{ text: field[3][0] != 2 ? "‚ùì" : "‚¨úÔ∏è", callback_data: "gameBomb_3,0" }, { text: field[3][1] != 2 ? "‚ùì" : "‚¨úÔ∏è", callback_data: "gameBomb_3,1" }, { text: field[3][2] != 2 ? "‚ùì" : "‚¨úÔ∏è", callback_data: "gameBomb_3,2" }, { text: field[3][3] != 2 ? "‚ùì" : "‚¨úÔ∏è", callback_data: "gameBomb_3,3" }],
							[{ text: "?? –ó–∞–±—Ä–∞—Ç—å –±–∞–Ω–∫", callback_data: "gameBombCollect" },],
						]
					}
				});
			}
			else {
				var prize = randomInteger(1, 6)
				if (prize == 5) {
					giveTree(uid, 0)
					prize = "üíé –ú–æ—Ä—Ç"
				}
				else if (prize == 6) {
					giveTree(uid, 1)
					prize = "üíé –ú–µ–π—Å–æ–Ω"
				}
				else {
					await message.user.inc("game_balance", prize * 10)
					prize = `üíé ${prize * 10} ‚ÇΩ`
				}
				bot.sendMessage(message.chat.id, `<b>üí£ –í—ã –æ—Ç–∫—Ä—ã–ª–∏ –≤—Å–µ –ø—É—Å—Ç—ã–µ –∫–ª–µ—Ç–∫–∏!</b>\n
‚ñ´Ô∏è <b>–í–∞—à –≤—ã–∏–≥—Ä—ã—à:</b> ${prize}`, {
					parse_mode: "HTML",
				});
			}
		}
	}

	if (query.data == 'game_prize') {
		if (message.user.prize) return bot.answerCallbackQuery(query.id, 'üôÇ –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫!', true);
		bot.deleteMessage(message.chat.id, message.message_id);
		return bot.sendMessage(message.chat.id, `üéÅ <b>–ü–æ–¥–∞—Ä–æ–∫ - –ë–∞–Ω–¥–∏—Ç –∏–∑ –ì—Ä–æ—É–≤-–°—Ç—Ä–∏—Ç</b>\n
–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã:
‚ñ´Ô∏è @asik_prog
‚ñ´Ô∏è @payments_bota`, {
			parse_mode: "HTML",
			reply_markup: { inline_keyboard: [[{ text: "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data: "game_prize_check" }]] }
		});
	}

	if (query.data == 'game_prize_check') {
		var res = await bot.getChatMember("@payments_bota", message.chat.id)
		var res1 = await bot.getChatMember("@asik_prog", message.chat.id)
		if (message.user.prize) return bot.answerCallbackQuery(query.id, 'üôÇ –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫!', true);
		if (res.status == 'left' || res1.status == 'left') return bot.answerCallbackQuery(query.id, '‚ùå –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–µ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!', true);
		await bot.deleteMessage(message.chat.id, message.message_id);
		message.user.trees.push({
			id: 0,
			date: Date.now(),
			lastCollect: Date.now()
		});
		message.user.prize = true
		await message.user.save();
		return bot.sendMessage(message.chat.id, `üéÅ <b>–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–¥–∞—Ä–æ–∫! –ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å —É–∂–µ —É –≤–∞—Å!</b>`, {
			parse_mode: "HTML",
		});
	}

	if (query.data == 'game_roulette') {
		bot.deleteMessage(message.chat.id, message.message_id);
		return bot.sendMessage(message.chat.id, `üíà <b>–†—É–ª–µ—Ç–∫–∞</b>\n
–°—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ä–∞—â–µ–Ω–∏—è - <b>50‚ÇΩ</b>. –í—ã–∏–≥—Ä—ã—à –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –Ω–∞ –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–æ–∫
<b>–í—Ä–∞—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è:</b> ${message.user.spinsToday || 0}/2\n
<b>üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞:</b> ${roundPlus(message.user.outbalance)}‚ÇΩ\n
<b>–í —Ä—É–ª–µ—Ç–∫–µ 6 —è—á–µ–µ–∫:</b>
0‚ÇΩ | 0‚ÇΩ | 0‚ÇΩ | 50‚ÇΩ | 100‚ÇΩ | 150‚ÇΩ
	`, {
			parse_mode: "HTML",
			reply_markup: {
				inline_keyboard: [
					[{ text: "üíà –ö—É–ø–∏—Ç—å –≤—Ä–∞—â–µ–Ω–∏–µ –∑–∞ 50‚ÇΩ", callback_data: "game_roulette_spin" }],
				]
			}
		});
	}

	if (query.data == 'game_roulette_spin') {
		if (message.user.spinsToday >= 2) return bot.answerCallbackQuery(query.id, '‚ùå –í—ã —É–∂–µ –∫—É–ø–∏–ª–∏ 2 –≤—Ä–∞—â–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è!', true);
		if (message.user.outbalance < 50) return bot.answerCallbackQuery(query.id, '‚ùå –ù–∞ –í–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!', true);
		await User.findOneAndUpdate({ id: uid }, { $inc: { outbalance: -50, spinsToday: 1 } })
		bot.deleteMessage(message.chat.id, message.message_id);
		var arr = randomizeArr([0, 0, 0, 50, 100, 150])
		await User.findOneAndUpdate({ id: uid }, { $inc: { buybalance: arr[3] } })
		return bot.sendMessage(message.chat.id, `üíà <b>–†—É–ª–µ—Ç–∫–∞</b>\n\n
						${arr[0]}‚ÇΩ
						${arr[1]}‚ÇΩ
						${arr[2]}‚ÇΩ
üîπ${arr[3]}‚ÇΩüîπ
						${arr[4]}‚ÇΩ
						${arr[5]}‚ÇΩ\n
<b>–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${arr[3]}‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–æ–∫!</b>
	`, {
			parse_mode: "HTML",
			reply_markup: {
				inline_keyboard: [
					[{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "game_roulette" }],
				]
			}
		});
	}

	if (query.data == 'game_chest') {
		bot.deleteMessage(message.chat.id, message.message_id);
		return bot.sendMessage(message.chat.id, `üîí –í—ã–±–µ—Ä–µ—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å—É–Ω–¥—É–∫–∞
?? –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –≤ –¥–≤–∞ —Ä–∞–∑–∞ –±–æ–ª—å—à–µ ‚ÇΩ, –∞ –º–æ–∂–µ—Ç –±—ã—Ç—å, —Å—É–Ω–¥—É–∫ –æ–∫–∞–∂–µ—Ç—Å—è –ø—É—Å—Ç—ã–º
üé≤ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: 50%`, {
			parse_mode: "HTML",
			reply_markup: {
				inline_keyboard: [
					[{ text: "1‚ÇΩ", callback_data: "casino_1" },
					{ text: "2‚ÇΩ", callback_data: "casino_2" },
					{ text: "5‚ÇΩ", callback_data: "casino_5" },
					{ text: "10‚ÇΩ", callback_data: "casino_10" }],
					[{ text: "25‚ÇΩ", callback_data: "casino_25" },
					{ text: "50‚ÇΩ", callback_data: "casino_50" },
					{ text: "100‚ÇΩ", callback_data: "casino_100" },
					{ text: "250‚ÇΩ", callback_data: "casino_250" }],
				]
			}
		});
	}

	if (query.data.startsWith("casino_open")) {
		bot.deleteMessage(message.chat.id, message.message_id)
		var bet = Number(query.data.split("_")[2])
		if (bet > message.user.outbalance) await bot.answerCallbackQuery(query.id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏!', true);
		else if (Math.random() >= 0.58) {
			await message.user.inc("outbalance", bet)
			await bot.answerCallbackQuery(query.id, 'üí∏ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ' + bet * 2 + "‚ÇΩ!", true);
		} else {
			await message.user.inc("outbalance", -bet)
			await bot.answerCallbackQuery(query.id, "üòû –°—É–Ω–¥—É–∫ –ø—É—Å—Ç", true);
		}
		return bot.sendMessage(message.chat.id, `üîí –í—ã–±–µ—Ä–µ—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å—É–Ω–¥—É–∫–∞
üçÄ –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –≤ –¥–≤–∞ —Ä–∞–∑–∞ –±–æ–ª—å—à–µ ‚ÇΩ, –∞ –º–æ–∂–µ—Ç –±—ã—Ç—å, —Å—É–Ω–¥—É–∫ –æ–∫–∞–∂–µ—Ç—Å—è –ø—É—Å—Ç—ã–º
üé≤ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: 50%
					
üí∞ –í–∞—à –∏–≥—Ä–æ–≤–æ–π: ${roundPlus(message.user.outbalance)}‚ÇΩ\n
üí∏ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: ${bet} ‚ÇΩ
üé∞ –í–æ–∑–º–æ–∂–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à: ${bet * 2} ‚ÇΩ`, {
			parse_mode: "HTML",
			reply_markup: {
				inline_keyboard: [
					[{ text: "1‚ÇΩ", callback_data: "casino_1" },
					{ text: "2‚ÇΩ", callback_data: "casino_2" },
					{ text: "5‚ÇΩ", callback_data: "casino_5" },
					{ text: "10‚ÇΩ", callback_data: "casino_10" }],
					[{ text: "25‚ÇΩ", callback_data: "casino_25" },
					{ text: "50‚ÇΩ", callback_data: "casino_50" },
					{ text: "100‚ÇΩ", callback_data: "casino_100" },
					{ text: "250‚ÇΩ", callback_data: "casino_250" }],
					[{ text: "üîì –û—Ç–∫—Ä—ã—Ç—å –∑–∞ " + bet + "‚ÇΩ", callback_data: "casino_open_" + bet }]
				]
			}
		})

	}

	if (query.data.startsWith("casino")) {
		bot.deleteMessage(message.chat.id, message.message_id)
		var bet = Number(query.data.split("_")[1])
		return bot.sendMessage(message.chat.id, `üîí –í—ã–±–µ—Ä–µ—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å—É–Ω–¥—É–∫–∞
üçÄ –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –≤ –¥–≤–∞ —Ä–∞–∑–∞ –±–æ–ª—å—à–µ ‚ÇΩ, –∞ –º–æ–∂–µ—Ç –±—ã—Ç—å, —Å—É–Ω–¥—É–∫ –æ–∫–∞–∂–µ—Ç—Å—è –ø—É—Å—Ç—ã–º
üé≤ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: 50%
					
üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${message.user.outbalance} ‚ÇΩ
üí∏ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: ${bet} ‚ÇΩ
üé∞ –í–æ–∑–º–æ–∂–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à: ${bet * 2} ‚ÇΩ`, {
			parse_mode: "HTML",
			reply_markup: {
				inline_keyboard: [
					[{ text: "1‚ÇΩ", callback_data: "casino_1" },
					{ text: "2‚ÇΩ", callback_data: "casino_2" },
					{ text: "5‚ÇΩ", callback_data: "casino_5" },
					{ text: "10‚ÇΩ", callback_data: "casino_10" }],
					[{ text: "25‚ÇΩ", callback_data: "casino_25" },
					{ text: "50‚ÇΩ", callback_data: "casino_50" },
					{ text: "100‚ÇΩ", callback_data: "casino_100" },
					{ text: "250‚ÇΩ", callback_data: "casino_250" }],
					[{ text: "üîì –û—Ç–∫—Ä—ã—Ç—å –∑–∞ " + bet + "‚ÇΩ", callback_data: "casino_open_" + bet }]
				]
			}
		})
	}

	if (query.data == 'withdraw') {
		if (message.user.buybalance < 0) return bot.answerCallbackQuery(query.id, 'üö´ –î–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–≥–∞—Å–∏—Ç–µ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –ø–æ–∫—É–ø–æ–∫!', true);
		if (message.user.outbalance < 0) return bot.answerCallbackQuery(query.id, 'üö´ –î–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–≥–∞—Å–∏—Ç–µ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –≤—ã–≤–æ–¥–∞!', true);
		if (message.user.outbalance < 10) return bot.answerCallbackQuery(query.id, 'üö´ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 10 —Ä—É–±–ª–µ–π', true);
		bot.deleteMessage(message.chat.id, message.message_id);

		await message.user.set('menu', 'qiwi');
		await bot.sendMessage(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä QIWI –∏–ª–∏ Payeer –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞:\n–ù–∞–ø—Ä–∏–º–µ—Ä: +79184422830 –∏–ª–∏ P1061556700', {
			reply_markup: {
				keyboard: Cancel,
				resize_keyboard: true
			}
		});
	}

	if (query.data == 'reinvest') {
		await message.user.set('menu', 'reinvest');
		bot.deleteMessage(message.chat.id, message.message_id);
		var b = (await User.findOne({ id: 0 })).bhivebalance
		var str = ""
		if (b > 0) str = `üî• <b>–í—Ä–µ–º–µ–Ω–Ω–∞—è –∞–∫—Ü–∏—è: +${b}% - –±–æ–Ω—É—Å –∫ —Ä–µ–∏–Ω–≤–µ—Å—Ç—É</b>\n\n`
		return bot.sendMessage(message.chat.id, `${str}üëâ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å:`, {
			parse_mode: "html",
			reply_markup: {
				keyboard: Cancel,
				resize_keyboard: true
			}
		});
	}
	
	if (query.data == 'reinvests') {
		await message.user.set('menu', 'reinvests');
		bot.deleteMessage(message.chat.id, message.message_id);
		var b = (await User.findOne({ id: 0 })).bhivebalance
		var str = ""
		if (b > 0) str = `üî• <b>–í—Ä–µ–º–µ–Ω–Ω–∞—è –∞–∫—Ü–∏—è: +${b}% - –±–æ–Ω—É—Å –∫ –ø–æ–∫—É–ø–∫–∏ FlashCoin</b>\n\n`
		return bot.sendMessage(message.chat.id, `${str}?? –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –¥–ª—è –ø–æ–∫—É–ø–∫–∏ FlashCoin:`, {
			parse_mode: "html",
			reply_markup: {
				keyboard: Cancel,
				resize_keyboard: true
			}
		});
	}

	if (query.data == 'uplimit') {
		bot.deleteMessage(message.chat.id, message.message_id);
		return bot.sendMessage(message.chat.id, `
üõë <b>–õ–∏–º–∏—Ç –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ü–µ—Ä—Å–æ–Ω–∞–∂–µ–≤ –æ–¥–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è</b>

<b>–í–∞—à –ª–∏–º–∏—Ç:</b> ${message.user.limit} –ü–µ—Ä—Å–æ–Ω–∞–∂–µ–≤
`, {
			parse_mode: "html",
			reply_markup: {
				inline_keyboard: [[{ text: `üîº –ü–æ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç –¥–æ ${message.user.limit + 1} –∑–∞ 10 WAVES`, callback_data: "uplimitBuy" }]]
			}
		})
	}

	if (query.data == 'uplimitBuy') {
		bot.deleteMessage(message.chat.id, message.message_id);
		if (message.user.bhivebalance < 10) return bot.answerCallbackQuery(query.id, `–ù–∞ –í–∞—à–µ–º WAVES –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞`, true);
		await User.findOneAndUpdate({ id: uid }, { $inc: { bhivebalance: -10, limit: 1 } })
		return bot.answerCallbackQuery(query.id, `–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ü–µ—Ä—Å–æ–Ω–∞–∂–µ–≤ –¥–æ ${message.user.limit + 1} –∑–∞ 10 WAVES`, true);
	}

	if (query.data == 'buywaves') {
		await message.user.set('menu', 'buywaves');
		bot.deleteMessage(message.chat.id, message.message_id);
		var price = (await User.findOne({ id: 0 })).totalEarn
		return bot.sendMessage(message.chat.id, `üí≥ <b>1 WAVES = ${price} —Ä—É–±–∏–Ω–æ–≤</b>\nüëâ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ WAVES, –∫–æ—Ç–æ—Ä—ã–µ –í—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:`, {
			parse_mode: "html",
			reply_markup: {
				keyboard: Cancel,
				resize_keyboard: true
			}
		});
	}
	

	if (query.data == 'trees:collect') {
		let total_balance = 0;

		message.user.trees.map((x) => {
			total_balance += (((Date.now() - message.user.lastCollect) / 1000) / 60) * (trees.find((a) => a.id == x.id).earn / 60);
		});

		await message.user.set('lastCollect', Date.now());

		await bot.deleteMessage(message.chat.id, message.message_id);
		await message.user.inc('fetuses', Number(total_balance.toFixed(2)));
		if (message.user.clanName) {
			var clan = await Clan.findOne({ name: message.user.clanName })
			await Clan.findOneAndUpdate({ name: message.user.clanName }, { $inc: { balance: total_balance * (clan.level / 100) } })
		}
		return bot.answerCallbackQuery(query.id, `–í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–ª–∏ ${total_balance.toFixed(2)}  üõ°Ô∏è`, true);
	}

	if (query.data == 'trees:totalMy') {
		let $trees = [];
		let total_earn = 0;

		message.user.trees.map((x) => {
			$trees.push(x.id);
			total_earn += trees.find((a) => a.id == x.id).earn
		});

		let text = ``;
		if ($trees.filter((x) => x === 0).length) text += `\n\n<b>${trees.find((x) => x.id == 0).name}</b>\n\t\t‚ñ´Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${$trees.filter((x) => x === 0).length}\n\t\t‚ñ™Ô∏è  –ó–∞—â–∏—Ç—ã –≤ —á–∞—Å: ${$trees.filter((x) => x === 0).length * trees.find((x) => x.id == 0).earn}`;
		if ($trees.filter((x) => x === 1).length) text += `\n\n<b>${trees.find((x) => x.id == 1).name}</b>\n\t\t‚ñ´Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${$trees.filter((x) => x === 1).length}\n\t\t‚ñ™Ô∏è  –ó–∞—â–∏—Ç—ã –≤ —á–∞—Å: ${$trees.filter((x) => x === 1).length * trees.find((x) => x.id == 1).earn}`;
		if ($trees.filter((x) => x === 2).length) text += `\n\n<b>${trees.find((x) => x.id == 2).name}</b>\n\t\t‚ñ´Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${$trees.filter((x) => x === 2).length}\n\t\t‚ñ™Ô∏è  –ó–∞—â–∏—Ç—ã –≤ —á–∞—Å: ${$trees.filter((x) => x === 2).length * trees.find((x) => x.id == 2).earn}`;
		if ($trees.filter((x) => x === 3).length) text += `\n\n<b>${trees.find((x) => x.id == 3).name}</b>\n\t\t‚ñ´Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${$trees.filter((x) => x === 3).length}\n\t\t‚ñ™Ô∏è  –ó–∞—â–∏—Ç—ã –≤ —á–∞—Å: ${$trees.filter((x) => x === 3).length * trees.find((x) => x.id == 3).earn}`;
		if ($trees.filter((x) => x === 4).length) text += `\n\n<b>${trees.find((x) => x.id == 4).name}</b>\n\t\t‚ñ´Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${$trees.filter((x) => x === 4).length}\n\t\t‚ñ™Ô∏è  –ó–∞—â–∏—Ç—ã –≤ —á–∞—Å: ${$trees.filter((x) => x === 4).length * trees.find((x) => x.id == 4).earn}`;
		if ($trees.filter((x) => x === 5).length) text += `\n\n<b>${trees.find((x) => x.id == 5).name}</b>\n\t\t‚ñ´Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${$trees.filter((x) => x === 5).length}\n\t\t‚ñ™Ô∏è  –ó–∞—â–∏—Ç—ã –≤ —á–∞—Å: ${$trees.filter((x) => x === 5).length * trees.find((x) => x.id == 5).earn}`;
		if ($trees.filter((x) => x === 6).length) text += `\n\n<b>${trees.find((x) => x.id == 6).name}</b>\n\t\t‚ñ´Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${$trees.filter((x) => x === 6).length}\n\t\t‚ñ™Ô∏è  –ó–∞—â–∏—Ç—ã –≤ —á–∞—Å: ${$trees.filter((x) => x === 6).length * trees.find((x) => x.id == 6).earn}`;
		if ($trees.filter((x) => x === 7).length) text += `\n\n<b>${trees.find((x) => x.id == 7).name}</b>\n\t\t‚ñ´Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${$trees.filter((x) => x === 7).length}\n\t\t‚ñ™Ô∏è  –ó–∞—â–∏—Ç—ã –≤ —á–∞—Å: ${$trees.filter((x) => x === 7).length * trees.find((x) => x.id == 7).earn}`;
		if ($trees.filter((x) => x === 8).length) text += `\n\n<b>${trees.find((x) => x.id == 8).name}</b>\n\t\t‚ñ´Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${$trees.filter((x) => x === 8).length}\n\t\t‚ñ™Ô∏è  –ó–∞—â–∏—Ç—ã –≤ —á–∞—Å: ${$trees.filter((x) => x === 8).length * trees.find((x) => x.id == 8).earn}`;

		return bot.editMessageText(`üìÑ –°–ø–∏—Å–æ–∫ –í–∞—à–∏—Ö –ü–µ—Ä—Å–æ–Ω–∞–∂–µ–π: ‚§µÔ∏è${text}\n\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\nüìä –°—É–º–º–∞—Ä–Ω—ã–π –¥–æ—Ö–æ–¥ –ü–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ —á–∞—Å: ${total_earn.toFixed(2)} üõ°Ô∏è`, {
			parse_mode: "HTML",
			chat_id: message.chat.id,
			message_id: message.message_id
		});
	}

	if (query.data == 'checkFollow') {
		let task = await Task.findOne({ id: message.chat.id });
		if (task) return bot.deleteMessage(message.chat.id, message.message_id);

		bot.getChatMember(-1001724841698, message.chat.id).then(async (res) => {
			if (res.status == 'left') return bot.answerCallbackQuery(query.id, 'üö´ –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!');

			message.user.trees.push({
				id: 1,
				date: Date.now(),
				lastCollect: Date.now(),
				health: trees[1].health
			});

			await message.user.save();

			let $task = new Task({
				id: message.chat.id
			});

			await $task.save();

			return bot.editMessageText('–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏–ª–∏ <b>–ú–∏—Ä–Ω–æ–≥–æ –∂–∏—Ç–µ–ª—è</b>.', {
				parse_mode: "HTML",
				chat_id: message.chat.id,
				message_id: message.message_id
			});
		});
	}

	if (query.data.startsWith('withdraw:')) {
		let id = Number(query.data.split('withdraw:')[1]);
		let ticket = await Ticket.findOne({ id });

		if (!ticket) bot.deleteMessage(message.chat.id, message.message_id);
		if (ticket.wallet.indexOf("P") == -1) { // –ü–ª–∞—Ç—ë–∂ —á–µ—Ä–µ–∑ QIWI
			qiwi.toWallet({ account: String(ticket.wallet), amount: ticket.amount, comment: '–í—ã–ø–ª–∞—Ç–∞ –æ—Ç @invest_x_iphone_robot' }, () => { });
			bot.sendMessage("@payments_bota", ` üõ°Ô∏è <a href="tg://user?id=${ticket.id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –≤—ã–≤–µ–ª <b>${ticket.amount}‚ÇΩ</b> —á–µ—Ä–µ–∑ <b>QIWI</b>`, { parse_mode: "HTML" })

	
		}
		else // –ü–ª–∞—Ç—ë–∂ —á–µ—Ä–µ–∑ Payeer
		{
			bot.sendMessage("@payments_bota", ` üõ°Ô∏è <a href="tg://user?id=${ticket.id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –≤—ã–≤–µ–ª <b>${ticket.amount}‚ÇΩ</b> —á–µ—Ä–µ–∑ <b>Payeer</b>`, { parse_mode: "HTML" })

			require('request')({
				method: 'POST',
				url: 'https://payeer.com/ajax/api/api.php',
				headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
				body: `account=${config.payeer.account}&apiId=${config.payeer.apiId}&apiPass=${config.payeer.apiPass}&action=transfer&curIn=RUB&sum=${ticket.amount * 1.01}&curOut=RUB&to=${ticket.wallet}`
			}, async function (error, response, body) {
				body = JSON.parse(body)
			})
		}

		bot.sendMessage(ticket.id, `‚úÖ <b>–í–∞—à–∞ –≤—ã–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞</b>
üí∏ –ù–∞ –í–∞—à ${ticket.wallet.indexOf("P") == -1 ? "QIWI" : "Payeer"} –∑–∞—á–∏—Å–ª–µ–Ω–æ <b>${ticket.amount}‚ÇΩ</b>\n

üôè –ë—É–¥–µ–º –æ—á–µ–Ω—å –ø—Ä–∏–∑–Ω–∞—Ç–µ–ª—å–Ω—ã –∑–∞ –æ—Ç–∑—ã–≤ –æ –±–æ—Ç–µ –∞–¥–º–∏–Ω—É –∏–ª–∏ –≤ —á–∞—Ç
‚ò∫Ô∏è –î–ª—è –Ω–∞—Å —ç—Ç–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ\n
ü§ù <b>–†–∞–¥—ã —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞—Ç—å!</b>
`, {
			parse_mode: "html", reply_markup: {
				inline_keyboard: [
					[{ text: "üë®‚Äçüíª –ê–¥–º–∏–Ω", url: "https://t.me/Licifersss" },
					{ text: "üí¨ –ß–∞—Ç", url: "https://t.me chat_participant" }],
					[{ text: "üí≥ –í—ã–ø–ª–∞—Ç—ã", url: "https://t.me/payments_bota" }],

				]
			}
		});
		await User.findOneAndUpdate({ id: 0 }, { $inc: { fc: ticket.amount } })
		await User.findOneAndUpdate({ id: id }, { $inc: { payout: ticket.amount } })
		await ticket.remove();
		bot.editMessageText('–í—ã–ø–ª–∞—Ç–∏–ª!', {
			chat_id: message.chat.id,
			message_id: message.message_id
		});
	}

	if (query.data.startsWith('back:')) {
		let id = Number(query.data.split('back:')[1]);
		let ticket = await Ticket.findOne({ id });

		if (!ticket) bot.deleteMessage(message.chat.id, message.message_id);

		let user = await User.findOne({ id: ticket.id });
		bot.sendMessage(ticket.id, `–í–∞—à–∞ –≤—ã–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –Ω–∞ –≤–∞—à —Å—á—ë—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ ${ticket.amount}‚ÇΩ`);

		await user.inc('buybalance', ticket.amount);
		await ticket.remove();

		return bot.editMessageText('–í–µ—Ä–Ω—É–ª!', {
			chat_id: message.chat.id,
			message_id: message.message_id
		});
	}

	if (query.data.startsWith('take:')) {
		let id = Number(query.data.split('take:')[1]);
		let ticket = await Ticket.findOne({ id });

		if (!ticket) bot.deleteMessage(message.chat.id, message.message_id);

		await ticket.remove();
		return bot.editMessageText('–ó–∞–±—Ä–∞–ª!', {
			chat_id: message.chat.id,
			message_id: message.message_id
		});
	}
	var d = query.data

	if (d == "clan_create") {
		if (message.user.buybalance < 65)
			return bot.answerCallbackQuery(query.id, `–ù–∞ –í–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è  –ë–∞–Ω–¥–∞!`, true);
		state[uid] = 1601
		bot.deleteMessage(message.chat.id, message.message_id);
		return bot.sendMessage(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –í–∞—à–µ–≥–æ –ö–ª–∞–Ω–∞:', { reply_markup: { keyboard: Cancel, resize_keyboard: true } });
	}

	if (d == "clan_payin") {
		var clan = await Clan.findOne({ name: message.user.clanName })
		if (!clan) return bot.answerCallbackQuery(query.id, `–û—à–∏–±–∫–∞!`, true);
		state[uid] = 160101
		bot.deleteMessage(message.chat.id, message.message_id);
		return bot.sendMessage(message.chat.id, `üí≥ <b>–í–∞—à –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π:</b> ${message.user.buybalance}‚ÇΩ\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –í–∞—à–µ–π  –ë–∞–Ω–¥–∞:`, { parse_mode: "html", reply_markup: { keyboard: Cancel, resize_keyboard: true } });
	}
	if (d == "clan_admin") {
		var clan = await Clan.findOne({ name: message.user.clanName })
		var members = await User.find({ id: { $ne: uid }, clanName: clan.name })
		if (uid != clan.creator_id && uid != clan.zam_id) return bot.answerCallbackQuery(query.id, `–û—à–∏–±–∫–∞!`, true);
		bot.deleteMessage(message.chat.id, message.message_id);
		return bot.sendMessage(message.chat.id, `
<b>–í–∞—à  –ë–∞–Ω–¥:</b> ${clan.name}
		
<b>–£—á–∞—Å—Ç–Ω–∏–∫–∏  –ö–ª–∞–Ω–∞:</b>
<a href="tg://user?id=${uid}">${clan.creator_name}</a> | ${message.user.totalEarn}  üõ°Ô∏è/—á–∞—Å | ID: <code>${uid}</code>
${members.map(m => { return `${m.id == clan.zam_id ? `üë®‚Äç‚öïÔ∏è <b>–í–∞—à –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å: </b>` : ""}<a href="tg://user?id=${m.id}">${m.name}</a> | ${m.totalEarn}  üõ°Ô∏è/—á–∞—Å | ID: <code>${m.id}</code>` }).join("\n")}
<b>–î–æ—Ö–æ–¥ –∫–∞–∑–Ω—ã:</b> ${clan.level}%
<b>–í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤ –≤  –ö–ª–∞–Ω–µ:</b> ${members.length + 1} –∏–∑ ${clan.maxMembers}
<b>–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å  –ö–ª–∞–Ω–∞:</b> ${roundPlus(clan.total_earn)}  üõ°Ô∏è/—á–∞—Å
<b>–í –∫–∞–∑–Ω–µ:</b> ${roundPlus(clan.balance)}  üõ°Ô∏è
<b>–ù–∞ –±–∞–ª–∞–Ω—Å–µ:</b> ${roundPlus(clan.bal)}‚ÇΩ\n
<b>–ö–æ–º–∞–Ω–¥—ã –≥–ª–∞–≤—ã:</b>
–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤  –ö–ª–∞–Ω - <code>/invite [id]</code>
–í—ã–≥–Ω–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑  –ö–ª–∞–Ω–∞ - <code>/kick [id]</code>
–ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—è - <code>/invitezam [id]</code>
–£–±—Ä–∞—Ç—å –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—è - <code>/removezam</code>
–£–¥–∞–ª–∏—Ç—å –ö–ª–∞–Ω - <code>/removeGuestHouse</code>
`, {
			parse_mode: "html", reply_markup: {
				inline_keyboard: [
					[{ text: "1‚É£ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –∫–∞–∑–Ω—É —Å–µ–±–µ", callback_data: "clan_transferMe" }],
					[{ text: "2‚É£ –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–∑–Ω—É", callback_data: "clan_transferAll" }],
					[{ text: `3‚É£ –†–∞—Å—à–∏—Ä–∏—Ç—å –ö–ª–∞–Ω –¥–æ ${clan.maxMembers + 10} –º–µ—Å—Ç (65 —Ä—É–±–ª–µ–π)`, callback_data: "clan_expand" }],
					[{ text: `4Ô∏è‚É£ –ü–æ–≤—ã—Å–∏—Ç—å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∫–∞–∑–Ω—ã –¥–æ ${clan.level + 1}% (${(clan.level+1) * 50} —Ä—É–±–ª–µ–π)`, callback_data: "clan_upLevel" }],
				]
			}
		});
	}
	if (d == "clan_transferMe") {
		var clan = await Clan.findOne({ name: message.user.clanName })
		var members = await User.find({ id: { $ne: uid }, clanName: clan.name })
		if (uid != clan.creator_id && uid != clan.zam_id) return bot.answerCallbackQuery(query.id, `–û—à–∏–±–∫–∞!`, true);
		if (clan.balance == 0) return bot.answerCallbackQuery(query.id, `–ö–∞–∑–Ω–∞  –ö–ª–∞–Ω–∞ –Ω—É–ª–µ–≤–∞—è!`, true);
		bot.deleteMessage(message.chat.id, message.message_id);
		await Clan.findOneAndUpdate({ name: clan.name }, { balance: 0 })
		await User.findOneAndUpdate({ id: uid }, { $inc: { buybalance: (clan.balance / 2000), outbalance: (clan.balance / 2000) } })
		return bot.sendMessage(message.chat.id, `<b>${clan.balance}  üõ°Ô∏è  Coins</b> –∏–∑ –∫–∞–∑–Ω—ã  –ö–ª–∞–Ω–∞ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –í–∞–º –∫–∞–∫ <b>${roundPlus(clan.balance / 2000)}‚ÇΩ</b> –Ω–∞ –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –∏ <b>${roundPlus(clan.balance / 2000)}‚ÇΩ</b> –Ω–∞ –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞`, { parse_mode: "html" });
	}
	if (d == "clan_transferAll") {
		var clan = await Clan.findOne({ name: message.user.clanName })
		var members = await User.find({ clanName: clan.name })
		if (uid != clan.creator_id && uid != clan.zam_id) return bot.answerCallbackQuery(query.id, `–û—à–∏–±–∫–∞!`, true);
		if (clan.balance == 0) return bot.answerCallbackQuery(query.id, `–ö–∞–∑–Ω–∞  –ö–ª–∞–Ω–∞ –Ω—É–ª–µ–≤–∞—è!`, true);
		bot.deleteMessage(message.chat.id, message.message_id);
		await Clan.findOneAndUpdate({ name: clan.name }, { balance: 0 })
		var dole = clan.balance / members.length / 2000
		for (const i in members) {
			try {
				await User.findOneAndUpdate({ id: members[i].id }, { $inc: { buybalance: dole, outbalance: dole } })
				await bot.sendMessage(members[i].id, `<b>${roundPlus(clan.balance)}  üõ°Ô∏è  Coins</b> –∏–∑ –∫–∞–∑–Ω—ã –ö–ª–∞–Ω–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏  –ë–∞–Ω–¥–∞\n–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>${roundPlus(dole)}‚ÇΩ</b> –Ω–∞ –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –∏ <b>${roundPlus(dole)}‚ÇΩ</b> –Ω–∞ –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞`, { parse_mode: "html" });
			}
			catch { }
		}
	}
	if (d == "clan_expand") {
		var clan = await Clan.findOne({ name: message.user.clanName })
		if (uid != clan.creator_id && uid != clan.zam_id) return bot.answerCallbackQuery(query.id, `–û—à–∏–±–∫–∞!`, true);
		if (clan.bal < 65) return bot.answerCallbackQuery(query.id, `–ù–∞ –±–∞–ª–∞–Ω—Å–µ  –ö–ª–∞–Ω–∞ –Ω–µ–¥–æ—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!`, true);
		bot.deleteMessage(message.chat.id, message.message_id);
		await Clan.findOneAndUpdate({ name: clan.name }, { $inc: { maxMembers: 10, bal: -65 } })
		await bot.sendMessage(uid, `–í—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ä–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –≤  –ö–ª–∞–Ω–µ –¥–æ ${clan.maxMembers + 10}`, { parse_mode: "html" });

	}
	if (d == "clan_upLevel") {
		var clan = await Clan.findOne({ name: message.user.clanName })
		if (uid != clan.creator_id && uid != clan.zam_id) return bot.answerCallbackQuery(query.id, `–û—à–∏–±–∫–∞!`, true);
		if (clan.level >= 20) return bot.answerCallbackQuery(query.id, `–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∫–∞–∑–Ω—ã!`, true);
		var price = (clan.level+1) * 50
		if (clan.bal < price) return bot.answerCallbackQuery(query.id, `–ù–∞ –±–∞–ª–∞–Ω—Å–µ  –ö–ª–∞–Ω–∞ –Ω–µ–¥–æ—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!`, true);
		bot.deleteMessage(message.chat.id, message.message_id);
		await Clan.findOneAndUpdate({ name: clan.name }, { $inc: { level: 1, bal: -price } })
		await bot.sendMessage(uid, `–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–≤—ã—Å–∏–ª–∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∫–∞–∑–Ω—ã  –ö–ª–∞–Ω–∞ –¥–æ ${clan.level + 1}%`, { parse_mode: "html" });

	}
	if (d.startsWith("clanAccept")) {
		var clan = await Clan.findOne({ _id: d.split("_")[1] })
		var members = await User.find({ clanName: clan.name })
		if (members.length > clan.maxMembers - 1) return bot.answerCallbackQuery(query.id, `–í  –ö–ª–∞–Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –º–µ—Å—Ç–∞!`, true);
		bot.deleteMessage(message.chat.id, message.message_id);
		await User.findOneAndUpdate({ id: uid }, { clanName: clan.name })
		await bot.sendMessage(uid, `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤  –ö–ª–∞–Ω <b>${clan.name}</b>\n–ù–∞–∂–º–∏—Ç–µ /leave_clan, —á—Ç–æ–±—ã –ø–æ–∫–∏–Ω—É—Ç—å  –ö–ª–∞–Ω`, { parse_mode: "html" });
		bot.sendMessage(clan.creator_id, `‚ûï –í –≤–∞—à  –ö–ª–∞–Ω –≤—Å—Ç—É–ø–∏–ª <a href="tg://user?id=${uid}">–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>\n–í–≤–µ–¥–∏—Ç–µ <code>/kick ${uid}</code>, —á—Ç–æ–±—ã –≤—ã–≥–Ω–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑  –ë–∞–Ω–¥—ã`, { parse_mode: "html" });
		totalClanEarnCalc()
	}
	if (d == "clanDecline") {
		bot.sendMessage(uid,`  ‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤  –ö–ª–∞–Ω`, { parse_mode: "html" });
	}

	if (d == "clan_top") {
		var clans = await Clan.find({ $and: [{ name: { $ne: "." } }, { name: { $ne: "dsfsdf" } }] }).sort({ total_earn: -1 }).limit(5)
		bot.deleteMessage(message.chat.id, message.message_id);
		if (clans.length == 5)
			return bot.sendMessage(message.chat.id, `
<b>üèÜ –¢–û–ü 5 –ö–ª–∞–Ω–æ–≤ üî±</b>

üëë ${clans[0].name} | ${clans[0].total_earn}  üõ°Ô∏è

2‚É£ ${clans[1].name} | ${clans[1].total_earn}  üõ°Ô∏è

3‚É£${clans[2].name} | ${clans[2].total_earn}  üõ°Ô∏è

4‚É£ ${clans[3].name} | ${clans[3].total_earn}  üõ°Ô∏è

5‚É£ ${clans[4].name} | ${clans[4].total_earn}  üõ°Ô∏è`, { parse_mode: "html" });
		else
			return bot.sendMessage(message.chat.id, `<b>üèÜ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ  –ö–ª–∞–Ω–æ–≤ –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–æ–ø–∞</b>`, { parse_mode: "html" });

	}
	if (d == "clan_status") {
		var clans = await Clan.find({ $and: [{ name: { $ne: "." } }, { name: { $ne: "dsfsdf" } }] }).sort({ total_earn: -1 }).limit(5)
		bot.deleteMessage(message.chat.id, message.message_id);
		var ost = Math.ceil((getNextClanWarTimestamp() - (new Date()).getTime()) / (1000 * 60 * 60 * 24))
		if (clans.length == 5)
			return bot.sendMessage(message.chat.id, `
<b> üõ°Ô∏è –ë–∏—Ç–≤–∞  –ö–ª–∞–Ω–æ–≤</b>

üïí –ë–∏—Ç–≤–∞  –ö–ª–∞–Ω–æ–≤ –ø—Ä–æ—Ö–æ–¥–∏—Ç 5, 15 –∏ 25-–≥–æ —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞!
üèÜ  –ö–ª–∞–Ω-–ø–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç <b> üõ°Ô∏è 50k  Coins</b> –≤ —Å–≤–æ—é –∫–∞–∑–Ω—É
–ó–∞ 2 –º–µ—Å—Ç–æ - <b> üõ°Ô∏è 25k  Coins</b>
–ó–∞ 3 –º–µ—Å—Ç–æ - <b> üõ°Ô∏è 15k  Coins</b>

<b>–î–æ —Å–ª–µ–¥—É—é—â–µ–π –±–∏—Ç–≤—ã:</b> ${ost} –¥–Ω–µ–π
		
<b>üîù –¢–æ–ø  –ö–ª–∞–Ω–æ–≤ —Ç–µ–∫—É—â–µ–π –±–∏—Ç–≤—ã üîù</b>
		
1. ${clans[0].name} - ${clans[0].total_earn}  üõ°Ô∏è –≤ —á–∞—Å
2. ${clans[1].name} - ${clans[1].total_earn}  üõ°Ô∏è –≤ —á–∞—Å
3. ${clans[2].name} - ${clans[2].total_earn}  üõ°Ô∏è –≤ —á–∞—Å
`, { parse_mode: "html" });
		else
			return bot.sendMessage(message.chat.id, `<b>üèÜ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ  –∫–ª–∞–Ω–æ–≤ –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–æ–ø–∞</b>`, { parse_mode: "html" });
	}


	if (ADMINS.indexOf(query.from.id) !== -1) {
		if (d == "admin_mm") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:\n\n<i>–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏ –≤ —Ä–∞—Å—Å—ã–ª–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ–Ω–µ—Ü —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞:</i>\n# –¢–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ # http://t.me/link #', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 7770
		} else if (d == "admin_w") {
			bot.deleteMessage(message.chat.id, message.message_id);
			let tickets = await Ticket.find();
			if (tickets.length == 0) return bot.sendMessage(uid, '–ó–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ –Ω–µ—Ç');
			await tickets.map((x) => {
				bot.sendMessage(uid, `üìù –ò–≥—Ä–æ–∫: <a href="tg://user?id=${x.id}">–ò–≥—Ä–æ–∫</a> (ID: <code>${x.id}</code>)\n
	üí∞ –°—É–º–º–∞: <code>${x.amount}</code>‚ÇΩ
	ü•ù –ö–æ—à–µ–ª—ë–∫: <code>${x.wallet}</code>`, {
					parse_mode: "HTML", reply_markup: { inline_keyboard: [[{ text: 'üì≠ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É', callback_data: `withdraw:${x.id}` }], [{ text: '‚ôªÔ∏è –í–µ—Ä–Ω—É—Ç—å', callback_data: `back:${x.id}` }], [{ text: 'üö´ –ó–∞–±—Ä–∞—Ç—å', callback_data: `take:${x.id}` }]] }
				});
			});
		}
		else if (d.startsWith("admin_bm")) {
			bot.deleteMessage(message.chat.id, message.message_id);
			var bm = JSON.parse((await User.findOne({ id: 1 })).menu)
			if (d.split("_")[2] == "false") bm.status = false
			if (d.split("_")[2] == "true") bm.status = true
			await User.updateOne({ id: 1, menu: JSON.stringify(bm) })
			console.log(bm)
			bot.sendMessage(uid, `–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞–±—Ä–∏–∫–∏:\n
–°—Ç–æ–∏–º–æ—Å—Ç—å: ${bm.price} —Ä—É–±–ª–µ–π
–°—Ç–∞—Ç—É—Å: ${bm.status ? "‚úÖ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏" : "‚ùå –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏"}
–î–æ—Å—Ç—É–ø–Ω–æ: ${bm.count}
–ö—É–ø–ª–µ–Ω–æ: ${bm.bought}
`, {
				reply_markup: {
					inline_keyboard: [
						[{ text: '–í—ã–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–±—Ä–∏–∫—É', callback_data: `Admin_bm_new` }],
						[{ text: '–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å', callback_data: `Admin_bm_price` }],
						[{ text: '–ò–∑–º–µ–Ω–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö', callback_data: `Admin_bm_count` }],
						[{ text: (bm.status ? '–°–¥–µ–ª–∞—Ç—å –Ω–µ–ø–æ—Å—Ç—É–ø–Ω–æ–π' : "–°–¥–µ–ª–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ–π"), callback_data: (bm.status ? 'admin_bm_false' : "admin_bm_true") }],
						[{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "admin_return" }],
					]
				}, parse_mode: "HTML"
			})
		}
		else if (d == "admin_top") {
			bot.deleteMessage(message.chat.id, message.message_id);
			var u = await User.find({ ref: { $ne: 0 }, _id: { $gt: mongo.Types.ObjectId.createFromTime(Date.now() / 1000 - 24 * 60 * 60) } })
			console.log(u)
			var top = []
			u.map((e) => {
				var t = top.filter(u => { if (e.ref == u.id) return true; else return false })
				if (t.length == 0) top.push({ id: e.ref, ref: 1 })
				else {
					top = top.filter(u => { if (e.ref == u.id) return false; else return true })
					top.push({ id: e.ref, ref: t[0].ref + 1 })
				}
			})
			top = top.sort((a, b) => { if (a.ref <= b.ref) return 1; else return -1 })
			top.length = 20
			var str = `<b>üïí –¢–æ–ø —Ä–µ—Ñ–æ–≤–æ–¥–æ–≤ –∑–∞ 24 —á–∞—Å–∞:</b>\n\n`
			for (const i in top) {
				var us = await User.findOne({ id: top[i].id })
				str += `<b>${Number(i) + 1})</b> <a href="tg://user?id=${us.id}">${us.name ? us.name : "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"}</a> - <b>${top[i].ref}</b> —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n`
			}
			bot.sendMessage(uid, str, { reply_markup: { inline_keyboard: [[{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "admin_return" }]] }, parse_mode: "HTML" })
		}
		else if (d == "Admin_bm_new") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–±—Ä–∏–∫ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ (—á–∏—Å–ª–æ –∫—É–ø–∏–≤—à–∏—Ö –æ–±–Ω—É–ª–∏—Ç—Å—è, –∏ —Ñ–∞–±—Ä–∏–∫–∏ —Å—Ç–∞–Ω—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ —Ç–µ–∫—É—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ –ø—Ä–æ–ø–∞–¥—É—Ç —Å –ø–æ–∫—É–ø–∫–∏, –∫–æ–≥–¥–∞ —á–∏—Å–ª–æ –∫—É–ø–∏–≤—à–∏—Ö –ø—Ä–∏–≤—ã—Å–∏—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ):', { reply_markup: { inline_keyboard: [[{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "admin_bm" }]] }, parse_mode: "HTML" })
			state[uid] = 77771
		}
		else if (d == "Admin_bm_price") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ñ–∞–±—Ä–∏–∫–∏ –≤ —Ä—É–±–ª—è—Ö:', { reply_markup: { inline_keyboard: [[{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "admin_bm" }]] }, parse_mode: "HTML" })
			state[uid] = 77772
		}
		else if (d == "Admin_bm_count") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–±—Ä–∏–∫:', { reply_markup: { inline_keyboard: [[{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "admin_bm" }]] }, parse_mode: "HTML" })
			state[uid] = 77773
		}
		else if (d == "admin_b") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ % –¥–ª—è –±–æ–Ω—É—Å–∞ –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é –∏–ª–∏ 0 –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 7771
		}
		if (query.data == "wipe") {
    await User.updateMany({ trees: [], buybalance: 0, outbalance: 0, deposit: 0, payout: 0, bhivebalance: 0 })
    await WildBee.updateMany({ creator_id: uid }, { level: 1 })
    bot.editMessageText('–ë–æ—Ç –æ–±–Ω—É–ª–µ–Ω —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º!', { chat_id: uid, message_id: message.message_id, parse_mode: html })
   }
		else if (d == "admin_br") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ % –¥–ª—è –±–æ–Ω—É—Å–∞ –∫ —Ä–µ–∏–Ω–≤–µ—Å—Ç—É –∏–ª–∏ 0 –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 77712
		}
		else if (d == "admin_bi") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ % –¥–ª—è –±–æ–Ω—É—Å–∞ –∫ –≤—ã–≤–æ–¥—É –∏–ª–∏ 0 –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 777122289
		}
		else if (d == "admin_waves") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å WAVES –≤ —Ä—É–±–∏–Ω–∞—Ö:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 777122
		}
		else if (d == "a_voucherpromo") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í—ã–±–µ—Ä–∏ –±–∞–ª–∞–Ω—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ', { reply_markup: RM_promo, parse_mode: "HTML" })
		}
		else if (d == "voucherbuy") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–≤–µ–¥–∏ —Å—É–º–º—É', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 99999
		}
		else if (d == "voucherout") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–≤–µ–¥–∏ —Å—É–º–º—É', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 10000
		}
		else if (d == "admin_weather") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í—ã–±–µ—Ä–µ—Ç–µ –ø–æ–≥–æ–¥—É:', {
				reply_markup: {
					inline_keyboard: [
						[{ text: "üåß –î–æ–∂–¥—å (+5% –∫ –¥–æ—Ö–æ–¥—É)", callback_data: "admin_weatherSet_0" }],
						[{ text: "‚òÅÔ∏è –ü–∞—Å–º—É—Ä–Ω–æ (+2% –∫ –¥–æ—Ö–æ–¥—É)", callback_data: "admin_weatherSet_1" }],
						[{ text: "‚òÄÔ∏è –°–æ–ª–Ω–µ—á–Ω–æ (-2% –∫ –¥–æ—Ö–æ–¥—É)", callback_data: "admin_weatherSet_2" }],
						[{ text: "üî• –ó–Ω–æ–π–Ω–∞—è –∂–∞—Ä–∞ (-5% –∫ –¥–æ—Ö–æ–¥—É)", callback_data: "admin_weatherSet_3" }],
						[{ text: "üå¶ –£–º–µ—Ä–µ–Ω–Ω–∞—è (–æ–±—ã—á–Ω–∞—è –¥–æ—Ö–æ–¥—É)", callback_data: "admin_weatherSet_4" }],
						[{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "admin_return" }]
					]
				}, parse_mode: "HTML"
			})
		}
		else if (~d.indexOf("admin_weatherSet")) {
			bot.deleteMessage(message.chat.id, message.message_id);
			var w = Number(d.split("_")[2])
			bot.sendMessage(uid, '–°–±–æ—Ä –∏—Å–∫–æ–ø–∞–µ–º—ã—Ö —É –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤...', { parse_mode: "HTML" })
			await collectAllUsers()
			await setWeather(w)
			bot.sendMessage(uid, '–ü–æ–≥–æ–¥–∞ –∏–∑–º–µ–Ω–µ–Ω–∞!', { reply_markup: RM_admin_return, parse_mode: "HTML" })

		}
		
		else if (d == "admin_limit") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ü–µ—Ä—Å–æ–Ω–∞–∂–µ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 7771222
		}

		else if (d == "admin_u") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 7772
		}
		else if (d.split("_")[0] == "addBuyBal") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 7773
			data[uid] = d.split("_")[1]
		}
		else if (d.split("_")[0] == "adminsendmsg") {
   bot.deleteMessage(message.chat.id, message.message_id);
   bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ , –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
   state[uid] = 111222
   data[uid] = d.split("_")[1]
  }
		else if (d.split("_")[0] == "addOutBal") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 7774
			data[uid] = d.split("_")[1]
		}
		else if (d.split("_")[0] == "addBHIVEBal") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è WAVES –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 77745
			data[uid] = d.split("_")[1]
		}
		else if (d.split("_")[0] == "addPayIns") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 777455
			data[uid] = d.split("_")[1]
		}
		else if (d.split("_")[0] == "addPayOuts") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å—É–º–º—É –≤—ã–≤–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 77745555
			data[uid] = d.split("_")[1]
		}
		else if (d.split("_")[0] == "editBuyBal") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 7775
			data[uid] = d.split("_")[1]
		}
		else if (d.split("_")[0] == "editOutBal") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 7776
			data[uid] = d.split("_")[1]
		}
		else if (d.split("_")[0] == "editBHIVEBal") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π WAVES –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 77765
			data[uid] = d.split("_")[1]
		}
		else if (d.split("_")[0] == "editPayIns") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 777655
			data[uid] = d.split("_")[1]
		}
		else if (d.split("_")[0] == "editPayOuts") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –≤—ã–≤–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 77765555
			data[uid] = d.split("_")[1]
		}
		else if (d.split("_")[0] == "giveTree") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í—ã–±–µ—Ä–µ—Ç–µ –ü–µ—Ä—Å–æ–Ω–∞–∂–µ–≤–æ –¥–ª—è –≤—ã–¥–∞—á–∏:', { reply_markup: { inline_keyboard: [[{ text: trees[0].name, callback_data: "giveTree2_" + d.split("_")[1] + "_0" }], [{ text: trees[1].name, callback_data: "giveTree2_" + d.split("_")[1] + "_1" }], [{ text: trees[2].name, callback_data: "giveTree2_" + d.split("_")[1] + "_2" }], [{ text: trees[3].name, callback_data: "giveTree2_" + d.split("_")[1] + "_3" }], [{ text: trees[4].name, callback_data: "giveTree2_" + d.split("_")[1] + "_4" }], [{ text: trees[5].name, callback_data: "giveTree2_" + d.split("_")[1] + "_5" }], [{ text: trees[6].name, callback_data: "giveTree2_" + d.split("_")[1] + "_6" }], [{ text: trees[7].name, callback_data: "giveTree2_" + d.split("_")[1] + "_7" }]] }, parse_mode: "HTML" })
		}

		else if (d.split("_")[0] == "giveTree2") {
			bot.deleteMessage(message.chat.id, message.message_id);
			giveTree(Number(d.split("_")[1]), Number(d.split("_")[2]))
			bot.sendMessage(Number(d.split("_")[1]), '–í–∞–º –≤—ã–¥–∞–Ω–æ –ü–µ—Ä—Å–æ–Ω–∞–∂–µ–≤–æ: ' + trees[Number(d.split("_")[2])].name, { rparse_mode: "HTML" })
			bot.sendMessage(uid, `${trees[Number(d.split("_")[2])].name} –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é`, { reply_markup: RM_admin_return, parse_mode: "HTML" })
		}
		else if (d.split("_")[0] == "takeTree") {
			bot.deleteMessage(message.chat.id, message.message_id);
			var id = Number(d.split("_")[1])
			var u = await User.findOne({ id })
			var keyboard = { inline_keyboard: [] }
			for (var i = 0; i < u.trees.length; i++) {
				var tree = u.trees[i]
				console.log(tree)
				keyboard.inline_keyboard.push([{ text: trees.find((x) => x.id == tree.id).name, callback_data: "takeTree2_" + id + "_" + i }])
			}
			bot.sendMessage(uid, '–í—ã–±–µ—Ä–µ—Ç–µ –ü–µ—Ä—Å–æ–Ω–∞–∂–µ–≤–æ, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–Ω—è—Ç—å:', { reply_markup: keyboard, parse_mode: "HTML" })
		}
		else if (d.split("_")[0] == "takeTree2") {
			bot.deleteMessage(message.chat.id, message.message_id);
			var id = Number(d.split("_")[1])
			var i = Number(d.split("_")[2])
			var u = await User.findOne({ id })
			u.trees.splice(i, 1)
			await User.findOneAndUpdate({ id }, { trees: u.trees })
			bot.sendMessage(uid, '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–∞–ª–∏ –ü–µ—Ä—Å–æ–Ω–∞–∂–µ–≤–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!', { reply_markup: { inline_keyboard: [[{ text: "–ù–∞–∑–∞–¥", callback_data: "takeTree_" + id }]] }, parse_mode: "HTML" })
		}

		else if (d == "a_voucher") {
            console.log(trees[0])
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í—ã–±–µ—Ä–µ—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞:', { reply_markup: { inline_keyboard: [[{ text: trees[0].name, callback_data: "voucher_0" }], [{ text: trees[1].name, callback_data: "voucher_1" }], [{ text: trees[2].name, callback_data: "voucher_2" }], [{ text: trees[3].name, callback_data: "voucher_3" }], [{ text: trees[4].name, callback_data: "voucher_4" }], [{ text: trees[5].name, callback_data: "voucher_5" }], [{ text: trees[6].name, callback_data: "voucher_6" }], [{ text: trees[7].name, callback_data: "voucher_7" }], [{ text: trees[8].name, callback_data: "voucher_8" }]] }, parse_mode: "HTML" })
		}
		else if (d.split("_")[0] == "voucher") {
			bot.deleteMessage(message.chat.id, message.message_id);
			var cid = generateID(8)
			await Voucher.insertMany({ id: cid, tree_id: Number(d.split("_")[1]) })
			bot.sendMessage(uid, `–ß–µ–∫ —Å–æ–∑–¥–∞–Ω:\nhttps://t.me/SanAndreas_inv_bot?start=C${cid}`, { reply_markup: RM_admin_return })
		}
		else if (d == "admin_mm_stop") {
			var tek = Math.round((mm_i / mm_total) * 40)
			var str = ""
			for (var i = 0; i < tek; i++) str += "+"
			str += '>'
			for (var i = tek + 1; i < 41; i++) str += "-"
			mm_status = false;
			bot.editMessageText("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!", { chat_id: mm_achatid, message_id: mm_amsgid })
			mm_u = []
		}
		else if (d == "admin_mm_pause") {
			var tek = Math.round((mm_i / mm_total) * 40)
			var str = ""
			for (var i = 0; i < tek; i++) str += "+"
			str += '>'
			for (var i = tek + 1; i < 41; i++) str += "-"
			bot.editMessageText("<b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ:</b> " + mm_i + '/' + mm_total + ' - ' + Math.round((mm_i / mm_total) * 100) + '%\n' + str + "\n\n<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n<b>–£—Å–ø–µ—à–Ω—ã—Ö:</b> " + mm_ok + "\n<b>–ù–µ—É—Å–ø–µ—à–Ω—ã—Ö:</b> " + mm_err, { chat_id: mm_achatid, message_id: mm_amsgid, reply_markup: RM_mm2, parse_mode: html })
			mm_status = false;
		}
		else if (d == "admin_mm_play") {
			mm_status = true;
			bot.editMessageText("–í—ã–ø–æ–ª–Ω–µ–Ω–æ: " + mm_i + '/' + mm_total + ' - ' + Math.round((mm_i / mm_total) * 100) + '%\n', { chat_id: mm_achatid, message_id: mm_amsgid, reply_markup: RM_mm1 })
		}
		else if (d.split("_")[0] == "ban") {
      var uuid = Number(d.split("_")[1])
      await User.findOneAndUpdate({ id: uuid }, { ban: true })
      bot.editMessageText('<a href="tg://user?id=' + uuid + '">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!', { chat_id: uid, message_id: message.message_id, parse_mode: html })
      bot.sendMessage("@payments_bota", ` <a href="tg://user?id=${uuid}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!`, { parse_mode: "HTML" })
    }
    else if (d.split("_")[0] == "unban") {
      var uuid = Number(d.split("_")[1])
      await User.findOneAndUpdate({ id: uuid }, { ban: false })
      bot.editMessageText('<a href="tg://user?id=' + uuid + '">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> —Ä–∞–∑–±–∞–Ω–µ–Ω!', { chat_id: uid, message_id: message.message_id, parse_mode: html })
      bot.sendMessage("@payments_bota", ` <a href="tg://user?id=${uuid}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!`, { parse_mode: "HTML" })
      }
      else if (d.split("_")[0] == "adminwipe") {
      var uuid = Number(d.split("_")[1])
      await User.findOneAndUpdate({ id: uuid }, { trees: [], buybalance: 0, outbalance: 0, deposit: 0, payout: 0, bhivebalance: 0, frigbalance: 0 })
    await WildBee.findOneAndUpdate({ creator_id: uid }, { level: 1 })
    bot.sendMessage(data[uuid], '–í—ã –±—ã–ª–∏ –æ–±–Ω—É–ª–µ–Ω—ã —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º!', { parse_mode: "HTML" })
      bot.editMessageText('<a href="tg://user?id=' + uuid + '">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –æ–±–Ω—É–ª–µ–Ω!', { chat_id: uid, message_id: message.message_id, parse_mode: html })
      bot.sendMessage("@payments_bota", ` <a href="tg://user?id=${uuid}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –æ–±–Ω—É–ª–µ–Ω!`, { parse_mode: "HTML" })
    }
		else if (d == "admin_return") {
			bot.deleteMessage(message.chat.id, message.message_id);
			var h = process.uptime() / 3600 ^ 0
			var m = (process.uptime() - h * 3600) / 60 ^ 0
			var s = process.uptime() - h * 3600 - m * 60 ^ 0
			var heap = process.memoryUsage().rss / 1048576 ^ 0
			var b = (await User.findOne({ id: 0 })).deposit
			return qiwi.getBalance(async (err, balance) => {
				bot.sendMessage(uid, '<b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:</b>\n\n<b>–ê–ø—Ç–∞–π–º –±–æ—Ç–∞:</b> ' + h + ' —á–∞—Å–æ–≤ ' + m + ' –º–∏–Ω—É—Ç ' + s + ' —Å–µ–∫—É–Ω–¥\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: </b>' + (await User.countDocuments({})) + '\n<b>–ü–∞–º—è—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</b> ' + heap + "–ú–ë\n<b>–ó–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥:</b> " + await Ticket.countDocuments() + "\n<b>–ë–∞–ª–∞–Ω—Å QIWI:</b> " + balance.accounts[0].balance.amount + "‚ÇΩ\n<b>–ë–æ–Ω—É—Å –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é:</b> " + b + "%", { parse_mode: "HTML", reply_markup: RM_admin })
			})
		}
    
	}
});

var state = []


User.prototype.inc = function (field, value = 1) {
	this[field] += value;
	return this.save();
}

User.prototype.dec = function (field, value = 1) {
	this[field] -= value;
	return this.save();
}

User.prototype.set = function (field, value) {
	this[field] = value;
	return this.save();
}

function getNavigationIcon(id, tree_id) {
	if (id == tree_id) return 'üîµ';
	else {
		if (id == 0) return '1Ô∏è‚É£';
		if (id == 1) return '2Ô∏è‚É£';
		if (id == 2) return '3Ô∏è‚É£';
		if (id == 3) return '4Ô∏è‚É£';
		if (id == 4) return '5Ô∏è‚É£';
		if (id == 5) return '6Ô∏è‚É£';
		if (id == 6) return '7Ô∏è‚É£';
		if (id == 7) return '8Ô∏è‚É£';
		if (id == 8) return '9Ô∏è‚É£';
	}
}

function getNavigationQuery(id, tree_id) {
	if (id == tree_id) return 'none';
	else {
		if (id == 0) return 'trees:shop0';
		if (id == 1) return 'trees:shop1';
		if (id == 2) return 'trees:shop2';
		if (id == 3) return 'trees:shop3';
		if (id == 4) return 'trees:shop4';
		if (id == 5) return 'trees:shop5';
		if (id == 6) return 'trees:shop6';
		if (id == 7) return 'trees:shop7';
		if (id == 8) return 'trees:shop8';
	}
}

function getInventoryIcon(id, tree_id) {
	if (id == tree_id) return 'üî¥';
	else {
		if (id == 0) return '1Ô∏è‚É£';
		if (id == 1) return '2Ô∏è‚É£';
		if (id == 2) return '3Ô∏è‚É£';
		if (id == 3) return '4Ô∏è‚É£';
		if (id == 4) return '5Ô∏è‚É£';
		if (id == 5) return '6Ô∏è‚É£';
		if (id == 6) return '7Ô∏è‚É£';
		if (id == 7) return '8Ô∏è‚É£';
		if (id == 8) return '9Ô∏è‚É£';
	}
}

function getInventoryQuery(id, tree_id) {
	if (id == tree_id) return 'none';
	else {
		if (id == 0) return 'trees:inv0';
		if (id == 1) return 'trees:inv1';
		if (id == 2) return 'trees:inv2';
		if (id == 3) return 'trees:inv3';
		if (id == 4) return 'trees:inv4';
		if (id == 5) return 'trees:inv5';
		if (id == 6) return 'trees:inv6';
		if (id == 7) return 'trees:inv7';
		if (id == 8) return 'trees:inv8';
	}
}

var lastTxnId
async function payeerCheck() {
	require('request')({
		method: 'POST',
		url: 'https://payeer.com/ajax/api/api.php?history',
		headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
		body: `account=${config.payeer.account}&apiId=${config.payeer.apiId}&apiPass=${config.payeer.apiPass}&action=history&count=1&type=incoming`
	}, async function (error, response, body) {
		body = JSON.parse(body)
		for (const txnId in body.history) {
			if (lastTxnId == null) { lastTxnId = txnId; console.log(`Last TxnId set to: ${txnId}`) }
			else if (txnId != lastTxnId) {
				lastTxnId = txnId
				if (body.history[txnId].type != "transfer" || body.history[txnId].status != "success" || !body.history[txnId].comment) return;

				let user = await User.findOne({ id: Number(body.history[txnId].comment.split("GTA")[1]) });
				if (!user) return;
				if (body.history[txnId].creditedCurrency == "RUB")
					var sum = roundPlus(Number(body.history[txnId].creditedAmount))
				else return
				var id = user.id

				var b = (await User.findOne({ id: 0 })).deposit

				if (b == 0) {
					await user.inc('deposit', sum);
					await user.inc('buybalance', sum);
					await User.findOneAndUpdate({ id: 0 }, { $inc: { ref: sum } })
					bot.sendMessage(id, `–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${sum}‚ÇΩ —á–µ—Ä–µ–∑ Payeer`);
					bot.sendMessage("@payments_bota", ` üõ°Ô∏è <a href="tg://user?id=${id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ <b>${sum}‚ÇΩ</b> —á–µ—Ä–µ–∑ <b>Payeer</b>`, { parse_mode: "HTML" })
					ADMINS.map((a) => bot.sendMessage(a, `<a href="tg://user?id=${id}">–ò–≥—Ä–æ–∫</a> —Å–¥–µ–ª–∞–ª –¥–µ–ø–æ–∑–∏—Ç —á–µ—Ä–µ–∑ Payeer: ${sum}‚ÇΩ`, { parse_mode: "HTML" }))
				} else {
					await user.inc('deposit', sum);
					b = b / 100
					await user.inc('buybalance', sum + sum * b);
					await User.findOneAndUpdate({ id: 0 }, { $inc: { ref: sum } })
					bot.sendMessage(id, `–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${sum}‚ÇΩ –∏ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–Ω—É—Å - ${roundPlus(sum * b)}‚ÇΩ!`);
					bot.sendMessage("@payments_bota", ` üõ°Ô∏è <a href="tg://user?id=${id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ <b>${sum}‚ÇΩ</b> —á–µ—Ä–µ–∑ <b>Payeer</b> –∏ –ø–æ–ª—É—á–∏–ª ${roundPlus(sum*b)}‚ÇΩ –±–æ–Ω—É—Å–æ–º!`, { parse_mode: "HTML" })
					ADMINS.map((a) => bot.sendMessage(a, `<a href="tg://user?id=${id}">–ò–≥—Ä–æ–∫</a> —Å–¥–µ–ª–∞–ª –¥–µ–ø–æ–∑–∏—Ç: ${sum}‚ÇΩ —á–µ—Ä–µ–∑ Payeer + ${roundPlus(sum * b)}‚ÇΩ –±–æ–Ω—É—Å`, { parse_mode: "HTML" }))
				}
				await User.findOneAndUpdate({ id: user.ref }, { $inc: { buybalance: roundPlus(sum * 0.05) } })
				await User.findOneAndUpdate({ id: user.ref }, { $inc: { outbalance: roundPlus(sum * 0.05) } })
				bot.sendMessage(user.ref, `ü§ù –í–∞—à <a href="tg://user?id=${id}">—Ä–µ—Ñ–µ—Ä–∞–ª</a> –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ <b>${sum}‚ÇΩ</b>!\nüí∏ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ –ø–æ <b>${roundPlus(sum * 0.05)}‚ÇΩ</b> –Ω–∞ –±–∞–ª–∞–Ω—Å—ã –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –∏ –¥–ª—è –≤—ã–≤–æ–¥–∞`, { parse_mode: "HTML" }).catch()
			}
		}
	})
}

if (config.payeer.enabled) {
	setInterval(payeerCheck, 10000)
	payeerCheck()
}

setInterval(async () => {
	qiwi.getOperationHistory({ rows: 10, operation: 'IN' }, (err, response) => {
		response.data.map(async (x) => {
			if (!x.comment) return;
			if (txnId.indexOf(x.txnId) !== -1) return;

			let id = Number(x.comment.split("GTA")[1]);
			if (!id) return;
			let user = await User.findOne({ id });
			if (!user) return;
			if (x.sum.currency != 643) return;
			var b = (await User.findOne({ id: 0 })).deposit / 100
			var sum = x.sum.amount
			if (b > 0) {
				await user.inc('deposit', x.sum.amount);
				if (user.deposit + x.sum.amount > 100 && !user.not) {
					//await bot.sendMessage(id, `üí∞ –í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞ –±–æ–ª–µ–µ, —á–µ–º –Ω–∞ 100‚ÇΩ –∏ –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –≤ —á–∞—Ç –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤!\n–ü–µ—Ä–µ—à–ª–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º`);
					await User.findOneAndUpdate({ id: user.id }, { not: true })
				}

				await user.inc('buybalance', x.sum.amount + x.sum.amount * b);
				await User.findOneAndUpdate({ id: 0 }, { $inc: { ref: x.sum.amount } })
				bot.sendMessage(id, `–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${x.sum.amount}‚ÇΩ —á–µ—Ä–µ–∑ QIWI –∏ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–Ω—É—Å - ${roundPlus(x.sum.amount * b)}‚ÇΩ!`);
				bot.sendMessage("@payments_bota", ` üõ°Ô∏è <a href="tg://user?id=${id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ <b>${x.sum.amount}‚ÇΩ</b> —á–µ—Ä–µ–∑ <b>QIWI</b> –∏ –ø–æ–ª—É—á–∏–ª ${roundPlus(x.sum.amount * b)}‚ÇΩ –±–æ–Ω—É—Å–æ–º!`, { parse_mode: "HTML" })
				ADMINS.map((a) => bot.sendMessage(a, `<a href="tg://user?id=${id}">–ò–≥—Ä–æ–∫</a> —Å–¥–µ–ª–∞–ª –¥–µ–ø–æ–∑–∏—Ç: ${x.sum.amount}‚ÇΩ —á–µ—Ä–µ–∑ QIWI + ${roundPlus(x.sum.amount * b)}‚ÇΩ –±–æ–Ω—É—Å`, { parse_mode: "HTML" }))

			}
			else if (b == 0) {
				await user.inc('deposit', x.sum.amount);
				if (user.deposit + x.sum.amount > 100 && !user.not) {
					//await bot.sendMessage(id, `üí∞ –í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞ –±–æ–ª–µ–µ, —á–µ–º –Ω–∞ 100‚ÇΩ –∏ –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –≤ —á–∞—Ç –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤!\n–ü–µ—Ä–µ—à–ª–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º`);
					await User.findOneAndUpdate({ id: user.id }, { not: true })
				}
				await user.inc('buybalance', x.sum.amount);
				await User.findOneAndUpdate({ id: 0 }, { $inc: { ref: x.sum.amount } })
				bot.sendMessage(id, `–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${x.sum.amount}‚ÇΩ`);
				bot.sendMessage("@payments_bota", ` üõ°Ô∏è <a href="tg://user?id=${id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ <b>${x.sum.amount}‚ÇΩ</b> —á–µ—Ä–µ–∑ <b>QIWI</b>`, { parse_mode: "HTML" })
				ADMINS.map((a) => bot.sendMessage(a, `<a href="tg://user?id=${id}">–ò–≥—Ä–æ–∫</a> —Å–¥–µ–ª–∞–ª –¥–µ–ø–æ–∑–∏—Ç: ${x.sum.amount}‚ÇΩ —á–µ—Ä–µ–∑ QIWI`, { parse_mode: "HTML" }))
			} else {
				await user.inc('deposit', x.sum.amount);
				if (user.deposit + x.sum.amount > 100 && !user.not) {
					//await bot.sendMessage(id, `üí∞ –í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞ –±–æ–ª–µ–µ, —á–µ–º –Ω–∞ 100‚ÇΩ –∏ –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –≤ —á–∞—Ç –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤!\n–ü–µ—Ä–µ—à–ª–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º`);
					await User.findOneAndUpdate({ id: user.id }, { not: true })
				}
				b = b / 100
				await user.inc('buybalance', x.sum.amount + x.sum.amount * b);
				await User.findOneAndUpdate({ id: 0 }, { $inc: { ref: x.sum.amount } })
				bot.sendMessage(id, `–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${x.sum.amount}‚ÇΩ —á–µ—Ä–µ–∑ QIWI –∏ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–Ω—É—Å - ${roundPlus(x.sum.amount * b)}‚ÇΩ!`);
				bot.sendMessage("@payments_bota", ` üõ°Ô∏è <a href="tg://user?id=${id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ <b>${x.sum.amount}‚ÇΩ</b> —á–µ—Ä–µ–∑ <b>QIWI</b> –∏ –ø–æ–ª—É—á–∏–ª ${roundPlus(x.sum.amount * b)}‚ÇΩ –±–æ–Ω—É—Å–æ–º!`, { parse_mode: "HTML" })
				ADMINS.map((a) => bot.sendMessage(a, `<a href="tg://user?id=${id}">–ò–≥—Ä–æ–∫</a> —Å–¥–µ–ª–∞–ª –¥–µ–ø–æ–∑–∏—Ç: ${x.sum.amount}‚ÇΩ —á–µ—Ä–µ–∑ QIWI + ${roundPlus(x.sum.amount * b)}‚ÇΩ –±–æ–Ω—É—Å`, { parse_mode: "HTML" }))

			}
			await User.findOneAndUpdate({ id: user.ref }, { $inc: { buybalance: roundPlus(x.sum.amount * 0.05) } })
			await User.findOneAndUpdate({ id: user.ref }, { $inc: { outbalance: roundPlus(x.sum.amount * 0.05) } })

			bot.sendMessage(user.ref, `ü§ù –í–∞—à <a href="tg://user?id=${id}">—Ä–µ—Ñ–µ—Ä–∞–ª</a> –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ <b>${x.sum.amount}‚ÇΩ</b>!\nüí∏ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ –ø–æ <b>${roundPlus(x.sum.amount * 0.05)}‚ÇΩ</b> –Ω–∞ –±–∞–ª–∞–Ω—Å—ã –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –∏ –¥–ª—è –≤—ã–≤–æ–¥–∞`, { parse_mode: "HTML" }).catch()

			txnId.push(x.txnId)
			require('fs').writeFileSync('./txnId.json', JSON.stringify(txnId));
		});
	});
}, 10000);

setInterval(async () => {
	qiwi.getOperationHistory({ rows: 10, operation: 'IN' }, (err, response) => {
		response.data.map(async (x) => {
			if (!x.comment) return;
			if (txnId.indexOf(x.txnId) !== -1) return;
			if (x.comment.startsWith('ml')) {
			let id = Number(x.comment.split("ml")[1]);
			if (!id) return;
			let user = await User.findOne({ id });
			if (!user) return;
			if (x.sum.currency != 643) return;
			var b = (await User.findOne({ id: 0 })).deposit / 200
			var sum = x.sum.amount
			if (b > 0) {
				await user.inc('game_balance', x.sum.amount);
				if (user.game_balance + x.sum.amount > 5 && !user.kredit) {
					await bot.sendMessage(id, `üí∞ –í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–∞ 150‚ÇΩ –∏ –∑–∞–∫—Ä—ã–ª–∏ –∫—Ä–µ–¥–∏—Ç. –¢–µ–ø–µ—Ä—å –í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –≤—ã–≤–æ–¥`);
					await User.findOneAndUpdate({ id: user.id }, { kredit: 0 })
				}

				await user.inc('game_balance', x.sum.amount + x.sum.amount * b);
				await User.findOneAndUpdate({ id: 0 }, { $inc: { ref: x.sum.amount } })
				bot.sendMessage(id, `–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${x.sum.amount}‚ÇΩ –∏ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–Ω—É—Å - ${roundPlus(x.sum.amount * b)}‚ÇΩ!`);
				bot.sendMessage("@payments_bota", `üõ°Ô∏è <a href="tg://user?id=${id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ <b>${x.sum.amount}‚ÇΩ</b> –∏ –ø–æ–ª—É—á–∏–ª ${roundPlus(x.sum.amount * b)}‚ÇΩ –±–æ–Ω—É—Å–æ–º!\n–ü–°: QIWI`, { parse_mode: "HTML" })
				ADMINS.map((a) => bot.sendMessage(a, `<a href="tg://user?id=${id}">–ò–≥—Ä–æ–∫</a> —Å–¥–µ–ª–∞–ª –¥–µ–ø–æ–∑–∏—Ç: ${x.sum.amount}‚ÇΩ + ${roundPlus(x.sum.amount * b)}‚ÇΩ –±–æ–Ω—É—Å\n–ü–°: QIWI`, { parse_mode: "HTML" }))

			}
			else if (b == 0) {
				await user.inc('game_balance', x.sum.amount);
				if (user.game_balance + x.sum.amount > 5 && !user.kredit) {
					await bot.sendMessage(id, `üí∞ –í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–∞ 150‚ÇΩ –∏ –∑–∞–∫—Ä—ã–ª–∏ –∫—Ä–µ–¥–∏—Ç. –¢–µ–ø–µ—Ä—å –í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –≤—ã–≤–æ–¥`);
					await User.findOneAndUpdate({ id: user.id }, { kredit: 0 })
				}
				await user.inc('game_balance', x.sum.amount);
				await User.findOneAndUpdate({ id: 0 }, { $inc: { ref: x.sum.amount } })
				bot.sendMessage(id, `–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${x.sum.amount}‚ÇΩ`);
				bot.sendMessage("@payments_bota", `üõ°Ô∏è <a href="tg://user?id=${id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ <b>${x.sum.amount}‚ÇΩ</b>\n–ü–°: QIWI`, { parse_mode: "HTML" })
				ADMINS.map((a) => bot.sendMessage(a, `<a href="tg://user?id=${id}">–ò–≥—Ä–æ–∫</a> —Å–¥–µ–ª–∞–ª –¥–µ–ø–æ–∑–∏—Ç: ${x.sum.amount}‚ÇΩ\n–ü–°: QIWI`, { parse_mode: "HTML" }))
			} else {
				await user.inc('game_balance', x.sum.amount);
				if (user.game_balance + x.sum.amount > 5 && !user.kredit) {
					await bot.sendMessage(id, `üí∞ –í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–∞ 150‚ÇΩ –∏ –∑–∞–∫—Ä—ã–ª–∏ –∫—Ä–µ–¥–∏—Ç. –¢–µ–ø–µ—Ä—å –í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –≤—ã–≤–æ–¥`);
					await User.findOneAndUpdate({ id: user.id }, { kredit: 0 })
				}
				b = b / 200
				await user.inc('game_balance', x.sum.amount + x.sum.amount * b);
				await User.findOneAndUpdate({ id: 0 }, { $inc: { ref: x.sum.amount } })
				bot.sendMessage(id, `–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${x.sum.amount}‚ÇΩ –∏ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–Ω—É—Å - ${roundPlus(x.sum.amount * b)}‚ÇΩ!`);
				bot.sendMessage("@payments_bota", `üõ°Ô∏è <a href="tg://user?id=${id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ <b>${x.sum.amount}‚ÇΩ</b> –∏ –ø–æ–ª—É—á–∏–ª ${roundPlus(x.sum.amount * b)}‚ÇΩ –±–æ–Ω—É—Å–æ–º!\n–ü–°: QIWI`, { parse_mode: "HTML" })
				ADMINS.map((a) => bot.sendMessage(a, `<a href="tg://user?id=${id}">–ò–≥—Ä–æ–∫</a> —Å–¥–µ–ª–∞–ª –¥–µ–ø–æ–∑–∏—Ç: ${x.sum.amount}‚ÇΩ + ${roundPlus(x.sum.amount * b)}‚ÇΩ –±–æ–Ω—É—Å`, { parse_mode: "HTML" }))

			}
			// await User.findOneAndUpdate({ id: user.ref }, { $inc: { buybalance: roundPlus(x.sum.amount * 0.08) } })
			await User.findOneAndUpdate({ id: user.ref }, { $inc: { outbalance: roundPlus(x.sum.amount * 0.10) } })

			bot.sendMessage(user.ref, `ü§ù –í–∞—à <a href="tg://user?id=${id}">—Ä–µ—Ñ–µ—Ä–∞–ª</a> –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ <b>${x.sum.amount}‚ÇΩ</b>!\nüí∏ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ –ø–æ <b>${roundPlus(x.sum.amount * 0.10)}‚ÇΩ</b>`, { parse_mode: "HTML" }).catch()

			txnId.push(x.txnId)
			require('fs').writeFileSync('./txnId.json', JSON.stringify(txnId));
			}
		});
	});
}, 10000);

async function mmTick() {
	if (mm_status) {
		try {
			mm_i++
			if (mm_type == "text") {
				if (mm_btn_status)
					bot.sendMessage(mm_u[mm_i - 1], mm_text, { reply_markup: { inline_keyboard: [[{ text: mm_btn_text, url: mm_btn_link }]] }, parse_mode: html }).then((err) => { mm_ok++ }).catch((err) => { mm_err++ })
				else
					bot.sendMessage(mm_u[mm_i - 1], mm_text, { parse_mode: html }).then((err) => { console.log((mm_i - 1) + ') ID ' + mm_u[mm_i - 1] + " OK"); mm_ok++ }).catch((err) => { mm_err++ })
			}
			else if (mm_type == "img") {
				if (mm_btn_status)
					bot.sendPhoto(mm_u[mm_i - 1], mm_imgid, { caption: mm_text, reply_markup: { inline_keyboard: [[{ text: mm_btn_text, url: mm_btn_link }]] } }).then((err) => { mm_ok++ }).catch((err) => { mm_err++ })
				else
					bot.sendPhoto(mm_u[mm_i - 1], mm_imgid, { caption: mm_text }).then((err) => { console.log((mm_i - 1) + ') ID ' + mm_u[mm_i - 1] + " OK"); mm_ok++ }).catch((err) => { mm_err++ })
			}
			if (mm_i % 10 == 0) {
				var tek = Math.round((mm_i / mm_total) * 40)
				var str = ""
				for (var i = 0; i < tek; i++) str += "+"
				str += '>'
				for (var i = tek + 1; i < 41; i++) str += "-"
				bot.editMessageText("<b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ:</b> " + mm_i + '/' + mm_total + ' - ' + Math.round((mm_i / mm_total) * 100) + '%\n' + str + "\n\n<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n<b>–£—Å–ø–µ—à–Ω—ã—Ö:</b> " + mm_ok + "\n<b>–ù–µ—É—Å–ø–µ—à–Ω—ã—Ö:</b> " + mm_err, { chat_id: mm_achatid, message_id: mm_amsgid, reply_markup: RM_mm1, parse_mode: html })
			}
			if (mm_i == mm_total) {
				mm_status = false;
				bot.editMessageText("–í—ã–ø–æ–ª–Ω–µ–Ω–æ: " + mm_i + '/' + mm_total, { chat_id: mm_achatid, message_id: mm_amsgid })
				sendAdmins('<b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–£—Å–ø–µ—à–Ω–æ:</b> ' + mm_ok + "\n<b>–ù–µ—É—Å–ø–µ—à–Ω–æ:</b> " + mm_err, { parse_mode: html })
				mm_u = []
			}
		} finally { }
	}
}

setInterval(mmTick, 100);

var mm_total
var mm_i
var mm_status = false
var mm_amsgid
var mm_type
var mm_imgid
var mm_text
var mm_achatid
var mm_btn_status
var mm_btn_text
var mm_btn_link
var mm_ok
var mm_err

async function mm_t(text, amsgid, achatid, btn_status, btn_text, btn_link, size) {
	let ut = await User.find({}, { id: 1 }).sort({ _id: -1 })
	mm_total = ut.length
	console.log(ut)
	mm_u = []
	for (var i = 0; i < mm_total; i++)
		mm_u[i] = ut[i].id
	if (size != 100) {
		mm_u = randomizeArr(mm_u)
		mm_total = Math.ceil(mm_total * (size / 100))
		mm_u.length = mm_total
	}
	ut = undefined
	mm_i = 0;
	mm_amsgid = amsgid
	mm_type = "text"
	mm_text = text
	mm_ok = 0
	mm_err = 0
	mm_achatid = achatid
	if (btn_status) {
		mm_btn_status = true
		mm_btn_text = btn_text
		mm_btn_link = btn_link
	}
	else
		mm_btn_status = false
	mm_status = true;
}

bot.on('photo', async msg => {
	if (msg.from != undefined) {
		var uid = msg.from.id
		if (state[uid] == 7770 && ADMINS.indexOf(uid) !== -1) {
			state[uid] = undefined
			var text = ""
			if (msg.caption != undefined) text = msg.caption
			bot.sendMessage(uid, "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!").then((e) => {
				if (text.split("#").length == 4) {
					var btn_text = text.split("#")[1].split("#")[0].replace(/(^\s*)|(\s*)$/g, '')
					var btn_link = text.split("#")[2].split("#")[0].replace(/(^\s*)|(\s*)$/g, '')
					text = text.split("#")[0].replace(/(^\s*)|(\s*)$/g, '').replace(' ', '')
					mm_img(msg.photo[msg.photo.length - 1].file_id, text, e.message_id, e.chat.id, true, btn_text, btn_link, 100)

				}
				else
					mm_img(msg.photo[msg.photo.length - 1].file_id, text, e.message_id, e.chat.id, false, false, false, 100)

			})
		}
	}
})



async function mm_img(img, text, amsgid, achatid, btn_status, btn_text, btn_link, size) {
	let ut = await User.find({}, { id: 1 }).sort({ _id: -1 })
	mm_total = ut.length
	mm_u = []
	for (var i = 0; i < mm_total; i++)
		mm_u[i] = ut[i].id
	if (size != 100) {
		mm_u = randomizeArr(mm_u)
		mm_total = Math.ceil(mm_total * (size / 100))
		mm_u.length = mm_total
	}

	ut = undefined
	mm_i = 0;
	mm_amsgid = amsgid
	mm_type = "img"
	mm_text = text
	mm_imgid = img
	mm_ok = 0
	mm_err = 0
	mm_achatid = achatid
	if (btn_status) {
		mm_btn_status = true
		mm_btn_text = btn_text
		mm_btn_link = btn_link
	}
	else
		mm_btn_status = false
	mm_status = true;
}

function randomizeArr(arr) {
	var j, temp;
	for (var i = arr.length - 1; i > 0; i--) {
		j = Math.floor(Math.random() * (i + 1));
		temp = arr[j];
		arr[j] = arr[i];
		arr[i] = temp;
	}
	return arr;
}

const html = "HTML"

function sendAdmins(text, params) { for (var i = 0; i < ADMINS.length; i++) bot.sendMessage(ADMINS[i], text, params) }

var data = []


function roundPlus(number) { if (isNaN(number)) return false; var m = Math.pow(10, 2); return Math.round(number * m) / m; }

async function main() {
	var u = (await User.find({}, { id: 1 })).map((e) => { return e.id })
	for (var i in u) {
		await User.findOneAndUpdate({ id: u[i] }, { refCount: await User.countDocuments({ ref: u[i] }) })
		console.log(i)
	}

}
//main()

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—á–µ–ª–æ–º–∞—Ç–∫–∏ —Å –≤—ã–¥–∞—á–µ–π –ø—á—ë–ª
async function beeMotherUpdater() {
	// –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –ø—á—ë–ª
	var bm = await BeeMother.find({ end_time: { $lte: Date.now() } })
	for (var i in bm) {
		var b = bm[i]
		await BeeMother.deleteOne({ _id: String(b._id) })
		bot.sendMessage(b.creator_id, `‚öúÔ∏è –í–∞—à–∞ —Ñ–∞–±—Ä–∏–∫–∞ –ø—Ä–∏–Ω–µ—Å–ª–∞ 4 –°—É–ø–µ—Ä –§–∏–∫—Å–∏–∫–∞ –∏ –∏—Å—á–µ–∑–ª–∞`)
	}
	// –í—ã–¥–∞—á–∞ –¥–∏–∫–∏—Ö –ø—á—ë–ª
	bm = await BeeMother.find({ beesGet: { $lte: 4 }, nextBeeGet: { $lte: Date.now() } })
	console.log(bm)
	for (var i in bm) {
		var b = bm[i]
		await BeeMother.findOneAndUpdate({ _id: String(b._id) }, { nextBeeGet: b.nextBeeGet + 1000 * 60 * 60 * 24 * 7, beesGet: b.beesGet + 1 })
		await WildBee.insertMany([{ creator_id: b.creator_id, start_time: Date.now(), level: 1, bee_profit: 0 }])
		bot.sendMessage(b.creator_id, `üêß –§–∞–±—Ä–∏–∫–∞ –ø—Ä–∏–Ω–µ—Å–ª–∞ –í–∞–º –°—É–ø–µ—Ä –§–∏–∫—Å–∏–∫–∞!`)
	}
}
setInterval(beeMotherUpdater, 1000 * 60 * 60)

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–¥–∞—á–∏ –º—ë–¥–∞ –¥–∏–∫–∏–º–∏ –ø—á—ë–ª–∞–º–∏
async function wildBeesUpdater() {
	if (new Date().getMinutes() == 0) {
		var wb = await WildBee.find()
		for (var i in wb) {
			var b = wb[i]
			await User.findOneAndUpdate({ id: b.creator_id }, { $inc: { wb_profits: wbProfits[b.level] } })
			await WildBee.findOneAndUpdate({ _id: String(b._id) }, { $inc: { bee_profit: wbProfits[b.level] } })
		}
	}
}
setInterval(wildBeesUpdater, 1000 * 60)

//User.updateMany({}, {payout: 0, not: false}).then()

async function totalEarnCalc() {
	var users = await User.find()
	for (const i in users) {
		try {
			var user = users[i]
			let total_earn = 0;
			user.trees.map((x) => {
				total_earn += trees.find((a) => a.id == x.id).earn
			})
			await User.findOneAndUpdate({ id: user.id }, { totalEarn: total_earn })
			console.log(i + "/" + users.length + " - " + total_earn)
		}
		catch { }
	}
}
setInterval(totalEarnCalc, 1000 * 60 * 15)

async function totalClanEarnCalc() {
	var clans = await Clan.find()
	for (const i in clans) {
		try {
			var clan = clans[i]
			let total_earn = 0;
			var users = await User.find({ clanName: clan.name })
			users.map(u => { total_earn += u.totalEarn })
			await Clan.findOneAndUpdate({ name: clan.name }, { total_earn: total_earn })
			console.log(i + "/" + clans.length + " - " + total_earn)
		}
		catch { }
	}
}

setInterval(totalClanEarnCalc, 1000 * 60 * 15)

async function clanWar() {
	var d = new Date()
	var minutes = d.getMinutes()
	var hours = d.getHours()
	var date = d.getDate()
	if (!(minutes == 0 && hours == 0 && (date == 5 || date == 15 || date == 25))) return
	var d = new Date()
	var clans = await Clan.find({ $and: [{ name: { $ne: "." } }, { name: { $ne: "dsfsdf" } }] }).sort({ total_earn: -1 }).limit(3)
	await Clan.findOneAndUpdate({ name: clans[0].name }, { $inc: { balance: 50000 } })
	await Clan.findOneAndUpdate({ name: clans[1].name }, { $inc: { balance: 25000 } })
	await Clan.findOneAndUpdate({ name: clans[2].name }, { $inc: { balance: 15000 } })
	var us = await User.find({ clanName: { $exists: true } }, { id: 1 })
	var nwd = new Date(getNextClanWarTimestamp())
	for (const i in us) {
		try {
			await bot.sendMessage(us[i].id, `
<b> üõ°Ô∏è ${d.getDate()}.${d.getMonth() + 1}.${d.getFullYear()} –±—ã–ª–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ –±–∏—Ç–≤–∞ –ö–ª–∞–Ω–æ–≤!</b>\n
üèÜ –ü–æ–±–µ–¥–∏–ª –ö–ª–∞–Ω <b>${clans[0].name}</b>
üí∞ –û–Ω –ø–æ–ª—É—á–∞–µ—Ç <b> üõ°Ô∏è 50k  Coins</b> –≤ –∫–∞–∑–Ω—É  –ö–ª–∞–Ω–∞\n
2 –º–µ—Å—Ç–æ - <b>${clans[1].name}</b> - –ø–æ–ª—É—á–∞–µ—Ç <b> üõ°Ô∏è 25k  Coins</b>
3 –º–µ—Å—Ç–æ - <b>${clans[2].name}</b> - –ø–æ–ª—É—á–∞–µ—Ç <b> üõ°Ô∏è 15k  Coins</b>\n
 üõ°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –±–æ–π <b>${nwd.getDate()}.${nwd.getMonth() + 1}.${nwd.getFullYear()}</b>
			`, { parse_mode: "html" });
		}
		catch{ }
	}
}

async function ticker() {
	var d = new Date()
	var minutes = d.getMinutes()
	var hours = d.getHours()
	var date = d.getDate()
	if (minutes == 0 && hours == 0 && (date == 5 || date == 15 || date == 25))
		clanWar()
	if (minutes == 0 && hours == 0)
		await User.updateMany({}, { game_limit: 10, spinsToday: 0 })
}

setInterval(ticker, 1000 * 60)

function getNextClanWarTimestamp() {
	var dt = new Date()
	var m = dt.getMonth()
	var d = dt.getDate()
	if (d < 5) dt.setDate(5)
	else if (d >= 25) {
		dt.setDate(5)
		dt.setMonth(dt.getMonth() + 1)
	}
	else if (d >= 5 && d < 15) dt.setDate(15)
	else if (d >= 15 && d < 25) dt.setDate(25)
	return dt.getTime()
}

async function tamagochiUpdater() {
	var now = (new Date()).getTime()
	var tams = await Tamagochi.find({ lastFeed: { $lte: now - 1000 * 60 * 60 * 12 }, sick: false })
	for (const i in tams) {
		var t = tams[i]
		await Tamagochi.findOneAndUpdate({ _id: t._id }, { sickTime: now, sick: true })
		bot.sendMessage(t.creator_id, `<b>üåΩ –í—ã –Ω–µ –∫–æ—Ä–º–∏–ª–∏ –ì–µ—Ä–æ—è 12 —á–∞—Å–æ–≤, –∏ –æ–Ω–∞ –∑–∞–±–æ–ª–µ–ª–∞!</b>\n\n‚ù§Ô∏è –ì–µ—Ä–æ–π —É–º—Ä—ë—Ç, –µ—Å–ª–∏ –í—ã –Ω–µ –≤—ã–ª–µ—á–∏—Ç–µ –µ–≥–æ –∑–∞ 12 —á–∞—Å–æ–≤\nüí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –ª–µ—á–µ–Ω–∏—è:</b> 50 —Ä—É–±–ª–µ–π`, { parse_mode: 'html', reply_markup: { inline_keyboard: [[{ text: "‚ù§Ô∏è –í—ã–ª–µ—á–∏—Ç—å –ì–µ—Ä–æ—è", callback_data: "malMyheal" }]] } })
	}
	tams = await Tamagochi.find({ lastClean: { $lte: now - 1000 * 60 * 60 * 24 }, sick: false })
	for (const i in tams) {
		var t = tams[i]
		await Tamagochi.findOneAndUpdate({ _id: t._id }, { sickTime: now, sick: true })
		bot.sendMessage(t.creator_id, `<b>üí© –í—ã –Ω–µ —É–±–∏—Ä–∞–ª–∏ –†–∞–π–æ–Ω 24 —á–∞—Å–∞, –∏ –ì–µ—Ä–æ–π –∑–∞–±–æ–ª–µ–ª–∞!</b>\n\n‚ù§Ô∏è –ì–µ—Ä–æ–π  —É–º—Ä—ë—Ç, –µ—Å–ª–∏ –í—ã –Ω–µ –≤—ã–ª–µ—á–∏—Ç–µ –µ–≥–æ –∑–∞ 12 —á–∞—Å–æ–≤\nüí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –ª–µ—á–µ–Ω–∏—è:</b> 50 —Ä—É–±–ª–µ–π`, { parse_mode: 'html', reply_markup: { inline_keyboard: [[{ text: "‚ù§Ô∏è –í—ã–ª–µ—á–∏—Ç—å –ì–µ—Ä–æ—è", callback_data: "malMyheal" }]] } })
	}
	tams = await Tamagochi.find({ sickTime: { $lte: now - 1000 * 60 * 60 * 12 }, sick: true })
	for (const i in tams) {
		var t = tams[i]
		await Tamagochi.deleteOne({ _id: t._id })
		bot.sendMessage(t.creator_id, `‚ù§Ô∏è –í—ã –Ω–µ –≤—ã–ª–µ—á–∏–ª–∏ –ì–µ—Ä–æ—è –∑–∞ 12 —á–∞—Å–æ–≤!\nüò≠ –û–Ω —É–º–µ—Ä, –∂–∞–ª–∫–æ –µ–≥–æ`, { parse_mode: 'html' })
	}
	tams = await Tamagochi.find({ start_time: { $lte: now - 1000 * 60 * 60 * 24 * 30 } })
	for (const i in tams) {
		var t = tams[i]
		await Tamagochi.deleteOne({ _id: t._id })
		await User.findOneAndUpdate({ id: t.creator_id }, { $inc: { outbalance: 1300 } })
		bot.sendMessage(t.creator_id, `üß± <b>–í–∞—à –ì–µ—Ä–æ–π –≤—ã—Ä–æ—Å –∑–¥–æ—Ä–æ–≤—ã–º –∏ –∫—Ä–∞—Å–∏–≤—ã–º!</b>\n‚ò∫Ô∏è –ú—ã —Å —Ä–∞–∑–¥–æ—Å—Ç—å—é –≤—ã–∫—É–ø–∞–µ–º –µ–≥–æ\nüí≥ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>1300 —Ä—É–±–ª–µ–π</b> –Ω–∞ –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞`, { parse_mode: 'html' })
	}
}

async function giveTree(uid, id) {
	var u = await User.findOne({ id: uid });
	let total_balance = 0;
	u.trees.map((x) => { total_balance += (((Date.now() - u.lastCollect) / 1000) / 60) * (trees.find((a) => a.id == x.id).earn / 60); })
	u.trees.push({ id: id, date: Date.now(), lastCollect: Date.now() });
	await User.findOneAndUpdate({ id: uid }, { lastCollect: Date.now(), fetuses: Number(total_balance.toFixed(2)), trees: u.trees })
}

async function setWeather(weather) { await User.findOneAndUpdate({ id: 5 }, { ref: weather }) }
async function getWeather(weather) { return (await User.findOne({ id: 5 })).ref }

const weather = [
	{
		name: "üåß –î–æ–∂–¥—å",
		description: "(+5% –∫ –¥–æ—Ö–æ–¥—É)",
		multiplier: 1.05
	},
	{
		name: "‚òÅÔ∏è –ü–∞—Å–º—É—Ä–Ω–æ",
		description: "(+2% –∫ –¥–æ—Ö–æ–¥—É)",
		multiplier: 1.02
	},
	{
		name: "‚òÄÔ∏è –°–æ–ª–Ω–µ—á–Ω–æ",
		description: "(-2% –∫ –¥–æ—Ö–æ–¥—É)",
		multiplier: 0.98
	},
	{
		name: "üî• –ó–Ω–æ–π–Ω–∞—è –∂–∞—Ä–∞",
		description: "(-5% –∫ –¥–æ—Ö–æ–¥—É)",
		multiplier: 0.95
	},
	{
		name: "üå¶ –£–º–µ—Ä–µ–Ω–Ω–∞—è",
		multiplier: 1,
		description: "(–æ–±—ã—á–Ω–∞—è –¥–æ—Ö–æ–¥—É)",
	},
]

const prudLevelPrices = [0, 300, 500, 700, 900, 1100]
function getMultiplierOfLevel(level) { return 1 + 0.02 * level }

Clan.findOneAndUpdate({ name: "üëëMARVELüëë" }, { creator_id: 816070668 }).then()

async function giveTree(uid, id) {
	var u = await User.findOne({ id: uid });
	let total_balance = 0;
	u.trees.map((x) => { total_balance += (((Date.now() - u.lastCollect) / 1000) / 60) * (trees.find((a) => a.id == x.id).earn / 60); })
	u.trees.push({ id: id, date: Date.now(), lastCollect: Date.now() });
	await User.findOneAndUpdate({ id: uid }, { lastCollect: Date.now(), fetuses: Number(total_balance.toFixed(2)), trees: u.trees })
}



function randomizeArr(arr) {
	var j, temp;
	for (var i = arr.length - 1; i > 0; i--) {
		j = Math.floor(Math.random() * (i + 1));
		temp = arr[j];
		arr[j] = arr[i];
		arr[i] = temp;
	}
	return arr;
}


WildBee.insertMany([{ creator_id: 292966454, start_time: Date.now(), level: 1, bee_profit: 0 }]).then()
/*
async function ma(){
	var response = {data: JSON.parse(fs.readFileSync("trans.txt", {encoding: "utf8"}))}
	response.data.map(async (x) => {
		if (!x.comment) return;
		if (!x.comment.startsWith('DC')) return;
		let id = Number(x.comment.split("GTA")[1]);
		if (!id) return;
		let user = await User.findOne({ id });
		if (!user) return;
		if (x.sum.currency != 643) return;
		var b = (await User.findOne({ id: 0 })).deposit
		var sum = x.sum.amount
		if (sum >= 300) {
			await user.inc('deposit', x.sum.amount);
			if (user.deposit + x.sum.amount > 100 && !user.not) {
				await bot.sendMessage(id, `üí∞ –í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞ –±–æ–ª–µ–µ, —á–µ–º –Ω–∞ 100‚ÇΩ –∏ –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –≤ —á–∞—Ç –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤!\n–ü–µ—Ä–µ—à–ª–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @Licifersss`);
				await User.findOneAndUpdate({ id: user.id }, { not: true })
			}
			b = 0.15
			await user.inc('buybalance', x.sum.amount + x.sum.amount * 0.15);
			await User.findOneAndUpdate({ id: 0 }, { $inc: { ref: x.sum.amount } })
			bot.sendMessage(id, `–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${x.sum.amount}‚ÇΩ –∏ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–Ω—É—Å - ${roundPlus(x.sum.amount * 0.15)}‚ÇΩ!`);
			//bot.sendMessage("@payments_bota", ` üõ°Ô∏è <a href="tg://user?id=${id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ <b>${x.sum.amount}‚ÇΩ</b> –∏ –ø–æ–ª—É—á–∏–ª ${roundPlus(x.sum.amount * 0.15)}‚ÇΩ –±–æ–Ω—É—Å–æ–º!`, { parse_mode: "HTML" })
			ADMINS.map((a) => bot.sendMessage(a, `<a href="tg://user?id=${id}">–ò–≥—Ä–æ–∫</a> —Å–¥–µ–ª–∞–ª –¥–µ–ø–æ–∑–∏—Ç: ${x.sum.amount}‚ÇΩ + ${roundPlus(x.sum.amount * 0.15)}‚ÇΩ –±–æ–Ω—É—Å`, { parse_mode: "HTML" }))

		}
		else if (b == 0) {
			await user.inc('deposit', x.sum.amount);
			if (user.deposit + x.sum.amount > 100 && !user.not) {
				await bot.sendMessage(id, `üí∞ –í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞ –±–æ–ª–µ–µ, —á–µ–º –Ω–∞ 100‚ÇΩ –∏ –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –≤ —á–∞—Ç –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤!\n–ü–µ—Ä–µ—à–ª–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @Licifersss`);
				await User.findOneAndUpdate({ id: user.id }, { not: true })
			}
			await user.inc('buybalance', x.sum.amount);
			await User.findOneAndUpdate({ id: 0 }, { $inc: { ref: x.sum.amount } })
			bot.sendMessage(id, `–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${x.sum.amount}‚ÇΩ`);
			//bot.sendMessage("@payments_bota", ` üõ°Ô∏è <a href="tg://user?id=${id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ <b>${x.sum.amount}‚ÇΩ</b>`, { parse_mode: "HTML" })
			ADMINS.map((a) => bot.sendMessage(a, `<a href="tg://user?id=${id}">–ò–≥—Ä–æ–∫</a> —Å–¥–µ–ª–∞–ª –¥–µ–ø–æ–∑–∏—Ç: ${x.sum.amount}‚ÇΩ`, { parse_mode: "HTML" }))
		} else {
			await user.inc('deposit', x.sum.amount);
			if (user.deposit + x.sum.amount > 100 && !user.not) {
				await bot.sendMessage(id, `üí∞ –í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞ –±–æ–ª–µ–µ, —á–µ–º –Ω–∞ 100‚ÇΩ –∏ –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –≤ —á–∞—Ç –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤!\n–ü–µ—Ä–µ—à–ª–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @Licifersss`);
				await User.findOneAndUpdate({ id: user.id }, { not: true })
			}
			b = b / 100
			await user.inc('buybalance', x.sum.amount + x.sum.amount * b);
			await User.findOneAndUpdate({ id: 0 }, { $inc: { ref: x.sum.amount } })
			bot.sendMessage(id, `–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${x.sum.amount}‚ÇΩ –∏ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–Ω—É—Å - ${roundPlus(x.sum.amount * b)}‚ÇΩ!`);
			//bot.sendMessage("@payments_bota", ` üõ°Ô∏è <a href="tg://user?id=${id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ <b>${x.sum.amount}‚ÇΩ</b> –∏ –ø–æ–ª—É—á–∏–ª ${roundPlus(x.sum.amount * b)}‚ÇΩ –±–æ–Ω—É—Å–æ–º!`, { parse_mode: "HTML" })
			ADMINS.map((a) => bot.sendMessage(a, `<a href="tg://user?id=${id}">–ò–≥—Ä–æ–∫</a> —Å–¥–µ–ª–∞–ª –¥–µ–ø–æ–∑–∏—Ç: ${x.sum.amount}‚ÇΩ + ${roundPlus(x.sum.amount * b)}‚ÇΩ –±–æ–Ω—É—Å`, { parse_mode: "HTML" }))

		}
		await User.findOneAndUpdate({ id: user.ref }, { $inc: { buybalance: roundPlus(x.sum.amount * 0.05) } })
		await User.findOneAndUpdate({ id: user.ref }, { $inc: { outbalance: roundPlus(x.sum.amount * 0.05) } })

		bot.sendMessage(user.ref, `ü§ù –í–∞—à <a href="tg://user?id=${id}">—Ä–µ—Ñ–µ—Ä–∞–ª</a> –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ <b>${x.sum.amount}‚ÇΩ</b>!\nüí∏ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ –ø–æ <b>${roundPlus(x.sum.amount * 0.05)}‚ÇΩ</b> –Ω–∞ –±–∞–ª–∞–Ω—Å—ã –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –∏ –¥–ª—è –≤—ã–≤–æ–¥–∞`, { parse_mode: "HTML" }).catch()

		txnId.push(x.txnId)
		require('fs').writeFileSync('./txnId.json', JSON.stringify(txnId));
	});
}

ma()
*/

function randomInteger(min, max) {
	// —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç min –¥–æ (max+1)
	let rand = min + Math.random() * (max + 1 - min);
	return Math.floor(rand);
}



async function setAuction(auction) { await User.findOneAndUpdate({ id: 4 }, { name: JSON.stringify(auction) }, { upsert: true }) }
async function getAuction() { return JSON.parse((await User.findOne({ id: 4 })).name) }


setAuction({
	status: false,
	bank: 0,
	lastBet: {
		price: 10,
		creator_id: 0,
	},
	betCount: 0,
	start_time: 0,
	initMsgId: 0,
	generalMsgId: 0
}).then(()=>{auction_sendInitMsg()})



async function auction_sendInitMsg() {
	var a = await getAuction()
	var msg = await bot.sendMessage(auctionChannel, `
<b>üë®üèª‚Äç‚öñÔ∏è –ê—É–∫—Ü–∏–æ–Ω</b>\n
<b>–ü—Ä–∞–≤–∏–ª–∞ –∞—É–∫—Ü–∏–æ–Ω–∞:</b>
‚ñ´Ô∏è –õ—é–±–æ–π —É—á–∞—Å—Ç–Ω–∏–∫ –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∞—É–∫—Ü–∏–æ–Ω —Å—Ç–∞–≤–∫–æ–π –æ—Ç 10 —Ä—É–±–ª–µ–π
‚ñ´Ô∏è –ê—É–∫—Ü–∏–æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 2 —Å—Ç–∞–≤–æ–∫
‚ñ´Ô∏è –õ—é–±–æ–π —É—á–∞—Å—Ç–Ω–∏–∫ –º–æ–∂–µ—Ç –ø–æ–≤—ã—Å–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç–∞–≤–∫—É –∏ —Å—Ç–∞—Ç—å –ª–∏–¥–µ—Ä–æ–º
‚ñ´Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥ –ø–æ–≤—ã—à–µ–Ω–∏—è - 10 —Ä—É–±–ª–µ–π
‚ñ´Ô∏è –ü–æ—Å–ª–µ –ø–æ–≤—ã—à–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏ –∞—É–∫—Ü–∏–æ–Ω –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç—Å—è –Ω–∞ 10 –º–∏–Ω—É—Ç
‚ñ´Ô∏è –ö–∞–∫ —Ç–æ–ª—å–∫–æ —Ç–∞–π–º–µ—Ä –¥–æ—Ö–æ–¥–∏—Ç –¥–æ –Ω—É–ª—è, –¥–µ–Ω—å–≥–∏ –∑–∞—á–∏—Å–ª—è—é—Ç—Å—è —Ç–æ–º—É, –∫—Ç–æ —Å–¥–µ–ª–∞–ª –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç–∞–≤–∫—É
‚ñ´Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ –æ–¥–Ω–æ–π —Å—Ç–∞–≤–∫–∏ –ø–æ–¥—Ä—è–¥
‚ñ´Ô∏è –ù–∞ –º–æ–º–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞, –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç 90% —Å—É–º–º—ã –æ—Ç –≤—Å–µ—Ö —Å—Ç–∞–≤–æ–∫ –∞—É–∫—Ü–∏–æ–Ω–∞ –Ω–∞ —Å—á–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–æ–∫
‚ñ´Ô∏è –ï—Å–ª–∏ —Å—Ç–∞–≤–∫–∞ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è (–Ω–∏–∫—Ç–æ –Ω–µ –ø–µ—Ä–µ–±–∏–ª —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Å—Ç–∞–≤–∫—É) –∞—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —á–µ—Ä–µ–∑ 12 —á–∞—Å–æ–≤, –æ—Ç–∫—Ä—ã–≤—à–µ–º—É –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è 110%
`, { parse_mode: "html", reply_markup: { inline_keyboard: [[{ text: "üî® –ù–∞—á–∞—Ç—å –∞—É–∫—Ü–∏–æ–Ω", callback_data: "auction_start" }], [{ text: "‚óÄÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞", url: "https://t.me/SanAndreas_inv_bot" }]] } })
	a.initMsgId = msg.message_id
	await bot.pinChatMessage(auctionChannel, msg.message_id)
	await bot.deleteMessage(auctionChannel, msg.message_id + 1)
	await setAuction(a)
}

async function startAuction(u, bet) {
	var a = await getAuction()
	bot.editMessageText(`‚úÖ <a href="tg://user?id=${u.id}">${u.name}</a> –Ω–∞—á–∞–ª –∞—É–∫—Ü–∏–æ–Ω —Å—Ç–∞–≤–∫–æ–π <b>${bet} —Ä—É–±–ª–µ–π</b>!`, { parse_mode: "HTML", chat_id: auctionChannel, message_id: a.initMsgId })
	var msg = await bot.sendMessage(auctionChannel, `
<b>üë®üèª‚Äç‚öñÔ∏è –ê—É–∫—Ü–∏–æ–Ω</b>\n
‚ñ´Ô∏è <b>–°—Ç–∞—Ç—É—Å:</b> –ø—Ä–æ—Ö–æ–¥–∏—Ç
‚è± <b>–û—Å—Ç–∞–ª–æ—Å—å:</b> 12:00:00
üí∞ <b>–ë–∞–Ω–∫ –∞—É–∫—Ü–∏–æ–Ω–∞:</b> ${bet} —Ä—É–±–ª–µ–π
üî® <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–≤–æ–∫:</b> 1\n
üëë <b>–õ–∏–¥–µ—Ä:</b> <a href="tg://user?id=${u.id}">${u.name}</a> –ø–æ—Å—Ç–∞–≤–∏–ª <b>${bet} —Ä—É–±–ª–µ–π</b>!\n
üëá <b>–í—ã–±–µ—Ä–µ—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É–±–ª–µ–π –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏:</b>`, { parse_mode: "HTML", chat_id: auctionChannel, message_id: a.generalMsgId, reply_markup: { inline_keyboard: [[{ text: a.lastBet.price + 1, callback_data: "auction_bet_" + (a.lastBet.price + 1) }, { text: a.lastBet.price + 2, callback_data: "auction_bet_" + (a.lastBet.price + 2) }, { text: a.lastBet.price + 3, callback_data: "auction_bet_" + (a.lastBet.price + 3) }, { text: a.lastBet.price + 4, callback_data: "auction_bet_" + (a.lastBet.price + 4) }, { text: a.lastBet.price + 5, callback_data: "auction_bet_" + (a.lastBet.price + 5) }], [{ text: a.lastBet.price + 6, callback_data: "auction_bet_" + (a.lastBet.price + 6) }, { text: a.lastBet.price + 7, callback_data: "auction_bet_" + (a.lastBet.price + 7) }, { text: a.lastBet.price + 8, callback_data: "auction_bet_" + (a.lastBet.price + 9) }, { text: a.lastBet.price + 9, callback_data: "auction_bet_9" }, { text: a.lastBet.price + 10, callback_data: "auction_bet_" + (a.lastBet.price + 10) }], [{ text: "üí≥ –ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data: "auction_balance" }], [{ text: "‚óÄÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞", url: "https://t.me/SanAndreas_inv_bot" }]] } })
	a.generalMsgId = msg.message_id
	await bot.pinChatMessage(auctionChannel, msg.message_id)
	await bot.deleteMessage(auctionChannel, msg.message_id + 1)
	a.start_time = Date.now()
	a.status = true
	a.betCount = 1
	a.bank = bet
	a.lastBet = { price: bet, creator_id: u.id, name: u.name, timestamp: Date.now() }
	await setAuction(a)
}

bot.on('callback_query', async (msg) => {
	var d = msg.data
	if (-1 == d.indexOf("auction")) return
	var uid = msg.from.id
	var u = await User.findOne({ id: uid })
	if (!u) return bot.answerCallbackQuery(msg.id, '‚ùóÔ∏è –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∞—É–∫—Ü–∏–æ–Ω–µ –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –±–æ—Ç–∞ @invest_x_iphone_robot!')
	var a = await getAuction()
	if (d == "auction_balance") {
		return bot.answerCallbackQuery(msg.id, `üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–æ–∫: ${Math.floor(u.buybalance)} —Ä—É–±–ª–µ–π`)
	}
	else if (d == "auction_start") {
		if (a.status == true) return bot.answerCallbackQuery(msg.id, '‚ùóÔ∏è –ê—É–∫—Ü–∏–æ–Ω —É–∂–µ –Ω–∞—á–∞–ª—Å—è!')
		if (u.buybalance < 10) return bot.answerCallbackQuery(msg.id, '‚ùóÔ∏è –ù–∞ –±–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏!')
		bot.answerCallbackQuery(msg.id, '‚óÄÔ∏è –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –±–æ—Ç @invest_x_iphone_robot –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É!', true)
		bot.sendMessage(uid, "üëâ <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–∞ (–æ—Ç 10 —Ä—É–±–ª–µ–π):</b>", { parse_mode: "html", reply_markup: { keyboard: Cancel, resize_keyboard: true } })
		state[uid] = 77777
	}
	else if (~d.indexOf("auction_bet")) {
		var bet = Number(d.split("_")[2])
		if (!a.status) return bot.answerCallbackQuery(msg.id, '‚ùóÔ∏è –ê—É–∫—Ü–∏–æ–Ω –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª—Å—è!')
		if (uid == a.lastBet.creator_id) return bot.answerCallbackQuery(msg.id, '‚ùóÔ∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –¥–≤–µ —Å—Ç–∞–≤–∫–∏ –ø–æ–¥—Ä—è–¥!')
		if (bet <= a.lastBet.price) return bot.answerCallbackQuery(msg.id, '‚ùóÔ∏è –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â—É—é!')
		if (u.buybalance < bet) return bot.answerCallbackQuery(msg.id, '‚ùóÔ∏è –ù–∞ –±–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏!')
		await User.findOneAndUpdate({ id: uid }, { $inc: { buybalance: -bet } })
		a.bank += bet
		a.betCount++
		bot.sendMessage(a.lastBet.creator_id, `üëë <a href="tg://user?id=${u.id}">${u.name}</a> –ø–µ—Ä–µ–±–∏–ª –í–∞—à—É —Å—Ç–∞–≤–∫—É –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–µ!`, { parse_mode: "html" })
		a.lastBet = { price: bet, creator_id: u.id, name: u.name, timestamp: Date.now() }
		await setAuction(a)
		await bot.answerCallbackQuery(msg.id, 'üëë –í—ã –ø–æ–≤—ã—Å–∏–ª–∏ —Å—Ç–∞–≤–∫—É –∏ —Å—Ç–∞–ª–∏ –ª–∏–¥–µ—Ä–æ–º –∞—É–Ω—Ü–∏–æ–Ω–∞!')
		bot.sendMessage(auctionChannel, `üëë <a href="tg://user?id=${u.id}">${u.name}</a> –ø–æ–≤—ã—Å–∏–ª —Å—Ç–∞–≤–∫—É –¥–æ <b>${bet} —Ä—É–±–ª–µ–π</b>!`, { parse_mode: "html" })
		return bot.editMessageText(`
<b>üë®üèª‚Äç‚öñÔ∏è –ê—É–∫—Ü–∏–æ–Ω</b>\n
‚ñ´Ô∏è <b>–°—Ç–∞—Ç—É—Å:</b> –ø—Ä–æ—Ö–æ–¥–∏—Ç
‚è± <b>–û—Å—Ç–∞–ª–æ—Å—å:</b> 10:00
üí∞ <b>–ë–∞–Ω–∫ –∞—É–∫—Ü–∏–æ–Ω–∞:</b> ${a.bank} —Ä—É–±–ª–µ–π
üî® <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–≤–æ–∫:</b> ${a.betCount}\n
üëë <b>–õ–∏–¥–µ—Ä:</b> <a href="tg://user?id=${a.lastBet.creator_id}">${a.lastBet.name}</a> –ø–æ—Å—Ç–∞–≤–∏–ª <b>${bet} —Ä—É–±–ª–µ–π</b>!\n
üëá <b>–í—ã–±–µ—Ä–µ—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É–±–ª–µ–π –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏:</b>`, { parse_mode: "HTML", chat_id: auctionChannel, message_id: a.generalMsgId, reply_markup: { inline_keyboard: [[{ text: a.lastBet.price + 1, callback_data: "auction_bet_" + (a.lastBet.price + 1) }, { text: a.lastBet.price + 2, callback_data: "auction_bet_" + (a.lastBet.price + 2) }, { text: a.lastBet.price + 3, callback_data: "auction_bet_" + (a.lastBet.price + 3) }, { text: a.lastBet.price + 4, callback_data: "auction_bet_" + (a.lastBet.price + 4) }, { text: a.lastBet.price + 5, callback_data: "auction_bet_" + (a.lastBet.price + 5) }], [{ text: a.lastBet.price + 6, callback_data: "auction_bet_" + (a.lastBet.price + 6) }, { text: a.lastBet.price + 7, callback_data: "auction_bet_" + (a.lastBet.price + 7) }, { text: a.lastBet.price + 8, callback_data: "auction_bet_" + (a.lastBet.price + 9) }, { text: a.lastBet.price + 9, callback_data: "auction_bet_9" }, { text: a.lastBet.price + 10, callback_data: "auction_bet_" + (a.lastBet.price + 10) }], [{ text: "üí≥ –ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data: "auction_balance" }], [{ text: "‚óÄÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞", url: "https://t.me/arenda_sim_card_robot" }]] } })
	}
})

async function auctionTicker() {
	var a = await getAuction()
	if (!a.status) return
	if (a.betCount == 1) {
		var delta = Math.floor((a.start_time + 1000 * 60 * 60 * 12 - Date.now()) / 1000)
		if (delta > 0) {
			var hours = Math.floor(delta / (60 * 60))
			var minutes = Math.floor((delta % 3600) / 60)
			var seconds = Math.floor(((delta % 3600) % 60))
			minutes = String(minutes)
			if (minutes.length == 1) minutes = "0" + minutes
			seconds = String(seconds)
			if (seconds.length == 1) seconds = "0" + seconds
			bot.editMessageText(`
<b>üë®üèª‚Äç‚öñÔ∏è –ê—É–∫—Ü–∏–æ–Ω</b>\n
‚ñ´Ô∏è <b>–°—Ç–∞—Ç—É—Å:</b> –ø—Ä–æ—Ö–æ–¥–∏—Ç
‚è± <b>–û—Å—Ç–∞–ª–æ—Å—å:</b> ${hours}:${minutes}:${seconds}
üí∞ <b>–ë–∞–Ω–∫ –∞—É–∫—Ü–∏–æ–Ω–∞:</b> ${a.bank} —Ä—É–±–ª–µ–π
üî® <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–≤–æ–∫:</b> 1\n
?? <b>–õ–∏–¥–µ—Ä:</b> <a href="tg://user?id=${a.lastBet.creator_id}">${a.lastBet.name}</a> –ø–æ—Å—Ç–∞–≤–∏–ª <b>${a.bank} —Ä—É–±–ª–µ–π</b>!\n
üëá <b>–í—ã–±–µ—Ä–µ—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É–±–ª–µ–π –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏:</b>`, { parse_mode: "HTML", chat_id: auctionChannel, message_id: a.generalMsgId, reply_markup: { inline_keyboard: [[{ text: a.bank + 1, callback_data: "auction_bet_" + (a.bank + 1) }, { text: a.bank + 2, callback_data: "auction_bet_" + (a.bank + 2) }, { text: a.bank + 3, callback_data: "auction_bet_" + (a.bank + 3) }, { text: a.bank + 4, callback_data: "auction_bet_" + (a.bank + 4) }, { text: a.bank + 5, callback_data: "auction_bet_" + (a.bank + 5) }], [{ text: a.bank + 6, callback_data: "auction_bet_" + (a.bank + 6) }, { text: a.bank + 7, callback_data: "auction_bet_" + (a.bank + 7) }, { text: a.bank + 8, callback_data: "auction_bet_" + (a.bank + 9) }, { text: a.bank + 9, callback_data: "auction_bet_9" }, { text: a.bank + 10, callback_data: "auction_bet_" + (a.bank + 10) }], [{ text: "üí≥ –ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data: "auction_balance" }], [{ text: "‚óÄÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞", url: "https://t.me/SanAndreas_inv_bot" }]] } })
		}
		else {
			bot.deleteMessage(auctionChannel, a.initMsgId)
			bot.editMessageText(`
<b>üë®üèª‚Äç‚öñÔ∏è –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω!</b>\n
üëë –ù–∏–∫—Ç–æ –Ω–µ —Å–º–æ–≥ –ø–µ—Ä–µ–±–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É <a href="tg://user?id=${a.lastBet.creator_id}">${a.lastBet.name}</a> –≤ <b>${a.lastBet.price} —Ä—É–±–ª–µ–π</b>
üí≥ <b>–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç ${Math.ceil(a.lastBet.price * 1.1)} —Ä—É–±–ª–µ–π</b>
`, { parse_mode: "HTML", chat_id: auctionChannel, message_id: a.generalMsgId })
			a.status = false
			await User.findOneAndUpdate({ id: a.lastBet.creator_id }, { $inc: { buybalance: a.lastBet.price * 1.1 } })
			bot.sendMessage(a.lastBet.creator_id, `üí≥ <b>–ù–∞ –í–∞—à –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${Math.ceil(a.lastBet.price * 1.1)} —Ä—É–±–ª–µ–π –∑–∞ –ø–æ–±–µ–¥—É –≤ –∞—É–∫—Ü–∏–æ–Ω–µ</b>`, { parse_mode: "html" })
			await setAuction(a)
			auction_sendInitMsg()
		}
	} else {
		var delta = Math.floor((a.lastBet.timestamp + 1000 * 60 * 10 - Date.now()) / 1000)
		if (delta > 0) {
			var minutes = Math.floor((delta % 3600) / 60)
			var seconds = Math.floor(((delta % 3600) % 60))
			minutes = String(minutes)
			if (minutes.length == 1) minutes = "0" + minutes
			seconds = String(seconds)
			if (seconds.length == 1) seconds = "0" + seconds
			console.log(`Sent ${minutes}:${seconds}`)
			bot.editMessageText(`
<b>üë®üèª‚Äç‚öñÔ∏è –ê—É–∫—Ü–∏–æ–Ω</b>\n
‚ñ´Ô∏è <b>–°—Ç–∞—Ç—É—Å:</b> –ø—Ä–æ—Ö–æ–¥–∏—Ç
‚è± <b>–û—Å—Ç–∞–ª–æ—Å—å:</b> ${minutes}:${seconds}
üí∞ <b>–ë–∞–Ω–∫ –∞—É–∫—Ü–∏–æ–Ω–∞:</b> ${a.bank} —Ä—É–±–ª–µ–π
üî® <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–≤–æ–∫:</b> ${a.betCount}\n
üëë <b>–õ–∏–¥–µ—Ä:</b> <a href="tg://user?id=${a.lastBet.creator_id}">${a.lastBet.name}</a> –ø–æ—Å—Ç–∞–≤–∏–ª <b>${a.lastBet.price} —Ä—É–±–ª–µ–π</b>!\n
üëá <b>–í—ã–±–µ—Ä–µ—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É–±–ª–µ–π –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏:</b>`, { parse_mode: "HTML", chat_id: auctionChannel, message_id: a.generalMsgId, reply_markup: { inline_keyboard: [[{ text: a.lastBet.price + 1, callback_data: "auction_bet_" + (a.lastBet.price + 1) }, { text: a.lastBet.price + 2, callback_data: "auction_bet_" + (a.lastBet.price + 2) }, { text: a.lastBet.price + 3, callback_data: "auction_bet_" + (a.lastBet.price + 3) }, { text: a.lastBet.price + 4, callback_data: "auction_bet_" + (a.lastBet.price + 4) }, { text: a.lastBet.price + 5, callback_data: "auction_bet_" + (a.lastBet.price + 5) }], [{ text: a.lastBet.price + 6, callback_data: "auction_bet_" + (a.lastBet.price + 6) }, { text: a.lastBet.price + 7, callback_data: "auction_bet_" + (a.lastBet.price + 7) }, { text: a.lastBet.price + 8, callback_data: "auction_bet_" + (a.lastBet.price + 9) }, { text: a.lastBet.price + 9, callback_data: "auction_bet_9" }, { text: a.lastBet.price + 10, callback_data: "auction_bet_" + (a.lastBet.price + 10) }], [{ text: "üí≥ –ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data: "auction_balance" }], [{ text: "‚óÄÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞", url: "https://t.me/SanAndreas_inv_bot" }]] } })
		}
		else {
			bot.deleteMessage(auctionChannel, a.initMsgId)
			bot.editMessageText(`
<b>üë®üèª‚Äç‚öñÔ∏è –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω!</b>\n
üëë <b>–õ–∏–¥–µ—Ä:</b> <a href="tg://user?id=${a.lastBet.creator_id}">${a.lastBet.name}</a> –ø–æ—Å—Ç–∞–≤–∏–ª <b>${a.lastBet.price} —Ä—É–±–ª–µ–π</b>!
üí∞ <b>–ë–∞–Ω–∫ –∞—É–∫—Ü–∏–æ–Ω–∞:</b> ${a.bank} —Ä—É–±–ª–µ–π
üí≥ <b>–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç 90% –±–∞–Ω–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–∞ - ${Math.ceil(a.bank * 0.9)} —Ä—É–±–ª–µ–π</b>
`, { parse_mode: "HTML", chat_id: auctionChannel, message_id: a.generalMsgId })
			a.status = false
			await User.findOneAndUpdate({ id: a.lastBet.creator_id }, { $inc: { buybalance: a.bank * 0.9 } })
			bot.sendMessage(a.lastBet.creator_id, `üí≥ <b>–ù–∞ –í–∞—à –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${Math.ceil(a.bank * 0.9)} —Ä—É–±–ª–µ–π –∑–∞ –ø–æ–±–µ–¥—É –≤ –∞—É–∫—Ü–∏–æ–Ω–µ</b>`, { parse_mode: "html" })
			await setAuction(a)
			auction_sendInitMsg()
		}
	}

}
setInterval(auctionTicker, 5000)

const auctionChannel = -1001724841698

Clan.deleteOne({name: "–õ–æ–±–∑–∏–∫"}).then(e=>{console.log(e)})

let lastAddProfit = 18720;

async function addProfit() {
  if ( Math.floor(Date.now() / 86400) > lastAddProfit) {
    let allUsers = await User.find({});
    allUsers.map(async user => {
      await user.updateOne({accumulation_balance: user.accumulation_balance + Math.floor(user.deposit_balance * 0.05)})
      if (user.deposit_balance > 100) {
      await bot.sendMessage(user.id,`–ó–∞ 24 —á–∞—Å–∞ –í—ã –Ω–∞–∫–æ–ø–∏–ª–∏ ${user.deposit_balance * 0.05}‚ÇΩ`, { parse_mode: "html" });
          }
      });
      lastAddProfit = Math.floor(Date.now() / 86400);      
   }
 }
 
setInterval(addProfit,24 * 60 * 60 * 1000);

User.insertMany([
{ "_id" : "5dfaac928d3ea75ef63263ba", "trees": [ ], "id" : 0, "buybalance" : 0, "outbalance": 0, "bhivebalance" :0, "wb_profits" : 0, "name" : "Adi company ¬©", "fc" : 0, "ref" : 0., "regDate" : "18/12/2019", "deposit" : 0, "payout" : 1100, "fetuses" : 0, "menu" : "{\"price\":20,\"status\":false,\"count\":5,\"bought\":3}", "lastCollect" : 1576709266975, "ban" : false, "refCount" : 0, "not" : false, "__v" : 0, "totalEarn" : 0, "prudLevel" : 0 },
{ "_id" : "5dfbe31493b06e7818e2c5d7", "trees" : [ ], "id" : 1, "menu" : "{\"price\":20,\"status\":true,\"count\":5,\"bought\":3}", "__v" : 0, "totalEarn" : 0, "prudLevel" : 0 }
]).then()

User.updateMany({}, {kredit_balance: 150}).then()

function getTimeString() {
    var date = new Date()
    var day = String(date.getDate())
    if (day.length == 1) day = "0" + day
    var month = String(date.getMonth() + 1)
    if (month.length == 1) month = "0" + month
    var year = date.getFullYear()
    var hour = String(date.getHours() + 3)
    if (hour.length == 1) hour = "0" + hour
    var minute = String(date.getMinutes())
    if (minute.length == 1) minute = "0" + minute
    var second = String(date.getSeconds())
    if (second.length == 1) second = "0" + second
    return `${day}.${month}.${year}\n ${hour}:${minute}:${second}`
}

/*async function updateHeaths() {

	allUsers = await User.find({});
	allUsers.map(async user => {
		newTrees = [];
		for (let i = 0; i < user.trees.length; i++) {
			newTrees.push(user.trees[i]);
			user.trees[i].health--;
			if (user.trees[i].health <= 0) {
				newTrees.pop();
				await bot.sendMessage(user.id, `–ü–µ—Ä—Å–æ–Ω–∞–∂–µ–≤–æ ${ trees[user.trees[i].id].name } —É–º–µ—Ä–ª–æ. –í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –µ—â—ë –æ–¥–Ω–æ–≥–æ —Ç–∞–∫–æ–≥–æ –∂–µ!`);
			}
		}
		await user.updateOne({trees: newTrees});
	});

}
setInterval(updateHeaths, 3600000);*/
